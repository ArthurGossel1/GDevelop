{"version":3,"sources":["Utils/LocalUserInfo.js","Utils/RetryIfFailed.js","ProjectsStorage/LocalFileStorageProvider/LocalFileResourceMover.js","ResourcesList/LocalResourceSources.js","ResourcesList/LocalResourceExternalEditors.js","ResourcesList/LocalPiskelBridge.js","ResourcesList/LocalJfxrBridge.js","ResourcesList/LocalYarnBridge.js","Export/LocalExporters/LocalPreviewLauncher/index.js","Utils/TimeFunction.js","Export/LocalExporters/LocalPreviewLauncher/LocalNetworkPreviewDialog.js","Export/LocalExporters/LocalPreviewLauncher/LocalPreviewDebuggerServer.js","Export/LocalExporters/index.js","Export/LocalExporters/LocalCordovaExport.js","Export/LocalExporters/LocalElectronExport.js","Export/LocalExporters/LocalHTML5Export.js","Export/LocalExporters/LocalFacebookInstantGamesExport.js","UI/LocalFilePicker/index.js","Export/LocalExporters/LocalOnlineCordovaExport.js","Export/LocalExporters/LocalOnlineElectronExport.js","Export/LocalExporters/LocalOnlineWebExport.js","MainFrame/ElectronMainMenu.js","JsExtensionsLoader/LocalJsExtensionsLoader.js","JsExtensionsLoader/LocalJsExtensionsFinder.js","EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener.js","GameEngineFinder/LocalGDJSDevelopmentWatcher.js","ProjectCreation/services/LocalCreation.js","ProjectsStorage/FakeCloudStorageProvider/index.js","ProjectsStorage/ResourceMover/LocalResourceMover.js","ProjectsStorage/ResourceFetcher/LocalResourceFetcher.js","LocalApp.js","Export/LocalExporters/LocalFileSystem.js","Utils/LocalArchiver.js","Utils/ObjectSplitter.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectOpener.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectWriter.js","UI/CustomSvgIcons/Computer.js","ProjectsStorage/LocalFileStorageProvider/index.js","Export/LocalExporters/LocalFileUploader.js"],"names":["os","optionalRequire","getUID","userInfo","uid","e","retryIfFailed","fn","a","times","tries","latestError","latestReturnValue","electron","ipcRenderer","fs","path","moveUrlResourcesToLocalFiles","project","fileMetadata","onProgress","Error","resourcesManager","getResourcesManager","allResourceNames","getAllResourceNames","toJSArray","resourceToFetchNames","filter","resourceName","filename","resource","getResource","getFile","startsWith","projectPath","dirname","fileIdentifier","baseAssetsPath","join","downloadedFilePaths","Set","erroredResources","fetchedResourcesCount","PromisePool","withConcurrency","for","process","url","extension","extname","filenameWithoutExtension","basename","name","newNameGenerator","tentativePath","existsSync","has","newPath","add","ensureDir","invoke","setFile","relative","replace","push","error","length","remote","dialog","localResourceSources","allResourceKindsAndMetadata","map","kind","fileExtensions","displayName","createNewResource","displayTab","selectResourcesHeadless","i18n","getLastUsedPath","setLastUsedPath","options","properties","multiSelection","getProjectFile","latestPath","browserWindow","getCurrentWindow","showOpenDialog","title","_","filters","extensions","defaultPath","filePaths","lastUsedPath","parse","dir","outsideProjectFolderPaths","isPathInProjectFolder","Window","showConfirmDialog","copyAllToProjectFolder","filePath","newResource","setName","renderComponent","editors","edit","sendExternalEditorOpened","openPiskel","openJfxr","openYarn","gd","global","resourceNames","resourcesLoader","singleFrame","onChangesSaved","extraOptions","resources","originalIndex","resourcePath","getLocalResourceFullPath","externalEditorData","removeAllListeners","on","event","outputResources","newAnimationName","metadata","data","pskl","forEach","createOrUpdateResource","ImageResource","setMetadata","JSON","stringify","send","newFilePath","AudioResource","jfxr","JsonResource","LocalPreviewLauncher","canDoNetworkPreview","canDoHotReload","state","networkPreviewDialogOpen","networkPreviewHost","networkPreviewPort","networkPreviewError","previewGamePath","previewBrowserWindowOptions","hotReloadsCount","hideMenuBar","alwaysOnTop","_networkPreviewSubscriptionChecker","_hotReloadSubscriptionChecker","_openPreviewBrowserWindow","previewGameIndexHtmlPath","_openPreviewWindow","gamePath","setState","width","getGameResolutionWidth","height","getGameResolutionHeight","useContentSize","getName","backgroundColor","webPreferences","webSecurity","nodeIntegration","contextIsolation","getIsMenuBarHiddenInPreview","getIsAlwaysOnTopInPreview","networkPreview","err","serverParams","port","setTimeout","_checkSubscriptionForNetworkPreview","ipAddress","root","_prepareExporter","findGDJS","then","gdjsRoot","console","info","fileSystem","assignIn","AbstractFileSystemJS","localFileSystem","outputDir","getTempDir","exporter","Exporter","launchPreview","previewOptions","layout","externalLayout","getPreviewDebuggerServer","startServer","catch","timeFunction","previewExportOptions","PreviewExportOptions","setIsDevelopmentEnvironment","isDev","setLayoutName","setExternalLayoutName","previewDebuggerServerAddress","getDebuggerServerAddress","useWebsocketDebuggerClientWithServerAddress","address","includeFileHashs","props","getIncludeFileHashs","includeFile","hash","setIncludeFileHash","setElectronRemoteRequirePath","debuggerIds","getExistingDebuggerIds","shouldHotReload","hotReload","setProjectDataOnlyExport","projectDataOnlyExport","setFullLoadingScreen","fullLoadingScreen","exportProjectForPixiPreview","delete","debuggerId","sendMessage","command","checkHasSubscription","time","localPreviewDebuggerServer","this","ref","subscriptionChecker","onChangeSubscription","id","mode","open","onClose","onExport","onRunPreviewLocally","React","onResult","t0","performance","now","LocalNetworkDialog","actions","label","primary","onClick","secondaryActions","onRequestClose","value","fullWidth","debuggerServerState","debuggerServerAddress","callbacksList","Promise","reject","resolve","serverStartPromise","serverStartPromiseCompleted","onErrorReceived","debuggerIdIndex","indexOf","splice","onConnectionClosed","onConnectionOpened","onServerStateChanged","message","parsedMessage","onHandleParsedMessage","warn","serverStartTimeoutPromise","race","getServerState","registerCallbacks","callbacks","callbacksIndex","localOnlineWebExporter","onlineWebExporter","exportPipeline","localOnlineWebExportPipeline","localAutomatedExporters","html5Exporter","localHTML5ExportPipeline","onlineCordovaExporter","localOnlineCordovaExportPipeline","onlineElectronExporter","localOnlineElectronExportPipeline","facebookInstantGamesExporter","localFacebookInstantGamesExportPipeline","localManualExporters","cordovaExporter","localCordovaExportPipeline","electronExporter","localElectronExportPipeline","shell","packageNameWarningType","getInitialExportState","getLastCompilationDirectory","canLaunchBuild","exportState","isNavigationDisabled","renderHeader","updateExportState","noMargin","type","onChange","setLastCompilationDirectory","renderLaunchButtonLabel","prepareExporter","context","launchExport","exportOptions","MapStringBoolean","set","exportWholePixiProject","launchResourcesDownload","exportOutput","launchCompression","renderDoneFooter","openExportFolder","openPath","renderGameButton","app","archiveOutputFilename","getPath","temporaryOutputDir","mkDir","clearDir","archiveLocalFolder","outputFilename","styles","container","position","display","alignItems","button","marginLeft","textField","flex","LocalFilePicker","onChooseFolder","showSaveDialog","style","undefined","margin","translatableHintText","PureComponent","onlineBuildType","limitedBuilds","targets","keystore","signingDialogOpen","errored","exportStep","includes","archiveOutputDir","tmpdir","launchUpload","outputFile","getBuildFileUploadOptions","uploadOptions","uploadLocalFile","updateStepProgress","key","launchOnlineBuild","authenticatedUser","uploadBucketKey","gameId","getAuthorizationHeader","firebaseUser","buildCordovaAndroid","buildElectron","renderCustomStepsProgress","build","onSaveProject","sizeLimit","buildWeb","useIPCEventListener","ipcEvent","func","handler","eventArgs","removeListener","ElectronMainMenu","recentProjectFiles","onOpenRecentFile","shortcutMap","useShortcutMap","language","onChooseProject","onSaveProjectAs","onCloseProject","onCloseApp","onExportProject","onCreateProject","onCreateBlank","onOpenProjectManager","onOpenHomePage","onOpenDebugger","onOpenAbout","onOpenPreferences","onOpenLanguage","onOpenProfile","onOpenGamesDashboard","setElectronUpdateStatus","fileTemplate","submenu","accelerator","getElectronAccelerator","onClickSendEvent","item","enabled","isMacLike","editTemplate","role","viewTemplate","windowTemplate","helpTemplate","onClickOpenLink","template","unshift","buildAndSendMenuTemplate","useCommandWithOptions","generateOptions","text","loadExtension","require","findJsExtensionModules","module","exports","objectsEditorService","objectsRenderingService","filterExamples","onFindGDJS","loadAllExtensions","extensionModulePaths","all","extensionModulePath","extensionModule","rethrowException","ex","result","rawError","registerEditorConfigurations","registerInstanceRenderers","JsPlatform","get","extensionsRoot","readdir","extensionFolders","filteredExtensionFolders","folder","extensionFolder","extensionFolderPath","jsExtensionModulePath","stat","stats","isFile","modulePaths","modulePath","makeLocalEventsFunctionCodeWriter","onWriteFile","mkdir","code","getPathFor","codeNamespace","slugs","getIncludeFileFor","writeFunctionCode","functionCodeNamespace","content","writeFile","writeBehaviorCode","behaviorCodeNamespace","LocalEventsFunctionsExtensionWriter","chooseEventsFunctionExtensionFile","extensionName","writeEventsFunctionsExtension","filepath","object","stringifyException","writeJSONFile","serializeToJSObject","LocalEventsFunctionsExtensionOpener","readEventsFunctionExtensionFile","readFile","encoding","dataObject","readJSONFile","LocalGDJSDevelopmentWatcher","shouldWatch","PreferencesContext","values","useGDJSDevelopmentWatcher","settings","projectName","outputPath","ProjectHelper","createNewGDJSProject","localFilePath","setProjectFile","sendNewGameCreated","exampleUrl","exampleSlug","source","storageProvider","destination","LocalFileStorageProvider","onCreateFromExampleShortHeader","exampleShortHeader","getExample","example","projectFileUrl","slug","UrlStorageProvider","showErrorBox","errorId","FakeCloudStorageProvider","internalName","disabled","renderIcon","fontSize","size","createOperations","doesInitialOpenRequireUserInteraction","onOpen","onOpenWithPicker","movers","newFileMetadata","ProjectResourcesCopier","copyAllResourcesTo","LocalResourceMover","moveAllProjectResources","oldStorageProvider","newStorageProvider","mover","fetchers","fetchRelativeResourcesToFullUrls","LocalResourceFetcher","fetchAllProjectResources","fetcher","create","authentication","setUpContextMenu","appArguments","getArguments","disableCheckForUpdates","makeEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","storageProviders","defaultStorageProvider","getStorageProviderOperations","initialFileMetadataToOpen","getStorageProvider","renderMainMenu","renderPreviewLauncher","renderExportDialog","automatedExporters","manualExporters","renderCreateDialog","initialExampleShortHeader","isProjectOpening","onOpenProjectPreCreationDialog","renderGDJSDevelopmentWatcher","resourceMover","resourceFetcher","resourceSources","resourceExternalEditors","localResourceExternalEditors","extensionsLoader","makeExtensionsLoader","ObjectsEditorService","ObjectsRenderingService","LocalFileSystem","mkdirsSync","dirExists","emptyDirSync","fileNameFrom","fullPath","_isExternalUrl","_translateUrl","dirNameFrom","makeAbsolute","baseDirectory","isAbsolute","normalize","makeRelative","charAt","copyFile","dest","copySync","writeToFile","file","contents","outputFileSync","readFileSync","toString","readDir","ext","toUpperCase","output","VectorString","readdirSync","push_back","fileExists","statSync","substr","lazyRequireArchiver","optionalLazyRequire","archiver","createWriteStream","archive","zlib","level","fileSize","pointer","log","roundFileSizeInMb","Math","round","pipe","directory","finalize","unsplit","isReferenceMagicPropertyName","getReferencePartialObject","maxUnsplitDepth","unsplitObject","currentObject","depth","keys","Object","indexOrPropertyName","reference","isReference","referenceTo","partialObject","getSlugifiedUniqueNameFromProperty","propertyName","existingNamesForReference","currentReference","property","newName","referencePath","hasAutoSave","compareLastModified","autoSavePath","mtime","getTime","onGetAutoSave","checkFileContent","expectedContent","verificationTime","toFixed","writeAndCheckFile","writeAndCheckFormattedJSONFile","writeProjectFiles","paths","serializedProjectObject","isFolderProject","partialObjects","pathSeparator","getArrayItemReferenceName","shouldSplit","createReference","splitObject","currentPath","Array","isArray","index","itemPath","itemReference","propertyPath","propertyReference","split","Date","lastModifiedDate","wasSaved","onChooseSaveProjectAsLocation","saveDialogOptions","showSaveDialogSync","onStartSaving","onMoveResources","onAutoSaveProject","serializeToJSON","getWriteErrorMessage","memo","SvgIcon","viewBox","fill","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","Computer","getFileMetadataFromAppArguments","POSITIONAL_ARGUMENTS_KEY","getOpenErrorMessage","stepCurrentProgress","stepMaxProgress"],"mappings":"qHACA,8CACMA,EADN,MACWC,GAAgB,MAEdC,EAAS,WACpB,IACE,OAAOF,EAAGG,WAAWC,IACrB,MAAOC,GACP,MAAO,M,kICLEC,EAAa,uCAAG,aAE3BC,GAF2B,qBAAAC,EAAA,sDACzBC,EADyB,EACzBA,MAGEC,EAAQ,EACRC,EAAc,KALS,YAMpBD,EAAQD,GANY,wBAOzBC,IACAC,EAAc,KARW,kBAUSJ,IAVT,cAUjBK,EAViB,yBAWhBA,GAXgB,kCAavBD,EAAW,KAbY,qCAiBrBA,EAjBqB,0DAAH,wD,SCGpBE,EAAWZ,IAAgB,YAC3Ba,EAAcD,EAAWA,EAASC,YAAc,KAChDC,EAAKd,IAAgB,YACrBe,EAAOf,IAAgB,QAgBhBgB,EAA4B,uCAAG,iDAAAT,EAAA,yDAC1CU,EAD0C,EAC1CA,QACAC,EAF0C,EAE1CA,aACAC,EAH0C,EAG1CA,WAEKL,GAAOD,EAL8B,sBAKX,IAAIO,MAAM,eALC,cAQpCC,EAAmBJ,EAAQK,sBAC3BC,EAAmBF,EAAiBG,sBAAsBC,YAC1DC,EAAuBH,EAAiBI,QAAO,SAAAC,GACnD,IAzBoBC,EAyBdC,EAAWT,EAAiBU,YAAYH,GAE9C,OA3BoBC,EA2BEC,EAASE,WAzBtBC,WAAW,YACpBJ,EAASI,WAAW,aACpBJ,EAASI,WAAW,aA0BhBC,EAAcnB,EAAKoB,QAAQjB,EAAakB,gBACxCC,EAAiBtB,EAAKuB,KAAKJ,EAAa,UACxCK,EAAsB,IAAIC,IAC1BC,EAAmB,GAErBC,EAAwB,EArBc,UAuBpCC,IAAYC,gBAAgB,IAC/BC,IAAInB,GACJoB,QAFG,uCAEK,WAAMlB,GAAN,yBAAArB,EAAA,6DACDuB,EAAWT,EAAiBU,YAAYH,GAExCmB,EAAMjB,EAASE,UACfgB,EAAYjC,EAAKkC,QAAQF,GACzBG,EAA2BnC,EAAKoC,SAASJ,EAAKC,GAC9CI,EAAOC,YAAiBH,GAA0B,SAAAE,GACtD,IAAME,EAAgBvC,EAAKuB,KAAKD,EAAgBe,GAAQJ,EACxD,OACElC,EAAGyC,WAAWD,IAAkBf,EAAoBiB,IAAIF,MAGtDG,EAAU1C,EAAKuB,KAAKD,EAAgBe,GAAQJ,EAClDT,EAAoBmB,IAAID,GAbjB,mBAgBCpD,EAAc,CAAEG,MAAO,GAAV,sBAAe,sBAAAD,EAAA,sEAC1BO,EAAG6C,UAAUtB,GADa,uBAE1BxB,EAAY+C,OAAO,sBAAuBb,EAAKU,GAFrB,OAGhC3B,EAAS+B,QACP9C,EAAK+C,SAAS5B,EAAauB,GAASM,QAAQ,MAAO,MAJrB,4CAhB7B,0DAwBLtB,EAAiBuB,KAAK,CAAEpC,eAAcqC,MAAK,OAxBtC,QA2BP9C,EAAWuB,IAAyBhB,EAAqBwC,QA3BlD,0DAFL,uDAvBoC,iCAuDnC,CACLzB,qBAxDwC,4CAAH,uD,gHChBnC0B,EAASnE,IAAgB,oBACzBoE,EAASD,EAASA,EAAOC,OAAS,KAClCrD,EAAOf,IAAgB,QAEvBqE,EAA2C,YAC5CC,IAA4BC,KAC7B,gBAAGC,EAAH,EAAGA,KAAmBC,GAAtB,EAASC,YAAT,EAAsBD,gBAAgBE,EAAtC,EAAsCA,kBAAtC,MAA+D,CAC7DvB,KAAM,qBAAuBoB,EAC7BE,YAAa,qBACbE,WAAY,SACZJ,OACAK,wBAAwB,WAAD,4BAAE,qDAAAtE,EAAA,yDACvBuE,EADuB,EACvBA,KACAC,EAFuB,EAEvBA,gBACAC,EAHuB,EAGvBA,gBACA/D,EAJuB,EAIvBA,QACAgE,EALuB,EAKvBA,QAEKb,EAPkB,sBAQf,IAAIhD,MAAM,sDARK,cAUjB8D,EAAa,CAAC,YAChBD,EAAQE,gBAAgBD,EAAWlB,KAAK,mBAEtC9B,EAAcnB,EAAKoB,QAAQlB,EAAQmE,kBACnCC,EAAaN,EAAgB9D,EAASuD,IAAStC,EAE/CoD,EAAgBnB,EAAOoB,mBAhBN,UAiBGnB,EAAOoB,eAAeF,EAAe,CAC7DG,MAAOX,EAAKY,EAAE,sBACdR,aACAS,QAAS,CACP,CAAEvC,KAAM0B,EAAKY,EAAE,wBAAqBE,WAAYnB,IAElDoB,YAAaR,IAvBQ,qBAiBjBS,EAjBiB,EAiBjBA,YAQaA,EAAU5B,OAzBN,0CAyBqB,IAzBrB,WA2BjB6B,EAAehF,EAAKiF,MAAMF,EAAU,IAAIG,IAC9CjB,EAAgB/D,EAASuD,EAAMuB,GAEzBG,EAA4BJ,EAAUnE,QAC1C,SAAAZ,GAAI,OAAKoF,YAAsBlF,EAASF,OAGtCmF,EAA0BhC,OAlCP,qBAmCNkC,IAAOC,kBACpBvB,EAAKY,EACH,8IArCiB,kCA0CDY,YAAuBrF,EAAS6E,GA1C/B,QA0CnBA,EA1CmB,wCA8ChBA,EAAUvB,KAAI,SAAAgC,GACnB,IAAMC,EAAc7B,IACdzC,EAAcnB,EAAKoB,QAAQlB,EAAQmE,kBAIzC,OAHAoB,EAAY3C,QAAQ9C,EAAK+C,SAAS5B,EAAaqE,IAC/CC,EAAYC,QAAQ1F,EAAK+C,SAAS5B,EAAaqE,IAExCC,MApDc,4CAAF,mDAAC,GAuDxBE,gBAAiB,kBAAM,WAKdrC,O,kCC/Ef,0CAUMsC,EAAyC,CAC7C,CACEvD,KAAM,aACNsB,YAAa,mBACbF,KAAM,QACNoC,KAAM,SAAA3B,GAEJ,OADA4B,YAAyB,UAClBC,YAAW7B,KAGtB,CACE7B,KAAM,OACNsB,YAAa,+CACbF,KAAM,QACNoC,KAAM,SAAA3B,GAEJ,OADA4B,YAAyB,QAClBE,YAAS9B,KAGpB,CACE7B,KAAM,OACNsB,YAAa,iDACbF,KAAM,OACNoC,KAAM,SAAA3B,GAEJ,OADA4B,YAAyB,QAClBG,YAAS/B,MAKP0B,O,sHClCT/F,EAAWZ,IAAgB,YAC3Be,EAAOf,IAAgB,QACvBa,EAAcD,EAAWA,EAASC,YAAc,KAChDoG,EAAkBC,EAAOD,GAOlBH,EAAa,SAAC,GAOO,IANhC7F,EAM+B,EAN/BA,QAEAkG,GAI+B,EAL/BC,gBAK+B,EAJ/BD,eACAE,EAG+B,EAH/BA,YACAC,EAE+B,EAF/BA,eACAC,EAC+B,EAD/BA,aAEA,GAAK3G,GAAaC,EAAlB,CAEA,IAAM2G,EAAYL,EAAc5C,KAAI,SAAC3C,EAAc6F,GAEjD,MAAO,CACLC,aAFiBC,YAAyB1G,EAASW,GAGnDA,eACA6F,oBAIEvF,EAAcnB,EAAKoB,QAAQlB,EAAQmE,kBACnCwC,EAAkB,2BACnBL,GADmB,IAEtBC,YACAH,cACAnF,gBAIFrB,EAAYgH,mBAAmB,wBAC/BhH,EAAYiH,GACV,wBACA,SAACC,EAAOC,EAAiBC,EAAkBL,GACzC,IAAMM,EAAWN,EAAmBO,KAChC,CAAEC,KAAMR,GACR,KAEEvG,EAAmBJ,EAAQK,sBACjC0G,EAAgBK,SAAQ,SAAAvG,GACtBA,EAASsB,KAAOrC,EAAK+C,SAAS5B,EAAaJ,EAASf,MACpDuH,YAAuBrH,EAAS,IAAIgG,EAAGsB,cAAiBzG,EAASsB,SAGnE4E,EAAgB,GAAGE,SAAWA,EAC9BF,EAAgB,GAAGC,iBAAmBA,EAElCL,EAAmBP,aACjBa,GACF7G,EACGU,YAAYhB,EAAK+C,SAAS5B,EAAa8F,EAAgB,GAAGjH,OAC1DyH,YAAYC,KAAKC,UAAUR,IAEhCZ,EAAeU,IAKfV,EAAeU,MAMrBnH,EAAY8H,KAAK,kCAAmCf,O,qDC9EtD,4EAOMhH,EAAWZ,IAAgB,YAC3Be,EAAOf,IAAgB,QACvBa,EAAcD,EAAWA,EAASC,YAAc,KAChDoG,EAAkBC,EAAOD,GAKlBF,EAAW,SAAC,GAMS,IALhC9F,EAK+B,EAL/BA,QAEAkG,GAG+B,EAJ/BC,gBAI+B,EAH/BD,eACAG,EAE+B,EAF/BA,eACAC,EAC+B,EAD/BA,aAEA,GAAK3G,GAAaC,EAAlB,CACA,IAAMqB,EAAcnB,EAAKoB,QAAQlB,EAAQmE,kBAMnCwC,EAAqB,CACzBF,aAN0BC,YAC1B1G,EACAkG,EAAc,IAKdS,mBAAoBL,EAAaK,mBACjC1F,eAGFrB,EAAYgH,mBAAmB,sBAC/BhH,EAAYiH,GACV,sBACA,SAACC,EAAOa,EAAahB,GACnB,IAAMxE,EAAOrC,EAAK+C,SAAS5B,EAAa0G,GACxCN,YAAuBrH,EAAS,IAAIgG,EAAG4B,cAAiBzF,GAExD,IAAM8E,EAAW,CACfY,KAAMlB,GAER3G,EACGK,sBACAS,YAAYqB,GACZoF,YAAYC,KAAKC,UAAUR,IAC9BZ,EAAe,CAAC,CAAEY,WAAU9E,aAIhCvC,EAAY8H,KAAK,kBAAmBf,O,qDCrDtC,4EAOMhH,EAAWZ,IAAgB,YAC3Be,EAAOf,IAAgB,QACvBa,EAAcD,EAAWA,EAASC,YAAc,KAChDoG,EAAkBC,EAAOD,GAKlBD,EAAW,SAAC,GAMS,IALhC/F,EAK+B,EAL/BA,QAEAkG,GAG+B,EAJ/BC,gBAI+B,EAH/BD,eACAG,EAE+B,EAF/BA,eACAC,EAC+B,EAD/BA,aAEA,GAAK3G,GAAaC,EAAlB,CACA,IAAMqB,EAAcnB,EAAKoB,QAAQlB,EAAQmE,kBAMnCwC,EAAqB,CACzBF,aAN0BC,YAC1B1G,EACAkG,EAAc,IAKdS,mBAAoBL,EAAaK,mBACjC1F,eAGFrB,EAAYgH,mBAAmB,sBAC/BhH,EAAYiH,GAAG,sBAAsB,SAACC,EAAOa,GAC3C,IAAMxF,EAAOrC,EAAK+C,SAAS5B,EAAa0G,GACxCN,YAAuBrH,EAAS,IAAIgG,EAAG8B,aAAgB3F,GACvDkE,EAAe,CAAC,CAAElE,aAGpBvC,EAAY8H,KAAK,mBAAoBf,O,+PC1BjChH,EAAWZ,IAAgB,YAC3Be,EAAOf,IAAgB,QACvBa,EAAcD,EAAWA,EAASC,YAAc,KAChDoG,EAAkBC,EAAOD,GA0BV+B,E,4MAInBC,oBAAsB,kBAAM,G,EAC5BC,eAAiB,kBAAM,G,EAEvBC,MAAQ,CACNC,0BAA0B,EAC1BC,mBAAoB,KACpBC,mBAAoB,KACpBC,oBAAqB,KACrBC,gBAAiB,KACjBC,4BAA6B,KAC7BC,gBAAiB,EACjBC,aAAa,EACbC,aAAa,G,EAEfC,mCAA2D,K,EAC3DC,8BAAsD,K,EAEtDC,0BAA4B,WAC1B,MAAyD,EAAKZ,MAAtDK,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,4BACpBA,GAAgCD,GAEhC3I,GAELA,EAAY+C,OAAO,eAAgB,CACjC6F,8BACAO,yBAAyB,UAAD,OAAYR,EAAZ,eACxBI,YAAa,EAAKT,MAAMS,YACxBD,YAAa,EAAKR,MAAMQ,e,EAI5BM,mBAAqB,SACnBhJ,EACAiJ,EACAjF,GAEA,EAAKkF,SACH,CACEV,4BAA6B,CAC3BW,MAAOnJ,EAAQoJ,yBACfC,OAAQrJ,EAAQsJ,0BAChBC,gBAAgB,EAChB/E,MAAM,cAAD,OAAgBxE,EAAQwJ,WAC7BC,gBAAiB,UACjBC,eAAgB,CACdC,aAAa,EAGbC,iBAAiB,EACjBC,kBAAkB,IAGtBtB,gBAAiBU,EACjBP,aAAc1E,EAAQ8F,8BACtBnB,YAAa3E,EAAQ+F,8BAEvB,WACE,GAAK/F,EAAQgG,eAEN,CACL,IAAKpK,EAAa,OAElBA,EAAYgH,mBAAmB,qBAC/BhH,EAAYgH,mBAAmB,qBAC/BhH,EAAYiH,GAAG,qBAAqB,SAACC,EAAOmD,EAAKC,GAC3CD,EACF,EAAKf,SAAS,CACZf,0BAA0B,EAC1BE,mBAAoB,KACpBD,mBAAoB,KACpBE,oBAAqB2B,IAGvB,EAAKf,SAAS,CACZf,0BAA0B,EAC1BE,mBAAoB6B,EAAaC,OAIrCC,YAAW,kBAAM,EAAKC,4CAExBzK,EAAYiH,GAAG,oBAAoB,SAACC,EAAOwD,GACzC,EAAKpB,SAAS,CACZd,mBAAoBkC,OAGxB1K,EAAY8H,KAAK,eAAgB,CAC/B6C,KAAMtB,IAERrJ,EAAY8H,KAAK,6BA/BjB,EAAKoB,gC,EAqCb0B,iBAAmB,WAKjB,OAAOC,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBC,QAAQC,KAAK,iBAAkBF,GAE/B,IAAMG,EAAaC,IACjB,IAAI/E,EAAGgF,qBACPC,KAKF,MAAO,CACLC,UAJgBpL,EAAKuB,KAAKyJ,EAAWK,aAAc,WAKnDC,SAJe,IAAIpF,EAAGqF,SAASP,EAAYH,GAK3CA,gB,EAKNW,cAAgB,SAACC,GACf,IAAQvL,EAAoCuL,EAApCvL,QAASwL,EAA2BD,EAA3BC,OAAQC,EAAmBF,EAAnBE,eAKzB,OAAO,EAAKC,2BACTC,cACAC,OAAM,SAAA3B,GAGLW,QAAQ5H,MACN,uDACAiH,MAGHS,MAAK,kBAAM,EAAKF,sBAChBE,MAAK,YAAwC,IAArCQ,EAAoC,EAApCA,UAAWE,EAAyB,EAAzBA,SAAUT,EAAe,EAAfA,SAC5BkB,aACE,WACE,IAAMC,EAAuB,IAAI9F,EAAG+F,qBAClC/L,EACAkL,GAEFY,EAAqBE,4BAA4B7G,IAAO8G,SACxDH,EAAqBI,cAAcV,EAAOhC,WACtCiC,GACFK,EAAqBK,sBACnBV,EAAejC,WAInB,IAAM4C,EAA+BC,cACjCD,GACFN,EAAqBQ,4CACnBF,EAA6BG,QAC7B,GAAKH,EAA6BjC,MAItC,IAAMqC,EAAmB,EAAKC,MAAMC,sBACpC,IAAK,IAAMC,KAAeH,EAAkB,CAC1C,IAAMI,EAAOJ,EAAiBG,GAC9Bb,EAAqBe,mBAAmBF,EAAaC,GAMvDd,EAAqBgB,6BACnBhN,EAAKuB,KACHsJ,EACA,0BACA,mBACA,sBAIJ,IAAMoC,EAAc,EAAKrB,2BAA2BsB,yBAC9CC,EACJ1B,EAAe2B,aAAeH,EAAY9J,OAE5C6I,EAAqBqB,yBAEnBF,GAAmB1B,EAAe6B,uBAGpCtB,EAAqBuB,qBACnB9B,EAAe+B,mBAGjBlC,EAASmC,4BAA4BzB,GACrCA,EAAqB0B,SACrBpC,EAASoC,SAELP,GACFF,EAAY3F,SAAQ,SAAAqG,GAClB,EAAK/B,2BAA2BgC,YAAYD,EAAY,CACtDE,QAAS,iBAKX,EAAKzF,MAAMO,gBAAkB,KAAO,GACpC,EAAKI,+BAEL,EAAKA,8BAA8B+E,uBAErC,EAAK1E,UAAS,SAAAhB,GAAK,MAAK,CACtBO,gBAAiBP,EAAMO,gBAAkB,OAG3C,EAAKO,mBAAmBhJ,EAASkL,EAAWK,MAGhD,SAAAsC,GAAI,OAAIjD,QAAQC,KAAR,uBAA6BgD,EAA7B,c,EAShBxD,oCAAsC,WACpC,OAAK,EAAKzB,oCAEH,EAAKA,mCAAmCgF,wB,8DAPjD,WACE,OAAOE,M,oBAST,WAAU,IAAD,OACP,EAKIC,KAAK7F,MAJPC,EADF,EACEA,yBACAC,EAFF,EAEEA,mBACAC,EAHF,EAGEA,mBACAC,EAJF,EAIEA,oBAGF,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CACE0F,IAAK,SAAAC,GAAmB,OACrB,EAAKrF,mCAAqCqF,GAE7CC,qBAAsB,WACpB,EAAKhF,SAAS,CAAEf,0BAA0B,IACtC,EAAKsE,MAAMyB,sBACb,EAAKzB,MAAMyB,wBAEfC,GAAG,oBACH3J,MAAO,cAAC,QAAD,0BACP4J,KAAK,QAEP,cAAC,IAAD,CACEJ,IAAK,SAAAC,GAAmB,OACrB,EAAKpF,8BAAgCoF,GAExCC,qBAAsB,WAChB,EAAKzB,MAAMyB,sBACb,EAAKzB,MAAMyB,wBAEfC,GAAG,gBACH3J,MACE,cAAC,QAAD,4DAEF4J,KAAK,QAEP,cAAC,IAAD,CACEC,KAAMlG,EACNrG,IACEsG,GAAsBC,EAAtB,UACOD,EADP,YAC6BC,GACzB,KAENrF,MAAOsF,EACPgG,QAAS,kBAAM,EAAKpF,SAAS,CAAEf,0BAA0B,KACzDoG,SAAUR,KAAKtB,MAAM8B,SACrBC,oBAAqBT,KAAKjF,mC,GAvRc2F,e,oDC5ClD,kCAAO,IAAM5C,EAAe,SAACxM,EAAcqP,GACzC,IAAIC,EAAKC,YAAYC,MACrBxP,IAEAqP,EADSE,YAAYC,MACPF,K,gLCcKG,E,4JACnB,WACE,MAOIf,KAAKtB,MANP3K,EADF,EACEA,IACAuM,EAFF,EAEEA,KACArL,EAHF,EAGEA,MACAuL,EAJF,EAIEA,SACAD,EALF,EAKEA,QACAE,EANF,EAMEA,oBAEF,OAAKH,EAGH,eAAC,IAAD,CACEU,QAAS,CACP,cAAC,IAAD,CAEEC,MAAO,cAAC,QAAD,cACPC,SAAO,EACPC,QAASZ,GAHL,UAMRa,iBAAkB,CAChBZ,GACE,cAAC,IAAD,CAEES,MAAO,cAAC,QAAD,oBACPE,QAASX,GAFL,UAKR,cAAC,IAAD,CAEES,MAAO,cAAC,QAAD,6BACPE,QAASV,GAFL,wBAKRH,KAAMA,EACNe,eAAgBd,EAxBlB,UA0BGtL,GACC,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,QAAD,8KAQJA,IAAUlB,GAAO,cAAC,IAAD,KACjBkB,GAASlB,GACT,gCACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,QAAD,6GAMJ,cAAC,IAAD,CAAWuN,MAAOvN,EAAKwN,WAAS,IAChC,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,QAAD,yGAtDM,S,GAV0Bb,c,kCCnBhD,gFAOM9O,EAPN,MAOiBZ,GAAgB,YAC3Ba,EAAcD,EAAWA,EAASC,YAAc,KAElD2P,EAA6C,UAC7CC,EAAwC,KACtCC,EAAuD,GACvD1C,EAAiC,GAiB1Be,EAAoD,CAC/DnC,YAAa,WACX,IAAK/L,EAAa,OAAO8P,QAAQC,SACjC,GAA4B,YAAxBJ,EAAmC,OAAOG,QAAQE,UAEtD,IAAMC,EAAqB,IAAIH,SAAQ,SAACE,EAASD,GAC/C,IAAIG,GAA8B,EAClCP,EAAsB,UACtBC,EAAwB,KAtBvB5P,IAELA,EAAYgH,mBAAmB,8BAC/BhH,EAAYgH,mBAAmB,2BAC/BhH,EAAYgH,mBAAmB,8BAC/BhH,EAAYgH,mBAAmB,8BAC/BhH,EAAYgH,mBAAmB,8BAC/BhH,EAAYgH,mBAAmB,8BAkB3BhH,EAAYiH,GAAG,2BAA2B,SAACC,EAAOmD,GAC3C6F,IACHH,EAAO1F,GACP6F,GAA8B,GAGhCL,EAAcrI,SAAQ,mBAAyB2I,EAAzB,EAAGA,iBAAsC9F,SAGjErK,EAAYiH,GAAG,8BAA8B,SAACC,EAAD,GAAoB,IAAVqH,EAAS,EAATA,GAC/C6B,EAAkBjD,EAAYkD,QAAQ9B,IACnB,IAArB6B,GAAwBjD,EAAYmD,OAAOF,EAAiB,GAEhEP,EAAcrI,SAAQ,mBACpB+I,EADoB,EAAGA,oBACJ,CACjBhC,KACApB,sBAKNnN,EAAYiH,GAAG,8BAA8B,SAACC,EAAD,GAAoB,IAAVqH,EAAS,EAATA,GACrDpB,EAAYhK,KAAKoL,GACjBsB,EAAcrI,SAAQ,mBACpBgJ,EADoB,EAAGA,oBACJ,CACjBjC,KACApB,sBAKNnN,EAAYiH,GAAG,8BAA8B,SAACC,EAAD,GAAyB,IAAfyF,EAAc,EAAdA,QACrD3B,QAAQC,KAAK,kCACb0E,EAAsB,UACtBC,EAAwBjD,EACnBuD,IACHF,IACAE,GAA8B,GAGhCL,EAAcrI,SAAQ,mBACpBiJ,EADoB,EAAGA,8BAK3BzQ,EAAYiH,GAAG,6BAA6B,SAACC,EAAD,GAA6B,IAAnBqH,EAAkB,EAAlBA,GAAImC,EAAc,EAAdA,QACxD1F,QAAQC,KAAK,4CACb,IACE,IAAM0F,EAAgB/I,KAAKzC,MAAMuL,GACjCb,EAAcrI,SAAQ,mBACpBoJ,EADoB,EAAGA,uBACD,CAAErC,KAAIoC,qBAE9B,MAAOpR,GACPyL,QAAQ6F,KACN,6DACAtR,OAINS,EAAY8H,KAAK,4BAKbgJ,EAA4B,IAAIhB,SAAQ,SAACE,EAASD,GACtDvF,YAAW,WACTuF,EACE,IAAIxP,MACF,kEAGH,QAEL,OAAOuP,QAAQiB,KAAK,CAACd,EAAoBa,KAE3ChD,YAAa,SAACS,EAAgBmC,GACvB1Q,IACuB,YAAxB2P,EAKJ3P,EAAY8H,KAAK,wBAAyB,CACxCyG,KACAmC,QAAS9I,KAAKC,UAAU6I,KANxB1F,QAAQ5H,MAAM,0DASlB4N,eAAgB,kBAAMrB,GACtBvC,uBAAwB,kBAAMD,GAC9B8D,kBAAmB,SAACC,GAGlB,OAFArB,EAAc1M,KAAK+N,GAEZ,WACL,IAAMC,EAAiBtB,EAAcQ,QAAQa,IACrB,IAApBC,GAAuBtB,EAAcS,OAAOa,EAAgB,MAKzD1E,EAA2B,kBACtCmD,I,wRC7HWwB,EAAgC,2BACxCC,KADwC,IAE3CC,eAAgBC,MAGLC,EAA2C,CAAC,2BAElDC,KAFiD,IAGpDH,eAAgBI,MAHoC,2BAMjDC,KANiD,IAOpDL,eAAgBM,MAPoC,2BAUjDC,KAViD,IAWpDP,eAAgBQ,MAXoC,2BAcjDC,KAdiD,IAepDT,eAAgBU,OAIPC,EAAwC,CAAC,2BAE/CR,KAF8C,IAGjDH,eAAgBI,MAHiC,2BAM9CQ,KAN8C,IAOjDZ,eAAgBa,MAPiC,2BAU9CC,KAV8C,IAWjDd,eAAgBe,Q,mMCjCdtS,EAAWZ,IAAgB,YAC3BmT,EAAQvS,EAAWA,EAASuS,MAAQ,KAEpClM,EAAkBC,EAAOD,GAgBlB+L,EAMT,CACF5P,KAAM,gBACNgQ,uBAAwB,SAExBC,sBAAuB,SAACpS,GAAD,MAAyB,CAC9CkL,UAAWlL,EAAQqS,gCAGrBC,eAAgB,SAAAC,GAAW,QAAMA,EAAYrH,WAE7CsH,qBAAsB,kBAAM,GAE5BC,aAAc,gBAAGzS,EAAH,EAAGA,QAASuS,EAAZ,EAAYA,YAAaG,EAAzB,EAAyBA,kBAAzB,OACZ,eAAC,IAAD,CAAQC,UAAQ,EAAhB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAQA,UAAQ,EAAhB,SACE,cAAC,IAAD,QAGJ,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,KAAK,SACLvD,MAAOkD,EAAYrH,UACnBtG,YAAa5E,EAAQqS,8BACrBQ,SAAU,SAAA3H,GACRwH,GAAkB,iBAAO,CAAExH,gBAC3BlL,EAAQ8S,4BAA4B5H,IAEtCoE,WAAS,UAMjByD,wBAAyB,kBAAM,cAAC,QAAD,iBAE/BC,gBAAiB,SACfC,GAEA,OAAOxI,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBC,QAAQC,KAAK,iBAAkBF,GAG/B,IAAMG,EAAaC,IACjB,IAAI/E,EAAGgF,qBACPC,KAIF,MAAO,CACLG,SAHe,IAAIpF,EAAGqF,SAASP,EAAYH,QAQjDuI,aAAc,SACZD,EADY,GAGe,IADzB7H,EACwB,EADxBA,SAEI+H,EAAgB,IAAInN,EAAGoN,iBAU7B,OATAD,EAAcE,IAAI,oBAAoB,GACtCjI,EAASkI,uBACPL,EAAQjT,QACRiT,EAAQV,YAAYrH,UACpBiI,GAEFA,EAAc3F,SACdpC,EAASoC,SAEFkC,QAAQE,QAAQ,OAGzB2D,wBAAyB,SACvBN,EACAO,GAEA,OAAO9D,QAAQE,QAAQ,OAGzB6D,kBAAmB,SACjBR,EACAO,GAEA,OAAO9D,QAAQE,QAAQ,OAGzB8D,iBAAkB,YAA+B,IAA5BnB,EAA2B,EAA3BA,YACboB,GADwC,EAAdrF,QACP,WACnB4D,GAAOA,EAAM0B,SAASrB,EAAYrH,aAGxC,OACE,cAAC,IAAD,CACE2I,iBAAkB,kBAChB,cAAC,IAAD,CAEE7E,MAAO,cAAC,QAAD,oBACPC,SAAS,EACTC,QAASyE,GAHL,e,qNCxHVhU,EAAWZ,IAAgB,YAC3BmT,EAAQvS,EAAWA,EAASuS,MAAQ,KAEpClM,EAAkBC,EAAOD,GAgBlBiM,EAMT,CACF9P,KAAM,iBACNgQ,uBAAwB,UAExBC,sBAAuB,SAACpS,GAAD,MAAyB,CAC9CkL,UAAWlL,EAAQqS,gCAGrBC,eAAgB,SAAAC,GAAW,QAAMA,EAAYrH,WAE7CsH,qBAAsB,kBAAM,GAE5BC,aAAc,gBAAGzS,EAAH,EAAGA,QAASuS,EAAZ,EAAYA,YAAaG,EAAzB,EAAyBA,kBAAzB,OACZ,eAAC,IAAD,CAAQC,UAAQ,EAAhB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAQA,UAAQ,EAAhB,SACE,cAAC,IAAD,QAGJ,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,KAAK,SACLvD,MAAOkD,EAAYrH,UACnBtG,YAAa5E,EAAQqS,8BACrBQ,SAAU,SAAA3H,GACRwH,GAAkB,iBAAO,CAAExH,gBAC3BlL,EAAQ8S,4BAA4B5H,IAEtCoE,WAAS,UAMjByD,wBAAyB,kBAAM,cAAC,QAAD,iBAE/BC,gBAAiB,SACfC,GAEA,OAAOxI,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBC,QAAQC,KAAK,iBAAkBF,GAG/B,IAAMG,EAAaC,IACjB,IAAI/E,EAAGgF,qBACPC,KAIF,MAAO,CACLG,SAHe,IAAIpF,EAAGqF,SAASP,EAAYH,QAQjDuI,aAAc,SACZD,EADY,GAGe,IADzB7H,EACwB,EADxBA,SAEI+H,EAAgB,IAAInN,EAAGoN,iBAU7B,OATAD,EAAcE,IAAI,qBAAqB,GACvCjI,EAASkI,uBACPL,EAAQjT,QACRiT,EAAQV,YAAYrH,UACpBiI,GAEFA,EAAc3F,SACdpC,EAASoC,SAEFkC,QAAQE,QAAQ,OAGzB2D,wBAAyB,SACvBN,EACAO,GAEA,OAAO9D,QAAQE,QAAQ,OAGzB6D,kBAAmB,SACjBR,EACAO,GAEA,OAAO9D,QAAQE,QAAQ,OAGzB8D,iBAAkB,YAA+B,IAA5BnB,EAA2B,EAA3BA,YACboB,GADwC,EAAdrF,QACP,WACnB4D,GAAOA,EAAM0B,SAASrB,EAAYrH,aAGxC,OACE,cAAC,IAAD,CACE2I,iBAAkB,kBAChB,cAAC,IAAD,CAEE7E,MAAO,cAAC,QAAD,oBACPC,SAAS,EACTC,QAASyE,GAHL,e,qNC3HVhU,EAAWZ,IAAgB,YAC3BmT,EAAQvS,EAAWA,EAASuS,MAAQ,KAEpClM,EAAkBC,EAAOD,GAgBlBsL,EAMT,CACFnP,KAAM,cAENiQ,sBAAuB,SAACpS,GAAD,MAAyB,CAC9CkL,UAAWlL,EAAQqS,gCAGrBC,eAAgB,SAAAC,GAAW,QAAMA,EAAYrH,WAE7CsH,qBAAsB,kBAAM,GAE5BC,aAAc,gBAAGzS,EAAH,EAAGA,QAASuS,EAAZ,EAAYA,YAAaG,EAAzB,EAAyBA,kBAAzB,OACZ,eAAC,IAAD,CAAQC,UAAQ,EAAhB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,MAEF,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,KAAK,SACLvD,MAAOkD,EAAYrH,UACnBtG,YAAa5E,EAAQqS,8BACrBQ,SAAU,SAAA3H,GACRwH,GAAkB,iBAAO,CAAExH,gBAC3BlL,EAAQ8S,4BAA4B5H,IAEtCoE,WAAS,UAMjByD,wBAAyB,kBAAM,cAAC,QAAD,gCAE/BC,gBAAiB,SACfC,GAEA,OAAOxI,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBC,QAAQC,KAAK,iBAAkBF,GAG/B,IAAMG,EAAaC,IACjB,IAAI/E,EAAGgF,qBACPC,KAIF,MAAO,CACLG,SAHe,IAAIpF,EAAGqF,SAASP,EAAYH,QAQjDuI,aAAc,SACZD,EADY,GAGe,IADzB7H,EACwB,EADxBA,SAEI+H,EAAgB,IAAInN,EAAGoN,iBAS7B,OARAhI,EAASkI,uBACPL,EAAQjT,QACRiT,EAAQV,YAAYrH,UACpBiI,GAEFA,EAAc3F,SACdpC,EAASoC,SAEFkC,QAAQE,QAAQ,OAGzB2D,wBAAyB,SACvBN,EACAO,GAEA,OAAO9D,QAAQE,QAAQ,OAGzB6D,kBAAmB,SACjBR,EACAO,GAEA,OAAO9D,QAAQE,QAAQ,OAGzB8D,iBAAkB,YAA+B,IAA5BnB,EAA2B,EAA3BA,YAA2B,EAAdjE,QAKhC,OACE,cAAC,IAAD,CACEuF,iBAAkB,kBAChB,cAAC,IAAD,CACEvE,WAAS,EACTL,SAAO,EACPC,QAAS,WATXgD,GAAOA,EAAM0B,SAASrB,EAAYrH,YAUhC8D,MAAO,cAAC,QAAD,+C,+NCnHblP,EAAOf,IAAgB,QACvBY,EAAWZ,IAAgB,YAC3BmE,EAASnE,IAAgB,oBACzB+U,EAAM5Q,EAASA,EAAO4Q,IAAM,KAC5B5B,EAAQvS,EAAWA,EAASuS,MAAQ,KAEpClM,EAAkBC,EAAOD,GAqBlB4L,EAMT,CACFzP,KAAM,+BAENiQ,sBAAuB,SAACpS,GAAD,MAAyB,CAC9C+T,sBAAuBD,EACnBhU,EAAKuB,KAAKyS,EAAIE,QAAQ,aAAc,uBACpC,KAGN1B,eAAgB,SAAAC,GAAW,QAAMA,EAAYwB,uBAE7CvB,qBAAsB,kBAAM,GAE5BC,aAAc,cAAGzS,QAAH,IAAYuS,EAAZ,EAAYA,YAAaG,EAAzB,EAAyBA,kBAAzB,OACZ,eAAC,IAAD,CAAQC,UAAQ,EAAhB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,MAEF,cAAC,IAAD,UACE,cAAC,IAAD,CACEnO,MAAO,yCACP8L,QACE,oEAEF5L,QAAS,CACP,CACEvC,KAAM,6CACNwC,WAAY,CAAC,SAGjB0K,MAAOkD,EAAYwB,sBACnBnP,YAAakP,EAAMA,EAAIE,QAAQ,aAAe,GAC9CnB,SAAU,SAAAxD,GAAK,OACbqD,GAAkB,iBAAO,CAAEqB,sBAAuB1E,OAEpDC,WAAS,UAMjByD,wBAAyB,kBAAM,cAAC,QAAD,iBAE/BC,gBAAiB,SACfC,GAEA,OAAOxI,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBC,QAAQC,KAAK,iBAAkBF,GAG/B,IAAMG,EAAaC,IACjB,IAAI/E,EAAGgF,qBACPC,KAEIG,EAAW,IAAIpF,EAAGqF,SAASP,EAAYH,GACvCsJ,EAAqBnU,EAAKuB,KAC9ByJ,EAAWK,aACX,8BAKF,OAHAL,EAAWoJ,MAAMD,GACjBnJ,EAAWqJ,SAASF,GAEb,CACL7I,WACA6I,0BAKNf,aAAc,SACZD,EADY,GAGe,IADzB7H,EACwB,EADxBA,SAAU6I,EACc,EADdA,mBAENd,EAAgB,IAAInN,EAAGoN,iBAU7B,OATAD,EAAcE,IAAI,iCAAiC,GACnDjI,EAASkI,uBACPL,EAAQjT,QACRiU,EACAd,GAEFA,EAAc3F,SACdpC,EAASoC,SAEFkC,QAAQE,QAAQ,CAAEqE,wBAG3BV,wBAAyB,SACvBN,EADuB,GAGe,IADpCgB,EACmC,EADnCA,mBAEF,OAAOvE,QAAQE,QAAQ,CAAEqE,wBAG3BR,kBAAmB,SACjBR,EADiB,GAGe,IAD9BgB,EAC6B,EAD7BA,mBAEF,OAAOG,YAAmB,CACxBtU,KAAMmU,EACNI,eAAgBpB,EAAQV,YAAYwB,yBAIxCL,iBAAkB,YAA+B,IAA5BnB,EAA2B,EAA3BA,YACboB,GADwC,EAAdrF,QACP,WACnB4D,GAASpS,GACXoS,EAAM0B,SAAS9T,EAAKoB,QAAQqR,EAAYwB,0BAG5C,OACE,cAAC,IAAD,CACEF,iBAAkB,kBAChB,cAAC,IAAD,CAEE7E,MAAO,cAAC,QAAD,oBACPC,SAAS,EACTC,QAASyE,GAHL,e,wLC9JVhU,EAAWZ,IAAgB,YAC3BmE,EAASnE,IAAgB,oBACzBoE,EAASD,EAASA,EAAOC,OAAS,KAElCmR,EAAS,CACbC,UAAW,CACTC,SAAU,WACVC,QAAS,OACTC,WAAY,YAEdC,OAAQ,CACNC,WAAY,IAEdC,UAAW,CACTC,KAAM,IAiBWC,E,4MACnBC,eAAiB,WACf,GAAK7R,GAAWxD,EAAhB,CAEA,IAAM0E,EAAgBnB,EAAOoB,mBAC7B,OAAOnB,EACJ8R,eAAe5Q,EAAe,CAC7BG,MAAO,EAAKiI,MAAMjI,MAClBE,QAAS,EAAK+H,MAAM/H,QACpB4L,QAAS,EAAK7D,MAAM6D,QACpB1L,YAAa,EAAK6H,MAAM7H,cAEzB8F,MAAK,YAAmB,IAAhBpF,EAAe,EAAfA,SACP,EAAKmH,MAAMoG,SAASvN,GAAY,S,4CAItC,WAAU,IAAD,OACP,OACE,sBACE4P,MAAK,2BACAZ,EAAOC,WADP,IAEHpL,MAAO4E,KAAKtB,MAAM6C,UAAY,YAAS6F,IAH3C,UAME,cAAC,IAAD,CACEC,OAAO,QACPF,MAAOZ,EAAOO,UACdjC,KAAK,OACLyC,qBAAsB,qBACtBhG,MAAOtB,KAAKtB,MAAM4C,MAClBwD,SAAU,SAAC/L,EAAOuI,GAAR,OAAkB,EAAK5C,MAAMoG,SAASxD,MAElD,cAAC,IAAD,CACEL,MAAO,cAAC,QAAD,eACPkG,MAAOZ,EAAOK,OACdzF,QAASnB,KAAKiH,wB,GApCqBM,kB,2MChBvCxV,EAAOf,IAAgB,QACvBD,EAAKC,IAAgB,MACrBiH,EAAkBC,EAAOD,GAiBlBwL,EAMT,CACFrP,KAAM,uBACNoT,gBAAiB,gBACjBC,eAAe,EACfrD,uBAAwB,SAExBC,sBAAuB,iBAAO,CAC5BqD,QAAS,CAAC,cACVC,SAAU,MACVC,mBAAmB,IAIrBrD,eAAgB,SAACC,EAAaqD,EAASC,GAAvB,OACdD,GAA0B,KAAfC,GAGbrD,qBAAsB,SAACqD,EAAYD,GAAb,OACnBA,GACD,CAAC,WAAY,SAAU,qBAAsB,WAAY,UAAUE,SACjED,IAGJpD,aAAc,SAAAhG,GAAK,OAAI,cAAC,IAAD,eAAuBA,KAE9CsG,wBAAyB,kBAAM,cAAC,QAAD,+BAE/BC,gBAAiB,SACfC,GAEA,OAAOxI,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBC,QAAQC,KAAK,iBAAkBF,GAE/B,IAAMG,EAAaC,IACjB,IAAI/E,EAAGgF,qBACPC,KAEIG,EAAW,IAAIpF,EAAGqF,SAASP,EAAYH,GACvCsJ,EAAqBnU,EAAKuB,KAC9ByJ,EAAWK,aACX,uBAKF,OAHAL,EAAWoJ,MAAMD,GACjBnJ,EAAWqJ,SAASF,GAEb,CACL7I,WACA6I,0BAKNf,aAAc,SACZD,EADY,GAGe,IADzB7H,EACwB,EADxBA,SAAU6I,EACc,EADdA,mBAENd,EAAgB,IAAInN,EAAGoN,iBAU7B,OATAD,EAAcE,IAAI,oBAAoB,GACtCjI,EAASkI,uBACPL,EAAQjT,QACRiU,EACAd,GAEFA,EAAc3F,SACdpC,EAASoC,SAEFkC,QAAQE,QAAQ,CAAEqE,wBAG3BV,wBAAyB,SACvBN,EADuB,GAGe,IADpCgB,EACmC,EADnCA,mBAEF,OAAOvE,QAAQE,QAAQ,CAAEqE,wBAG3BR,kBAAmB,SACjBR,EADiB,GAGe,IAD9BgB,EAC6B,EAD7BA,mBAEI8B,EAAmBjX,EAAGkX,SAC5B,OAAO5B,YAAmB,CACxBtU,KAAMmU,EACNI,eAAgBvU,EAAKuB,KAAK0U,EAAkB,uBAIhDE,aAAc,SACZhD,EACAiD,GAEA,OAAOC,cAA4BzL,MAAK,SAAA0L,GACtC,OAAOC,YACLH,EACAE,EACAnD,EAAQqD,oBACR5L,MAAK,kBAAM0L,EAAcG,WAI/BC,kBAAmB,SACjBjE,EACAkE,EACAC,EACAC,EACA3S,GAKA,IAAQ4S,EAAyCH,EAAzCG,uBAAwBC,EAAiBJ,EAAjBI,aAChC,OAAKA,EAGEC,YACLF,EACAC,EAAa3X,IACbwX,EACAnE,EAAYkD,QACZlD,EAAYmD,SACZiB,EACA3S,GATO0L,QAAQC,OAAO,IAAIxP,MAAM,kC,6NCzIhCL,EAAOf,IAAgB,QACvBD,EAAKC,IAAgB,MACrBiH,EAAkBC,EAAOD,GAiBlB0L,EAMT,CACFvP,KAAM,wBACNoT,gBAAiB,iBACjBC,eAAe,EACfrD,uBAAwB,UAExBC,sBAAuB,iBAAO,CAC5BqD,QAAS,CAAC,YAIZnD,eAAgB,SAACC,EAAaqD,EAASC,GAAvB,QACZtD,EAAYkD,QAAQxS,SAAW2S,GAA0B,KAAfC,IAG9CrD,qBAAsB,SAACqD,EAAYD,GAAb,OACnBA,GACD,CAAC,WAAY,SAAU,qBAAsB,WAAY,UAAUE,SACjED,IAGJpD,aAAc,SAAAhG,GAAK,OAAI,cAAC,IAAD,eAAuBA,KAE9CsG,wBAAyB,kBAAM,cAAC,QAAD,iBAE/BC,gBAAiB,SACfC,GAEA,OAAOxI,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBC,QAAQC,KAAK,iBAAkBF,GAE/B,IAAMG,EAAaC,IACjB,IAAI/E,EAAGgF,qBACPC,KAEIG,EAAW,IAAIpF,EAAGqF,SAASP,EAAYH,GACvCsJ,EAAqBnU,EAAKuB,KAC9ByJ,EAAWK,aACX,wBAKF,OAHAL,EAAWoJ,MAAMD,GACjBnJ,EAAWqJ,SAASF,GAEb,CACL7I,WACA6I,0BAKNf,aAAc,SACZD,EADY,GAGe,IADzB7H,EACwB,EADxBA,SAAU6I,EACc,EADdA,mBAENd,EAAgB,IAAInN,EAAGoN,iBAU7B,OATAD,EAAcE,IAAI,qBAAqB,GACvCjI,EAASkI,uBACPL,EAAQjT,QACRiU,EACAd,GAEFA,EAAc3F,SACdpC,EAASoC,SAEFkC,QAAQE,QAAQ,CAAEqE,wBAG3BV,wBAAyB,SACvBN,EADuB,GAGe,IADpCgB,EACmC,EADnCA,mBAEF,OAAOvE,QAAQE,QAAQ,CAAEqE,wBAG3BR,kBAAmB,SACjBR,EADiB,GAGe,IAD9BgB,EAC6B,EAD7BA,mBAEI8B,EAAmBjX,EAAGkX,SAC5B,OAAO5B,YAAmB,CACxBtU,KAAMmU,EACNI,eAAgBvU,EAAKuB,KAAK0U,EAAkB,uBAIhDE,aAAc,SACZhD,EACAiD,GAEA,OAAOC,cAA4BzL,MAAK,SAAA0L,GACtC,OAAOC,YACLH,EACAE,EACAnD,EAAQqD,oBACR5L,MAAK,kBAAM0L,EAAcG,WAI/BC,kBAAmB,SACjBjE,EACAkE,EACAC,EACAC,EACA3S,GAKA,IAAQ4S,EAAyCH,EAAzCG,uBAAwBC,EAAiBJ,EAAjBI,aAChC,OAAKA,EAGEE,YACLH,EACAC,EAAa3X,IACbwX,EACAnE,EAAYkD,QACZkB,EACA3S,GARO0L,QAAQC,OAAO,IAAIxP,MAAM,kC,sNCvIhCL,EAAOf,IAAgB,QACvBD,EAAKC,IAAgB,MACrBiH,EAAkBC,EAAOD,GAmBlBmL,EAMT,CACFhP,KAAM,mBACNoT,gBAAiB,YAEjBnD,sBAAuB,kBAAM,MAG7BE,eAAgB,SAACC,EAAaqD,EAASC,GAAvB,OACdD,GAA0B,KAAfC,GAAoC,SAAfA,GAGlCrD,qBAAsB,SAACqD,EAAYD,GAAb,OACnBA,IAAY,CAAC,GAAI,QAAQE,SAASD,IAErCpD,aAAc,kBAAM,cAAC,IAAD,KAEpBM,wBAAyB,kBAAM,cAAC,QAAD,uBAE/BiE,0BAA2B,gBACzBC,EADyB,EACzBA,MACAjX,EAFyB,EAEzBA,QACAkX,EAHyB,EAGzBA,cACAtB,EAJyB,EAIzBA,QACAC,EALyB,EAKzBA,WALyB,OAOzB,cAAC,IAAD,CACEoB,MAAOA,EACPjX,QAASA,EACTkX,cAAeA,EACftB,QAASA,EACTC,WAAYA,KAIhB7C,gBAAiB,SACfC,GAEA,OAAOxI,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBC,QAAQC,KAAK,iBAAkBF,GAE/B,IAAMG,EAAaC,IACjB,IAAI/E,EAAGgF,qBACPC,KAEIG,EAAW,IAAIpF,EAAGqF,SAASP,EAAYH,GACvCsJ,EAAqBnU,EAAKuB,KAC9ByJ,EAAWK,aACX,mBAKF,OAHAL,EAAWoJ,MAAMD,GACjBnJ,EAAWqJ,SAASF,GAEb,CACL7I,WACA6I,0BAKNf,aAAc,SACZD,EADY,GAGe,IADzB7H,EACwB,EADxBA,SAAU6I,EACc,EADdA,mBAENd,EAAgB,IAAInN,EAAGoN,iBAS7B,OARAhI,EAASkI,uBACPL,EAAQjT,QACRiU,EACAd,GAEFA,EAAc3F,SACdpC,EAASoC,SAEFkC,QAAQE,QAAQ,CAAEqE,wBAG3BV,wBAAyB,SACvBN,EADuB,GAGe,IADpCgB,EACmC,EADnCA,mBAEF,OAAOvE,QAAQE,QAAQ,CAAEqE,wBAG3BR,kBAAmB,SACjBR,EADiB,GAGe,IAD9BgB,EAC6B,EAD7BA,mBAEI8B,EAAmBjX,EAAGkX,SAC5B,OAAO5B,YAAmB,CACxBtU,KAAMmU,EACNI,eAAgBvU,EAAKuB,KAAK0U,EAAkB,oBAC5CoB,UAAW,QAIflB,aAAc,SACZhD,EACAiD,GAEA,OAAOC,cAA4BzL,MAAK,SAAA0L,GACtC,OAAOC,YACLH,EACAE,EACAnD,EAAQqD,oBACR5L,MAAK,kBAAM0L,EAAcG,WAI/BC,kBAAmB,SACjBjE,EACAkE,EACAC,EACAC,EACA3S,GAKA,IAAQ4S,EAAyCH,EAAzCG,uBAAwBC,EAAiBJ,EAAjBI,aAChC,OAAKA,EAGEO,YACLR,EACAC,EAAa3X,IACbwX,EACAC,EACA3S,GAPO0L,QAAQC,OAAO,IAAIxP,MAAM,kC,oDCxKtC,uDAQMR,EAAWZ,IAAgB,YAC3Ba,EAAcD,EAAWA,EAASC,YAAc,KA8DhDyX,EAAsB,SAACC,EAAyBC,GACpD9I,aACE,WACE,GAAK7O,EAAL,CACA,IAAM4X,EAAU,SAAC1Q,GAAD,2BAAW2Q,EAAX,iCAAWA,EAAX,yBAAyBF,EAAI,WAAJ,EAAQE,IAEjD,OADA7X,EAAYiH,GAAGyQ,EAAUE,GAClB,kBAAM5X,EAAY8X,eAAeJ,EAAUE,OAEpD,CAACF,EAAUC,KA2TAI,IAnDU,SAAClL,GACxB,IAAQ5I,EAAwD4I,EAAxD5I,KAAM7D,EAAkDyM,EAAlDzM,QAAS4X,EAAyCnL,EAAzCmL,mBAAoBC,EAAqBpL,EAArBoL,iBACrCC,EAAcC,cACdC,EAAWnU,EAAKmU,SA6CtB,OA3CAX,EAAoB,iBAAkB5K,EAAMwL,iBAC5CZ,EAAoB,wBAAyB5K,EAAMoL,kBACnDR,EAAoB,iBAAkB5K,EAAMyK,eAC5CG,EAAoB,oBAAqB5K,EAAMyL,iBAC/Cb,EAAoB,kBAAmB5K,EAAM0L,gBAC7Cd,EAAoB,sBAAuB5K,EAAM2L,YACjDf,EAAoB,mBAAoB5K,EAAM4L,iBAC9ChB,EAAoB,4BAA6B5K,EAAM6L,iBACvDjB,EAAoB,yBAA0B5K,EAAM8L,eACpDlB,EACE,iCACA5K,EAAM+L,sBAERnB,EAAoB,2BAA4B5K,EAAMgM,gBACtDpB,EAAoB,0BAA2B5K,EAAMiM,gBACrDrB,EAAoB,uBAAwB5K,EAAMkM,aAClDtB,EAAoB,6BAA8B5K,EAAMmM,mBACxDvB,EAAoB,0BAA2B5K,EAAMoM,gBACrDxB,EAAoB,yBAA0B5K,EAAMqM,eACpDzB,EACE,iCACA5K,EAAMsM,sBAER1B,EAAoB,gBAAiB5K,EAAMuM,yBAE3CvK,aACE,YAnS6B,SAC/BzO,EACA6D,EACA+T,EACAE,GAEA,IAAMmB,EAAe,CACnBjK,MAAOnL,EAAKY,EAAE,aACdyU,QAAS,CACP,CACElK,MAAOnL,EAAKY,EAAE,eACdyU,QAAS,CACP,CACElK,MAAOnL,EAAKY,EAAE,6BACd0U,YAAaC,YACXtB,EAAW,oBAEbuB,iBAAkB,0BAEpB,CACErK,MAAOnL,EAAKY,EAAE,qCACd4U,iBAAkB,+BAIxB,CAAEzG,KAAM,aACR,CACE5D,MAAOnL,EAAKY,EAAE,gBACd0U,YAAaC,YAAuBtB,EAAW,cAC/CuB,iBAAkB,kBAEpB,CACErK,MAAOnL,EAAKY,EAAE,oBACdyU,QAAStB,EAAmBtU,KAAI,SAAAgW,GAAI,MAAK,CACvCtK,MAAOsK,EAAKrZ,aAAakB,eACzBkY,iBAAkB,wBAClB5B,UAAW6B,OAGf,CAAE1G,KAAM,aACR,CACE5D,MAAOnL,EAAKY,EAAE,aACd0U,YAAaC,YAAuBtB,EAAW,cAC/CuB,iBAAkB,iBAClBE,UAAWvZ,GAEb,CACEgP,MAAOnL,EAAKY,EAAE,mBACd0U,YAAaC,YAAuBtB,EAAW,iBAC/CuB,iBAAkB,oBAClBE,UAAWvZ,GAEb,CAAE4S,KAAM,aACR,CACE5D,MAAOnL,EAAKY,EAAE,sCACd0U,YAAaC,YAAuBtB,EAAW,aAC/CuB,iBAAkB,mBAClBE,UAAWvZ,GAEb,CAAE4S,KAAM,aACR,CACE5D,MAAOnL,EAAKY,EAAE,sBACd0U,YAAaC,YAAuBtB,EAAW,eAC/CuB,iBAAkB,kBAClBE,UAAWvZ,KAIZwZ,eACHP,EAAaC,QAAQnW,KACnB,CAAE6P,KAAM,aACR,CACE5D,MAAOnL,EAAKY,EAAE,mBACd4U,iBAAkB,0BAEpB,CACErK,MAAOnL,EAAKY,EAAE,wBACd4U,iBAAkB,kCAEpB,CACErK,MAAOnL,EAAKY,EAAE,oBACd4U,iBAAkB,8BAEpB,CACErK,MAAOnL,EAAKY,EAAE,iBACd4U,iBAAkB,2BAEpB,CAAEzG,KAAM,aACR,CACE5D,MAAOnL,EAAKY,EAAE,sBACd0U,YAAaC,YAAuBtB,EAAW,UAC/CuB,iBAAkB,wBAKxB,IAAMI,EAAe,CACnBzK,MAAOnL,EAAKY,EAAE,aACdyU,QAAS,CACP,CAAElK,MAAOnL,EAAKY,EAAE,aAAUiV,KAAM,QAChC,CAAE1K,MAAOnL,EAAKY,EAAE,aAAUiV,KAAM,QAChC,CAAE9G,KAAM,aACR,CAAE5D,MAAOnL,EAAKY,EAAE,YAASiV,KAAM,OAC/B,CAAE1K,MAAOnL,EAAKY,EAAE,aAAUiV,KAAM,QAChC,CAAE1K,MAAOnL,EAAKY,EAAE,cAAWiV,KAAM,SACjC,CAAE1K,MAAOnL,EAAKY,EAAE,8BAA2BiV,KAAM,sBACjD,CAAE1K,MAAOnL,EAAKY,EAAE,eAAYiV,KAAM,UAClC,CAAE1K,MAAOnL,EAAKY,EAAE,mBAAgBiV,KAAM,eAIpCC,EAAe,CACnB3K,MAAOnL,EAAKY,EAAE,aACdyU,QAAS,CACP,CACElK,MAAOnL,EAAKY,EAAE,6BACd0U,YAAaC,YACXtB,EAAW,sBAEbuB,iBAAkB,iCAClBE,UAAWvZ,GAEb,CACEgP,MAAOnL,EAAKY,EAAE,kBACd4U,iBAAkB,4BAEpB,CACErK,MAAOnL,EAAKY,EAAE,sBACd4U,iBAAkB,0BAClBE,UAAWvZ,GAEb,CAAE4S,KAAM,aACR,CAAE5D,MAAOnL,EAAKY,EAAE,+BAA4BiV,KAAM,kBAClD,CAAE9G,KAAM,aACR,CAAE5D,MAAOnL,EAAKY,EAAE,0BAAuBiV,KAAM,sBAI3CE,EAAiB,CACrB5K,MAAOnL,EAAKY,EAAE,eACdiV,KAAM,SACNR,QAAS,CAAC,CAAElK,MAAOnL,EAAKY,EAAE,iBAAciV,KAAM,cAG1CG,EAAe,CACnB7K,MAAOnL,EAAKY,EAAE,aACdiV,KAAM,OACNR,QAAS,CACP,CACElK,MAAOnL,EAAKY,EAAE,yBACdqV,gBAAiB,sBAEnB,CAAElH,KAAM,aACR,CACE5D,MAAOnL,EAAKY,EAAE,yBACdqV,gBAAiB,6BAEnB,CACE9K,MAAOnL,EAAKY,EAAE,+BACdqV,gBAAiB,+BAEnB,CAAElH,KAAM,aACR,CACE5D,MAAOnL,EAAKY,EAAE,+BACdqV,gBAAiB,uCAEnB,CACE9K,MAAOnL,EAAKY,EAAE,uCACdqV,gBACE,4EAEJ,CAAElH,KAAM,aACR,CACE5D,MAAOnL,EAAKY,EAAE,mCACdqV,gBAAiB,wCAEnB,CACE9K,MAAOnL,EAAKY,EAAE,mCACdqV,gBAAiB,iDAIlBN,eACHK,EAAaX,QAAQnW,KACnB,CAAE6P,KAAM,aACR,CACE5D,MAAOnL,EAAKY,EAAE,uBACd4U,iBAAkB,yBAKxB,IAAMU,EAAoC,CACxCd,EACAQ,EACAE,EACAC,EACAC,GAGEL,gBACFO,EAASC,QAAQ,CACfhL,MAAOnL,EAAKY,EAAE,mBACdyU,QAAS,CACP,CACElK,MAAOnL,EAAKY,EAAE,uBACd4U,iBAAkB,wBAEpB,CAAEzG,KAAM,aACR,CACE5D,MAAOnL,EAAKY,EAAE,mBACd4U,iBAAkB,0BAEpB,CACErK,MAAOnL,EAAKY,EAAE,wBACd4U,iBAAkB,kCAEpB,CACErK,MAAOnL,EAAKY,EAAE,oBACd4U,iBAAkB,8BAEpB,CACErK,MAAOnL,EAAKY,EAAE,iBACd4U,iBAAkB,2BAEpB,CAAEzG,KAAM,aACR,CAAE8G,KAAM,WAAYR,QAAS,IAC7B,CAAEtG,KAAM,aACR,CAAE8G,KAAM,QACR,CAAEA,KAAM,cACR,CAAEA,KAAM,UACR,CAAE9G,KAAM,aACR,CAAE8G,KAAM,WAIZD,EAAaP,QAAQnW,KACnB,CAAE6P,KAAM,aACR,CACE5D,MAAOnL,EAAKY,EAAE,eACdyU,QAAS,CAAC,CAAEQ,KAAM,iBAAmB,CAAEA,KAAM,mBAIjDE,EAAeV,QAAU,CACvB,CAAEQ,KAAM,YACR,CAAEA,KAAM,QACR,CAAE9G,KAAM,aACR,CAAE8G,KAAM,WAIR9Z,GACFA,EAAY8H,KAAK,gBAAiBqS,GAuChCE,CAAyBja,EAAS6D,EAAM+T,EAAoBE,KAE9D,CAACjU,EAAMmU,EAAUhY,EAAS4X,EAAoBE,IAGhDoC,YAAsB,uBAAuB,EAAM,CACjDC,gBAAiB1L,eACf,kBACEmJ,EAAmBtU,KAAI,SAAAgW,GAAI,MAAK,CAC9Bc,KAAMd,EAAKrZ,aAAakB,eACxBqW,QAAS,kBAAMK,EAAiByB,UAEpC,CAACzB,EAAkBD,MAIhB,O,qBCrYT,IAAQyC,EAAkBC,EAAQ,MAA1BD,cACFtb,EAAkBub,EAAQ,IACxBC,EAA2BD,EAAQ,MAAnCC,uBAqBRC,EAAOC,QAAU,YAQW,IANxBzU,EAMuB,EANvBA,GACA0U,EAKuB,EALvBA,qBACAC,EAIuB,EAJvBA,wBACAC,EAGuB,EAHvBA,eACAC,EAEuB,EAFvBA,WAGF,MAAO,CACLC,kBAAmB,SAACrW,GAClB,OAAO8V,EAAuB,CAAEK,iBAAgBC,eAAcnQ,MAC5D,SAAAqQ,GACE,OAAOrL,QAAQsL,IACbD,EAAqBzX,KAAI,SAAA2X,GACvB,IAAIC,EAAkB,KACtB,IACEA,EAAkBnc,EAAgBkc,EAAqB,CACrDE,kBAAkB,IAEpB,MAAOC,GACP,MAAO,CACLH,sBACAI,OAAQ,CACN/K,QACE,+GACFtN,OAAO,EACPsY,SAAUF,IAKhB,OAAIF,GAIAR,GACAQ,EAAgBK,8BAEhBL,EAAgBK,6BACdb,GAOFC,GACAO,EAAgBM,2BAEhBN,EAAgBM,0BACdb,GAIG,CACLM,sBACAI,OAAQhB,EACN5V,EACAuB,EACAA,EAAGyV,WAAWC,MACdR,KAKC,CACLD,sBACAI,OAAQ,CACNrY,OAAO,EACPsN,QACE,2GAMZ,SAAArG,GAEE,MADAW,QAAQ5H,MAAR,wCACMiH,S,qBCvGhB,IAAQQ,EAAa6P,EAAQ,KAArB7P,SACF1L,EAAkBub,EAAQ,IAC1Bxa,EAAOf,EAAgB,QACvBc,EAAKd,EAAgB,MAkD3Byb,EAAOC,QAAU,CACfF,uBAjC6B,SAAC,GAAoC,IAAlCK,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,WAChD,OAAQA,EAAaA,IAAepQ,KAAYC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SAChDgR,EAAiB7b,EAAKuB,KAAKsJ,EAAU,UAAW,cAItD,OAHAC,QAAQC,KAAR,sEACiE8Q,EADjE,QAGO,IAAIjM,SAAQ,SAACE,EAASD,GAC3B9P,EAAG+b,QAAQD,GAAgB,SAAC3Y,EAAO6Y,GACjC,GAAI7Y,EACF,OAAO2M,EAAO3M,GAGhB,IAAM8Y,EAA2BD,EAAiBnb,QAAO,SAAAqb,GACvD,OAAKnB,IAEiC,IAA/BmB,EAAO9L,QAAQ,cAGxBP,QAAQsL,IACNc,EAAyBxY,KAAI,SAAA0Y,GAAe,OAnCdC,EAqC1Bnc,EAAKuB,KAAKsa,EAAgBK,GApC/B,IAAItM,SAAQ,SAAAE,GACjB,IAAMsM,EAAwBpc,EAAKuB,KACjC4a,EACA,kBAEFpc,EAAGsc,KAAKD,GAAuB,SAACjS,EAAKmS,GACnC,OACSxM,EADL3F,EACa,KAGFmS,EAAMC,SAAWH,EAAwB,YAXtB,IAAAD,MAwC9BvR,MAAK,SAAA4R,GACL1M,EAAQ0M,EAAY5b,QAAO,SAAA6b,GAAU,QAAMA,QAC1C5M,e,kCC5CX,mFAGM7P,EAAOf,IAAgB,QACvBD,EAAKC,IAAgB,MACrBc,EAAKd,IAAgB,MAMdyd,EAAoC,SAAC,GAEkB,IADlEC,EACiE,EADjEA,YAIMvR,EAAYpL,EAAKuB,KACrBvC,EAAGkX,SACH,8BAAgChX,eAElCa,EAAG6c,MAAMxR,GAAW,SAAAjB,GACdA,GAAoB,WAAbA,EAAI0S,MACb/R,QAAQ5H,MACN,mFACAiH,MAMN,IAAM2S,EAAa,SAACC,GAClB,MAAM,GAAN,OAAU3R,EAAV,YAAuB4R,IAAMD,GAA7B,QAGF,MAAO,CACLE,kBAAmB,SAACF,GAAD,OAA2BD,EAAWC,IACzDG,kBAAmB,SACjBC,EACAN,GAEA,OAAO,IAAIjN,SAAQ,SAACE,EAASD,GAC3B,IAAMhD,EAAciQ,EAAWK,GAC/BR,EAAY,CAAE9P,cAAauQ,QAASP,IACpC9c,EAAGsd,UAAUxQ,EAAagQ,GAAM,SAAA1S,GAC9B,GAAIA,EAAK,OAAO0F,EAAO1F,GAEvB2F,WAINwN,kBAAmB,SACjBC,EACAV,GAEA,OAAO,IAAIjN,SAAQ,SAACE,EAASD,GAC3B,IAAMhD,EAAciQ,EAAWS,GAC/BZ,EAAY,CAAE9P,cAAauQ,QAASP,IACpC9c,EAAGsd,UAAUxQ,EAAagQ,GAAM,SAAA1S,GAC9B,GAAIA,EAAK,OAAO0F,EAAO1F,GAEvB2F,c,gHC9DJ/P,EAAKd,IAAgB,YACrBe,EAAOf,IAAgB,QACvBmE,EAASnE,IAAgB,oBACzBoE,EAASD,EAASA,EAAOC,OAAS,KAwBnBma,E,iDAAAA,EACZC,kCAAoC,SACzCC,GAEA,IAAKra,EAAQ,OAAOuM,QAAQC,OAAO,iBACnC,IAAMtL,EAAgBnB,EAAOoB,mBAE7B,OAAOnB,EACJ8R,eAAe5Q,EAAe,CAC7BG,MAAO,qCACPE,QAAS,CACP,CACEvC,KAAM,sCACNwC,WAAY,CAAC,UAGjBC,YAAa4Y,GAAgC,mBAE9C9S,MAAK,YAAmB,IAAhBpF,EAAe,EAAfA,SACP,OAAKA,GAAiB,SAnBTgY,EAwBZG,8BAAgC,SACrC1b,EACA2b,GAGA,OAnDkB,SAACC,EAAgBD,GACrC,IAAK7d,EAAI,OAAO6P,QAAQC,OAAO,IAAIxP,MAAM,iCAEzC,IACE,IAAM+c,EAAU1V,KAAKC,UAAUkW,EAAQ,KAAM,GAC7C,OAAO9d,EAAG6C,UAAU5C,EAAKoB,QAAQwc,IAAWhT,MAC1C,kBACE,IAAIgF,SAAQ,SAACE,EAASD,GACpB9P,EAAGsd,UAAUO,EAAUR,GAAS,SAACjT,GAC/B,OAAIA,EACK0F,EAAO1F,GAGT2F,aAIf,MAAOgO,GACP,OAAOlO,QAAQC,OAAOiO,IAiCfC,CADkBC,YAAoB/b,GACN2b,GAAU9R,OAAM,SAAA3B,GAErD,MADAW,QAAQ5H,MAAM,iDAAkDiH,GAC1DA,O,uGC3DNpK,EAAKd,IAAgB,MACrBmE,EAASnE,IAAgB,oBACzBoE,EAASD,EAASA,EAAOC,OAAS,KAmBnB4a,E,iDAAAA,EACZR,kCAAoC,WACzC,IAAKpa,EAAQ,OAAOuM,QAAQC,OAAO,iBACnC,IAAMtL,EAAgBnB,EAAOoB,mBAE7B,OAAOnB,EACJoB,eAAeF,EAAe,CAC7BG,MAAO,qCACPP,WAAY,CAAC,YACbqM,QAAS,kDACT5L,QAAS,CACP,CACEvC,KAAM,sCACNwC,WAAY,CAAC,YAIlB+F,MAAK,YAAoB,IAAjB7F,EAAgB,EAAhBA,UACP,OAAKA,GAAcA,EAAU5B,OACtB4B,EAAU,GAD2B,SAlB/BkZ,EAuBZC,gCAAkC,SACvCN,GAEA,OA3CiB,SAACA,GACpB,OAAK7d,EAEE,IAAI6P,SAAQ,SAACE,EAASD,GAC3B9P,EAAGoe,SAASP,EAAU,CAAEQ,SAAU,SAAU,SAACjU,EAAK/C,GAChD,GAAI+C,EAAK,OAAO0F,EAAO1F,GAEvB,IACE,IAAMkU,EAAa3W,KAAKzC,MAAMmC,GAC9B,OAAO0I,EAAQuO,GACf,MAAO/C,GACP,OAAOzL,EAAO+N,EAAW,0CAVfhO,QAAQC,OAAO,gCA0CtByO,CAAaV,K,kCChDxB,sEAGM/d,EAAWZ,IAAgB,YAC3Ba,EAAcD,EAAWA,EAASC,YAAc,KAMzCye,EAA8B,WACzC,IACMC,EADc7P,aAAiB8P,KACLC,OAAOC,0BAwBvC,OAtBAhQ,aACE,WACE,GAAK6P,EAAL,CAKA,GAAK1e,EAQL,OADAA,EAAY8H,KAAK,wCACV,WACL9H,EAAY8H,KAAK,yCARjBkD,QAAQ5H,MACN,qEAUN,CAACsb,IAGI,O,0MCxBHtY,EAAkBC,EAAOD,GAEzBlG,EAAOf,IAAgB,QACzBc,EAAKd,IAAgB,YAEZwZ,EAAoC,uCAAG,qCAAAjZ,EAAA,2DAClDuE,KACA6a,EAFkD,EAElDA,SAEQC,EAA4BD,EAA5BC,YAAaC,EAAeF,EAAfE,WAChB/e,GAAO+e,EALsC,yCAKnB,MALmB,cAO5C5e,EAAqBgG,EAAG6Y,cAAcC,uBACtCC,EAAgBjf,EAAKuB,KAAKud,EAAY,aAC5C5e,EAAQgf,eAAeD,GACvBE,YAAmB,CAAEC,WAAY,GAAIC,YAAa,KAVA,kBAW3C,CACLC,OAAQ,CACNpf,UACA2e,cACAU,gBAAiB,KACjBpf,aAAc,MAEhBqf,YAAa,CACXD,gBAAiBE,IACjBtf,aAAc,CAAEkB,eAAgB4d,MApBc,2CAAH,sDAyBpCS,EAAsE,uCAAG,yCAAAlgB,EAAA,yDACpFuE,EADoF,EACpFA,KACA4b,EAFoF,EAEpFA,mBACAf,EAHoF,EAGpFA,SAEQC,EAA4BD,EAA5BC,YAAaC,EAAeF,EAAfE,WAChB/e,GAAO+e,EANwE,0EAQ5Dc,YAAWD,GARiD,cAQ5EE,EAR4E,OAU5EZ,EAAgBjf,EAAKuB,KAAKud,EAAY,aAC5CK,YAAmB,CACjBC,WAAYS,EAAQC,eACpBT,YAAaM,EAAmBI,OAbgD,kBAe3E,CACLT,OAAQ,CACNT,cACA3e,QAAS,KACTqf,gBAAiBS,IACjB7f,aAAc,CACZkB,eAAgBwe,EAAQC,iBAG5BN,YAAa,CACXD,gBAAiBE,IACjBtf,aAAc,CACZkB,eAAgB4d,MA3B4D,yCAgClFgB,YAAa,CACXzP,QACEzM,EAAKY,EAAE,qCACP,IACAZ,EAAKY,EAAE,4DACT6W,SAAS,EAAD,GACR0E,QAAS,6BAtCuE,6EAAH,wD,oDCzCnF,0BAOMC,EAA4B,CAChCC,aAAc,YACd/d,KAAM,4CACNge,UAAU,EACVC,WAAY,SAAA3T,GAAK,OAAI,cAAC,IAAD,CAAO4T,SAAU5T,EAAM6T,QAC5CC,iBAAkB,WAChB,MAAO,CACLC,uCAAuC,EACvCC,OAAQ,SACNxgB,GAIA,OAAOyP,QAAQC,OAAO,IAAIxP,MAAM,mBAElCugB,iBAAkB,WAChB,OAAOhR,QAAQC,OAAO,IAAIxP,MAAM,mBAElC+W,cAAe,SAAClX,EAAoBC,GAClC,OAAOyP,QAAQC,OAAO,IAAIxP,MAAM,mBAElC+X,gBAAiB,SAAClY,EAAoBC,GACpC,OAAOyP,QAAQC,OAAO,IAAIxP,MAAM,sBAMzB8f,O,kJCzBTngB,E,MAAOf,GAAgB,QAEvBiH,EAAkBC,EAAOD,GAEzB2a,GAEL,6BACKpB,IAAyBW,aAD9B,aAEGX,IAAyBW,cAF5B,uCAGM,mCAAA5gB,EAAA,6DAASU,EAAT,EAASA,QAAS4gB,EAAlB,EAAkBA,gBAGf3f,EAAcnB,EAAKoB,QAAQ0f,EAAgBzf,gBAC3C2J,EAAaC,IAAS,IAAI/E,EAAGgF,qBAAwBC,KAC3DjF,EAAG6a,uBAAuBC,mBACxB9gB,EACA8K,EACA7J,GACA,GACA,GACA,GAXC,kBAaI,CACLO,iBAAkB,KAdjB,2CAHN,+EAwBKse,IAAmBI,aAxBxB,aAyBGX,IAAyBW,eACtB,gBAAGlgB,EAAH,EAAGA,QAAS4gB,EAAZ,EAAYA,gBAAiB1gB,EAA7B,EAA6BA,WAA7B,OACHH,YAA6B,CAC3BC,UACAC,aAAc2gB,EACd1gB,kBA9BL,GAkCK6gB,EAAqB,CACzBC,wBAAwB,WAAD,4BAAE,WACvBhd,GADuB,mBAAA1E,EAAA,yDAGf2hB,EAA2Cjd,EAA3Cid,mBAAoBC,EAAuBld,EAAvBkd,mBACtBC,EACJR,EAAO,GAAD,OACDM,EAAmBf,aADlB,aACmCgB,EAAmBhB,eANvC,sBASf,IAAI/f,MAAJ,yCAC8B8gB,EAAmBf,aADjD,eAEFgB,EAAmBhB,aAFjB,MATe,gCAehBiB,EAAMnd,IAfU,2CAAF,mDAAC,IAmBX+c,Q,8HC5DTK,GAEL,mBAGE7B,IAAyBW,aAAengB,KAH1C,cAME+f,IAAmBI,aAAemB,KANpC,GASKC,EAAwC,CAC5CC,yBAAyB,WAAD,4BAAE,WACxBvd,GADwB,iBAAA1E,EAAA,yDAGhB+f,EAAoBrb,EAApBqb,gBACFmC,EAAUJ,EAAS/B,EAAgBa,cAJjB,sBAMhB,IAAI/f,MAAJ,2CAEFkf,EAAgBa,aAFd,sDANgB,gCAYjBsB,EAAQxd,IAZS,2CAAF,mDAAC,IAgBZsd,O,6WCHTtb,EAAkBC,EAAOD,GAElByb,EAAS,SAACC,GACrBvc,IAAOwc,mBAEP,IAAMC,EAAezc,IAAO0c,eACtB5V,EAAQ9G,IAAO8G,QAErB,OACE,cAAC,IAAD,CACEyV,eAAgBA,EAChBI,yBAA0BF,EAAa,wBACvCG,6BAA8BvF,IAC9BwF,+BAAgC1E,IAChC2E,+BAAgClE,IALlC,SAOG,gBAAGla,EAAH,EAAGA,KAAH,OACC,cAAC,IAAD,CACE+d,aAAcA,EACdM,iBAEE,CAAC3C,IAA0BU,KAE7BkC,uBAAwB5C,IAN1B,SAQG,gBACC6C,EADD,EACCA,6BACAF,EAFD,EAECA,iBACAG,EAHD,EAGCA,0BACAC,EAJD,EAICA,mBAJD,OAMC,cAAC,IAAD,CACEze,KAAMA,EACN0e,eAAgB,SAAA9V,GAAK,OAAI,cAAC,IAAD,eAAsBA,KAC/C+V,sBAAuB,SAAC/V,EAAOuB,GAAR,OACrB,cAAC,IAAD,2BAA0BvB,GAA1B,IAAiCuB,IAAKA,MAExCyU,mBAAoB,SAAAhW,GAAK,OACvB,cAAC,IAAD,CACEzM,QAASyM,EAAMzM,QACfkX,cAAezK,EAAMyK,cACrBhJ,qBAAsBzB,EAAMyB,qBAC5BI,QAAS7B,EAAM6B,QACfoU,mBAAoBtR,IACpBuR,gBAAiB9Q,IACjBZ,kBAAmBD,OAGvB4R,mBAAoB,SAAAnW,GAAK,OACvB,cAAC,IAAD,CACE4B,KAAM5B,EAAM4B,KACZC,QAAS7B,EAAM6B,QACfuU,0BAA2BpW,EAAMoW,0BACjCC,iBAAkBrW,EAAMqW,iBACxBC,+BAAgCtW,EAAMsW,kCAG1CC,6BACE/W,EAAQ,kBAAM,cAAC,IAAD,KAAkC,KAElDuT,+BAAgCA,IAChCjH,cAAeA,IACf2J,iBAAkBA,EAClBe,cAAelC,IACfmC,gBAAiB5B,IACjBc,6BAA8BA,EAC9BE,mBAAoBA,EACpBa,gBAAiB/f,IACjBggB,wBAAyBC,IACzBC,iBAAkBC,IAAqB,CACrCvd,KACA0U,qBAAsB8I,IACtB7I,wBAAyB8I,IACzB7I,gBAAiB3O,IAEnBoW,0BAA2BA,Y,oDChHzC,2CAEIxiB,EAAKd,IAAgB,YACrBe,EAAOf,IAAgB,QACvBD,EAAKC,IAAgB,MACnBiH,EAAuCC,EAAOD,GAQ9C0d,EAAkB,CACtBxP,MAAO,SAASpU,GACd,IACED,EAAG8jB,WAAW7jB,GACd,MAAOX,GAEP,OADAyL,QAAQ5H,MAAM,SAAWlD,EAAO,aAAeX,IACxC,EAET,OAAO,GAETykB,UAAW,SAAS9jB,GAClB,OAAOD,EAAGyC,WAAWxC,IAEvBqU,SAAU,SAASrU,GACjB,IACED,EAAGgkB,aAAa/jB,GAChB,MAAOX,GACPyL,QAAQ5H,MAAM,YAAclD,EAAO,aAAeX,KAGtDgM,WAAY,WACV,OAAOrL,EAAKuB,KAAKvC,EAAGkX,SAAb,gBAAgChX,iBAEzC8kB,aAAc,SAASC,GACrB,OAAIhW,KAAKiW,eAAeD,GAAkBA,GAE1CA,EAAWhW,KAAKkW,cAAcF,GACvBjkB,EAAKoC,SAAS6hB,KAEvBG,YAAa,SAASH,GACpB,OAAIhW,KAAKiW,eAAeD,GAAkB,IAE1CA,EAAWhW,KAAKkW,cAAcF,GACvBjkB,EAAKoB,QAAQ6iB,GAAUjhB,QAAQ,MAAO,OAE/CqhB,aAAc,SAASvjB,EAAUwjB,GAC/B,OAAIrW,KAAKiW,eAAepjB,GAAkBA,GAE1CA,EAAWmN,KAAKkW,cAAcrjB,GACzBmN,KAAKsW,WAAWD,KACnBA,EAAgBtkB,EAAK8P,QAAQwU,IAExBtkB,EACJ8P,QAAQwU,EAAetkB,EAAKwkB,UAAU1jB,IACtCkC,QAAQ,MAAO,OAEpByhB,aAAc,SAAS3jB,EAAUwjB,GAC/B,OAAIrW,KAAKiW,eAAepjB,GAAkBA,GAE1CA,EAAWmN,KAAKkW,cAAcrjB,GACvBd,EACJ+C,SAASuhB,EAAetkB,EAAKwkB,UAAU1jB,IACvCkC,QAAQ,MAAO,OAEpBuhB,WAAY,SAASN,GACnB,QAAIhW,KAAKiW,eAAeD,KAEA,IAApBA,EAAS9gB,UACb8gB,EAAWhW,KAAKkW,cAAcF,IAElB9gB,OAAS,GAA4B,MAAvB8gB,EAASS,OAAO,IACvCT,EAAS9gB,OAAS,GAA4B,MAAvB8gB,EAASS,OAAO,MAG5CC,SAAU,SAASrF,EAAQsF,GAEzB,GAAI3W,KAAKiW,eAAe5E,GAAS,OAAO,EAExCA,EAASrR,KAAKkW,cAAc7E,GAC5B,IACMA,IAAWsF,GAAM7kB,EAAG8kB,SAASvF,EAAQsF,GACzC,MAAOvlB,GAEP,OADAyL,QAAQ5H,MAAM,YAAcoc,EAAS,KAAOsF,EAAO,aAAevlB,IAC3D,EAET,OAAO,GAETylB,YAAa,SAASC,EAAMC,GAC1B,IACEjlB,EAAGklB,eAAeF,EAAMC,GACxB,MAAO3lB,GAEP,OADAyL,QAAQ5H,MAAM,eAAiB6hB,EAAO,kBAAoB1lB,IACnD,EAET,OAAO,GAET8e,SAAU,SAAS4G,GACjB,IAEE,OADehlB,EAAGmlB,aAAaH,GACfI,WAChB,MAAO9lB,GAEP,OADAyL,QAAQ5H,MAAM,YAAc6hB,EAAO,aAAe1lB,GAC3C,KAGX+lB,QAAS,SAASplB,EAAMqlB,GACtBA,EAAMA,EAAIC,cACV,IAAIC,EAAS,IAAIrf,EAAGsf,aACpB,IAEMzlB,EAAGyC,WAAWxC,IACRD,EAAG0lB,YAAYzlB,GACjBsH,SAAQ,SAASyd,GAEJ,IAAfM,EAAIliB,SAC2D,IAA/D4hB,EAAKO,cAAcnV,QAAQkV,EAAKN,EAAK5hB,OAASkiB,EAAIliB,SAElDoiB,EAAOG,UAAU1lB,EAAO,IAAM+kB,MAIpC,MAAO1lB,GACPyL,QAAQ5H,MAAM,WAAalD,EAAO,IAAMqlB,EAAM,aAAehmB,GAG/D,OAAOkmB,GAETI,WAAY,SAAS7kB,GACnBA,EAAWmN,KAAKkW,cAAcrjB,GAC9B,IAEE,OADaf,EAAG6lB,SAAS9kB,GACbyb,SACZ,MAAOld,GACP,OAAO,IAGX6kB,eAAgB,SAASpjB,GACvB,OACEA,EAASI,WAAW,YACpBJ,EAASI,WAAW,aACpBJ,EAASI,WAAW,WACpBJ,EAASI,WAAW,UACpBJ,EAASI,WAAW,UAOxBijB,cAAe,SAASrjB,GAKtB,MAH8B,OAA1BA,EAAS+kB,OAAO,EAAG,IAAyC,QAA1B/kB,EAAS+kB,OAAO,EAAG,KACvD/kB,EAAWA,EAAS+kB,OAAO,IAEtB/kB,IAII8iB,Q,mDC/Jf,gEAEM7jB,EAAKd,IAAgB,MACrB6mB,EAAsBC,YAAoB,YAMnCzR,EAAqB,SAAC,GAQV,IAPvBtU,EAOsB,EAPtBA,KACAuU,EAMsB,EANtBA,eACA8C,EAKsB,EALtBA,UAMM2O,EAAWF,IACjB,OAAO,IAAIlW,SAAQ,SAACE,EAASD,GAC3B,IAAK9P,IAAOimB,EAAU,OAAOnW,EAAO,IAAIxP,MAAM,yBAE9C,IAAMklB,EAASxlB,EAAGkmB,kBAAkB1R,GAC9B2R,EAAUF,EAAS,MAAO,CAC9BG,KAAM,CAAEC,MAAO,KAGjBb,EAAOxe,GAAG,SAAS,WACjB,IAAMsf,EAAWH,EAAQI,UAIzB,GAHAxb,QAAQyb,IAAR,6BACwBhS,EADxB,aAC2C8R,EAD3C,mBAGIhP,GAAagP,EAAWhP,EAAW,CACrC,IAAMmP,EAAoBC,KAAKC,MAAML,EAAQ,KAC7CxW,EACE,IAAIxP,MAAJ,6BACwBmmB,EADxB,oDACqFnP,EAAS,IAD9F,UAMJvH,EAAQyE,MAGV2R,EAAQnf,GAAG,SAAS,SAAAoD,GAClB0F,EAAO1F,MAGT+b,EAAQS,KAAKpB,GAEbW,EAAQU,UAAU5mB,GAAM,GAExBkmB,EAAQW,gB,+GCuECC,EAAU,SACrBjJ,EADqB,GAOF,IAJjBkJ,EAIgB,EAJhBA,6BACAC,EAGgB,EAHhBA,0BACAC,EAEgB,EAFhBA,gBA+CF,OApCsB,SAAhBC,EACJC,EACAC,GAEA,QAAwB/R,IAApB4R,GAAiCG,GAASH,EAC5C,OAAOrX,QAAQE,UAGjB,GAAsB,OAAlBqX,GAAmD,kBAAlBA,EAA4B,CAC/D,IAAME,EAAOC,OAAOD,KAAKF,GACzB,GAAIE,EACF,OAAOzX,QAAQsL,IACbmM,EAAK7jB,KAAI,SAAA+jB,GACP,IAAMC,EArBI,SAAC3J,GACnB,OAA6C,IAAzCA,EAAOkJ,GACFlJ,EAGF,KAgBmB4J,CAAYN,EAAcI,IAC5C,OAAIC,EACKR,EAA0BQ,EAAUE,aAAa9c,MACtD,SAAA+c,GAGE,OAFAR,EAAcI,GAAuBI,EAE9BT,EACLC,EAAcI,GACdH,EAAQ,MAMTF,EAAcC,EAAcI,GAAsBH,EAAQ,OAEnExc,MAAK,eAIX,OAAOgF,QAAQE,UAGVoX,CAAcrJ,EAAQ,IA2BlB+J,EAAqC,SAACC,GACjD,IAAMC,EAA4B,GAElC,OAAO,SAACjK,EAAgBkK,GACtB,IAAMC,EAAWnK,EAAOgK,GACxB,GAAwB,kBAAbG,EACT,MAAM,IAAI3nB,MAAJ,mBAAsBwnB,EAAtB,qBAGRC,EAA0BC,GACxBD,EAA0BC,IAAqB,GACjD,IAAME,EAAU3lB,YACd0a,IAAMgL,IACN,SAAA3lB,GAAI,QAAMylB,EAA0BC,GAAkB1lB,MAGxD,OADAylB,EAA0BC,GAAkBE,IAAW,EAChDA,ICxNLloB,EAAKd,IAAgB,MACrBe,EAAOf,IAAgB,QACvBmE,EAASnE,IAAgB,oBACzBoE,EAASD,EAASA,EAAOC,OAAS,KAElCib,EAAe,SAACV,GACpB,OAAK7d,EAEE,IAAI6P,SAAQ,SAACE,EAASD,GAC3B9P,EAAGoe,SAASP,EAAU,CAAEQ,SAAU,SAAU,SAACjU,EAAK/C,GAChD,GAAI+C,EAAK,OAAO0F,EAAO1F,GAEvB,IACE,IAAMkU,EAAa3W,KAAKzC,MAAMmC,GAC9B,OAAO0I,EAAQuO,GACf,MAAO/C,GACP,OAAOzL,EAAO+N,EAAW,0CAVfhO,QAAQC,OAAO,iCAgBpB+Q,EAAmB,WAC9B,IAAKvd,EAAQ,OAAOuM,QAAQC,OAAO,iBACnC,IAAMtL,EAAgBnB,EAAOoB,mBAE7B,OAAOnB,EACJoB,eAAeF,EAAe,CAC7BG,MAAO,iBACPP,WAAY,CAAC,YACbqM,QACE,kFACF5L,QAAS,CAAC,CAAEvC,KAAM,qBAAsBwC,WAAY,CAAC,YAEtD+F,MAAK,YAAoB,IAAjB7F,EAAgB,EAAhBA,UACP,OAAKA,GAAcA,EAAU5B,OACtB,CAAE9B,eAAgB0D,EAAU,IADS,SAKrC4b,EAAS,SACpBxgB,GAIA,IAAMqF,EAAWrF,EAAakB,eACxBF,EAAcnB,EAAKoB,QAAQoE,GACjC,OAAO8Y,EAAa9Y,GAAUoF,MAAK,SAAAiT,GACjC,OAAOiJ,EAAQjJ,EAAQ,CACrBmJ,0BAA2B,SAAAkB,GACzB,OAAO5J,EAAate,EAAKuB,KAAKJ,EAAa+mB,GAAiB,UAE9DnB,6BAA8B,8BAI9BE,gBAAiB,IAChBrc,MAAK,WACN,MAAO,CAAEwS,QAASS,UAKXsK,EAAc,SACzBhoB,EACAioB,GAEA,IAAM5iB,EAAWrF,EAAakB,eACxBgnB,EAAe7iB,EAAW,YAChC,GAAIzF,EAAGyC,WAAW6lB,GAAe,CAC/B,IAAKD,EACH,OAAOxY,QAAQE,SAAQ,GAEzB,IAGE,GAFsB/P,EAAG6lB,SAASyC,GAAcC,MAAMC,UACrCxoB,EAAG6lB,SAASpgB,GAAU8iB,MAAMC,UAE3C,OAAO3Y,QAAQE,SAAQ,GAEzB,MAAO3F,GAEP,OADAW,QAAQ5H,MAAM,0CAA2CiH,GAClDyF,QAAQE,SAAQ,GAEzB,OAAOF,QAAQE,SAAQ,GAEzB,OAAOF,QAAQE,SAAQ,IAGZ0Y,EAAgB,SAACroB,GAC5B,OAAOyP,QAAQE,QAAR,2BACF3P,GADE,IAELkB,eAAgBlB,EAAakB,eAAiB,gB,gCCnF5CtB,EAAKd,IAAgB,YACrBe,EAAOf,IAAgB,QACvBmE,EAASnE,IAAgB,oBACzBoE,EAASD,EAASA,EAAOC,OAAS,KAElColB,EAAmB,SAACjjB,EAAkBkjB,GAC1C,IAAM3a,EAAOe,YAAYC,MACzB,OAAO,IAAIa,SAAQ,SAACE,EAASD,GAC3B9P,EAAGoe,SAAS3Y,EAAU,CAAE4Y,SAAU,SAAU,SAACjU,EAAKiT,GAChD,GAAIjT,EAAK,OAAO0F,EAAO1F,GAEP,KAAZiT,GACFvN,EAAO,IAAIxP,MAAJ,+CAEL+c,IAAYsL,GACd7Y,EACE,IAAIxP,MAAJ,6EAKJ,IAAMsoB,EAAmB7Z,YAAYC,MAAQhB,EAC7CjD,QAAQC,KAAR,mBACcvF,EADd,uBACqCmjB,EAAiBC,UADtD,QAGA9Y,WAKO+Y,EAAiB,uCAAG,WAC/BzL,EACA5X,GAF+B,SAAAhG,EAAA,yDAI1BO,EAJ0B,sBAIhB,IAAIM,MAAM,gCAJM,UAKf,KAAZ+c,EAL2B,sBAMvB,IAAI/c,MAAM,mDANa,uBAQzBN,EAAG6C,UAAU5C,EAAKoB,QAAQoE,IARD,uBAUzBzF,EAAGsd,UAAU7X,EAAU4X,GAVE,wBAWzBqL,EAAiBjjB,EAAU4X,GAXF,4CAAH,wDAcxB0L,EAA8B,uCAAG,WACrCjL,EACArY,GAFqC,eAAAhG,EAAA,6DAI/B4d,EAAU1V,KAAKC,UAAUkW,EAAQ,KAAM,GAJR,SAK/BgL,EAAkBzL,EAAS5X,GALI,2CAAH,wDAQ9BujB,EAAoB,SACxB7oB,EACAsF,EACArE,GAEA,IFkHyB6nB,EElHnBC,EAA0BjL,YAAoB9d,GACpD,GAAIA,EAAQgpB,kBAAmB,CAC7B,IAAMC,EFlCW,SACnBtL,EADmB,GAQkB,IALnCuL,EAKkC,EALlCA,cACAC,EAIkC,EAJlCA,0BACAC,EAGkC,EAHlCA,YACAvC,EAEkC,EAFlCA,6BAGIoC,EAAiB,GACjBI,EAAkB,SAAC/B,EAAW3J,GAAuB,IAAD,EAMxD,OALAsL,EAAelmB,KAAK,CAClBukB,YACA3J,WAGK,EAAP,iBACGkJ,GAA+B,GADlC,4BAEeS,GAFf,GA8DF,OAxDoB,SAAdgC,EACJrC,EACAsC,EACA1B,GAEA,GAAsB,OAAlBZ,GAAmD,kBAAlBA,EACnC,GAAIuC,MAAMC,QAAQxC,GAChB,IAAK,IAAIyC,KAASzC,EAAe,CAC/B,IAAM0C,EAAWJ,EAAcL,EAAgB,IAC/C,GAAIE,EAAYO,GAAW,CACzB,IAAMlC,EAAgBR,EAAcyC,GAC9BvnB,EAAOgnB,EACX1B,EACAI,GAEI+B,EAAgB/B,EAAmBqB,EAAgB/mB,EAEzD8kB,EAAcyC,GAASL,EACrBO,EACAnC,GAGF6B,EAAY7B,EAAekC,EAAUC,OAChC,CACL,IAAMA,EAAgB/B,EAAmBqB,EAAgBQ,EAEzDJ,EAAYrC,EAAcyC,GAAQC,EAAUC,SAIhD,IAAK,IAAIjC,KAAgBV,EAAe,CACtC,IAAM4C,EAAeN,EAAcL,EAAgBvB,EAC7CmC,EACJjC,EAAmBqB,EAAgBvB,EACrC,GAAIyB,EAAYS,GAAe,CAC7B,IAAMpC,EAAgBR,EAAcU,GAEpCV,EAAcU,GAAgB0B,EAC5BS,EACArC,GAGF6B,EAAY7B,EAAeoC,EAAcC,QAEzCR,EACErC,EAAcU,GACdkC,EACAC,IAQZR,CAAY3L,EAAQ,GAAI,IACjBsL,EE5CkBc,CAAMhB,EAAyB,CACpDG,cAAe,IACfC,0BAA2BzB,EAAmC,QAC9D0B,aF6GqBN,EE5GnB,IAAIvnB,IAAI,CACN,aACA,qBACA,oBACA,aACA,iCFwGD,SAACzB,GAAD,OAAkBgpB,EAAMvmB,IAAIzC,KErG/B+mB,6BAA8B,gCAGhC,OAAOnX,QAAQsL,IACbiO,EAAe3lB,KAAI,SAAAmkB,GACjB,OAAOmB,EACLnB,EAAc9J,OACd7d,EAAKuB,KAAKJ,EAAawmB,EAAcH,WAAa,SAClD1b,OAAM,SAAA3B,GAEN,MADAW,QAAQ5H,MAAM,kCAAmCiH,GAC3CA,SAGVS,MAAK,WACL,OAAOke,EACLG,EACAzjB,GACAsG,OAAM,SAAA3B,GAEN,MADAW,QAAQ5H,MAAM,qCAAsCiH,GAC9CA,QAIV,OAAO2e,EACLG,EACAzjB,GACAsG,OAAM,SAAA3B,GAEN,MADAW,QAAQ5H,MAAM,+BAAgCiH,GACxCA,MAKCiN,EAAgB,SAC3BlX,EACAC,GAKA,IAAMqF,EAAWrF,EAAakB,eACxB0N,EAAMmb,KAAKnb,MACjB,IAAKvJ,EACH,OAAOoK,QAAQC,OACb,6DAGJ,IAAMiR,EAAe,2BAChB3gB,GADgB,IAEnBgqB,iBAAkBpb,IAGd5N,EAAcnB,EAAKoB,QAAQoE,GACjC,OAAOujB,EAAkB7oB,EAASsF,EAAUrE,GAAayJ,MAAK,WAC5D,MAAO,CAAEwf,UAAU,EAAMjqB,aAAc2gB,OAI9BuJ,EAA6B,uCAAG,WAC3CnqB,EACAC,GAF2C,qBAAAX,EAAA,yDAMrCsF,EAAc3E,EAAeA,EAAakB,eAAiB,GAC3DkD,EAAgBnB,EAAOoB,mBACvB8lB,EAAoB,CACxBxlB,cACAF,QAAS,CAAC,CAAEvC,KAAM,qBAAsBwC,WAAY,CAAC,WAGlDxB,EAbsC,sBAcnC,IAAIhD,MAAM,eAdyB,UAgBrCmF,EAAWnC,EAAOknB,mBAAmBhmB,EAAe+lB,GAhBf,yCAkBlC,CAAEnqB,aAAc,OAlBkB,gCAqBpC,CACLA,aAAc,CACZkB,eAAgBmE,KAvBuB,2CAAH,wDA4B7B4S,EAAe,uCAAG,WAC7BlY,EACAC,EACA+D,GAH6B,iBAAA1E,EAAA,yDAUxBW,EAVwB,sBAWrB,IAAIE,MAAM,+CAXW,cAazB6D,GAAWA,EAAQsmB,eAAetmB,EAAQsmB,gBAbjB,SAcvBtmB,EAAQumB,kBAde,cAgBvBjlB,EAAWrF,EAAakB,eACxBF,EAAcnB,EAAKoB,QAAQoE,GACjCtF,EAAQgf,eAAe1Z,GAlBM,UAoBvBujB,EAAkB7oB,EAASsF,EAAUrE,GApBd,iCAqBtB,CACLipB,UAAU,IAtBiB,4CAAH,0DA0BfM,EAAoB,SAC/BxqB,EACAC,GAEA,IAAMkoB,EAAeloB,EAAakB,eAAiB,YACnD,OAAOwnB,EAAkB8B,YAAgBzqB,GAAUmoB,GAAcvc,OAC/D,SAAA3B,GAEE,MADAW,QAAQ5H,MAAR,0BAAiCmlB,EAAjC,KAAkDle,GAC5CA,MAKCygB,EAAuB,SAAC1nB,GAAD,OAClC,iG,wBC9MayL,MAAMkc,MAAK,SAAAle,GAAK,OAC7B,cAACme,EAAA,EAAD,2BAAane,GAAb,IAAoBoe,QAAQ,YAAY3V,MAAO,CAAE4V,KAAM,QAAvD,SACE,sBACEC,EAAE,0QACFC,OAAO,eACPC,YAAY,MACZC,cAAc,QACdC,eAAe,gBCkBL,KACdjL,aAAc,YACd/d,KAAM,qBACNie,WAAY,SAAA3T,GAAK,OAAI,cAAC2e,EAAD,CAAU/K,SAAU5T,EAAM6T,QAC/C+K,gCAAiC,SAACzJ,GAChC,OAAKA,EAAa0J,MACb1J,EAAa0J,KAA0BroB,OAErC,CACL9B,eAAgBygB,EAAa0J,KAA0B,IAJL,MAOtD/K,iBAAkB,iBAAO,CACvBG,mBACAD,SACAwH,cACA/Q,gBACAiT,gCACAjS,kBACAsS,oBACAlC,gBACAiD,oBAAqB,SAACvoB,GACpB,MAAM,CAAC,yIAET0nB,2B,iCCnDJ,8CACM/qB,EADN,MACiBZ,GAAgB,YAC3Ba,EAAcD,EAAWA,EAASC,YAAc,KAOzCyW,EAAkB,SAC7B0I,EACA3I,EACAlW,GAEA,OAAKN,GAELA,EAAYgH,mBAAmB,8BAC/BhH,EAAYgH,mBAAmB,0BAExB,IAAI8I,SAAQ,SAACE,EAASD,GAC3B/P,EAAYiH,GACV,8BACA,SAACC,EAAO0kB,EAAqBC,GAC3BvrB,EAAWsrB,EAAqBC,MAGpC7rB,EAAYiH,GAAG,0BAA0B,SAACC,EAAOmD,GAC/C,GAAIA,EAAK,OAAO0F,EAAO1F,GACvB2F,OAEFhQ,EAAY8H,KAAK,oBAAqBqX,EAAe3I,OAhB9B1G,QAAQC,OAAO","file":"static/js/local-app.25d8a555.chunk.js","sourcesContent":["// @flow\nimport optionalRequire from './OptionalRequire';\nconst os = optionalRequire('os');\n\nexport const getUID = () => {\n  try {\n    return os.userInfo().uid;\n  } catch (e) {\n    return '';\n  }\n};\n","//@flow\ntype Configuration = {| times: number |};\n\nexport const retryIfFailed = async <T>(\n  { times }: Configuration,\n  fn: () => Promise<T>\n): Promise<T> => {\n  let tries = 0;\n  let latestError = null;\n  while (tries < times) {\n    tries++;\n    latestError = null;\n    try {\n      const latestReturnValue = await fn();\n      return latestReturnValue;\n    } catch (error) {\n      latestError = error;\n    }\n  }\n\n  throw latestError;\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport PromisePool from '@supercharge/promise-pool';\nimport { retryIfFailed } from '../../Utils/RetryIfFailed';\nimport newNameGenerator from '../../Utils/NewNameGenerator';\nimport { type FileMetadata } from '../index';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\n\nconst isFetchableUrl = (filename: string) => {\n  return (\n    filename.startsWith('http://') ||\n    filename.startsWith('https://') ||\n    filename.startsWith('ftp://')\n  );\n};\n\ntype Options = {|\n  project: gdProject,\n  fileMetadata: FileMetadata,\n  onProgress: (number, number) => void,\n|};\n\nexport const moveUrlResourcesToLocalFiles = async ({\n  project,\n  fileMetadata,\n  onProgress,\n}: Options) => {\n  if (!fs || !ipcRenderer) throw new Error('Unsupported');\n\n  // Get all resources to download.\n  const resourcesManager = project.getResourcesManager();\n  const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n  const resourceToFetchNames = allResourceNames.filter(resourceName => {\n    const resource = resourcesManager.getResource(resourceName);\n\n    return isFetchableUrl(resource.getFile());\n  });\n\n  const projectPath = path.dirname(fileMetadata.fileIdentifier);\n  const baseAssetsPath = path.join(projectPath, 'assets');\n  const downloadedFilePaths = new Set<string>();\n  const erroredResources = [];\n\n  let fetchedResourcesCount = 0;\n\n  await PromisePool.withConcurrency(50)\n    .for(resourceToFetchNames)\n    .process(async resourceName => {\n      const resource = resourcesManager.getResource(resourceName);\n\n      const url = resource.getFile();\n      const extension = path.extname(url);\n      const filenameWithoutExtension = path.basename(url, extension);\n      const name = newNameGenerator(filenameWithoutExtension, name => {\n        const tentativePath = path.join(baseAssetsPath, name) + extension;\n        return (\n          fs.existsSync(tentativePath) || downloadedFilePaths.has(tentativePath)\n        );\n      });\n      const newPath = path.join(baseAssetsPath, name) + extension;\n      downloadedFilePaths.add(newPath);\n\n      try {\n        await retryIfFailed({ times: 2 }, async () => {\n          await fs.ensureDir(baseAssetsPath);\n          await ipcRenderer.invoke('local-file-download', url, newPath);\n          resource.setFile(\n            path.relative(projectPath, newPath).replace(/\\\\/g, '/')\n          );\n        });\n      } catch (error) {\n        erroredResources.push({ resourceName, error });\n      }\n\n      onProgress(fetchedResourcesCount++, resourceToFetchNames.length);\n    });\n\n  return {\n    erroredResources,\n  };\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport {\n  type ResourceSource,\n  allResourceKindsAndMetadata,\n} from './ResourceSource';\nimport { isPathInProjectFolder, copyAllToProjectFolder } from './ResourceUtils';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport Window from '../Utils/Window';\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\nconst path = optionalRequire('path');\n\nconst localResourceSources: Array<ResourceSource> = [\n  ...allResourceKindsAndMetadata.map(\n    ({ kind, displayName, fileExtensions, createNewResource }) => ({\n      name: 'local-file-opener-' + kind,\n      displayName: t`Choose a file`,\n      displayTab: 'import',\n      kind,\n      selectResourcesHeadless: async ({\n        i18n,\n        getLastUsedPath,\n        setLastUsedPath,\n        project,\n        options,\n      }) => {\n        if (!dialog)\n          throw new Error('Electron dialog not supported in this environment.');\n\n        const properties = ['openFile'];\n        if (options.multiSelection) properties.push('multiSelections');\n\n        const projectPath = path.dirname(project.getProjectFile());\n        const latestPath = getLastUsedPath(project, kind) || projectPath;\n\n        const browserWindow = remote.getCurrentWindow();\n        let { filePaths } = await dialog.showOpenDialog(browserWindow, {\n          title: i18n._(t`Choose a file`),\n          properties,\n          filters: [\n            { name: i18n._(t`Supported files`), extensions: fileExtensions },\n          ],\n          defaultPath: latestPath,\n        });\n        if (!filePaths || !filePaths.length) return [];\n\n        const lastUsedPath = path.parse(filePaths[0]).dir;\n        setLastUsedPath(project, kind, lastUsedPath);\n\n        const outsideProjectFolderPaths = filePaths.filter(\n          path => !isPathInProjectFolder(project, path)\n        );\n\n        if (outsideProjectFolderPaths.length) {\n          const answer = Window.showConfirmDialog(\n            i18n._(\n              t`This/these file(s) are outside the project folder. Would you like to make a copy of them in your project folder first (recommended)?`\n            )\n          );\n\n          if (answer) {\n            filePaths = await copyAllToProjectFolder(project, filePaths);\n          }\n        }\n\n        return filePaths.map(filePath => {\n          const newResource = createNewResource();\n          const projectPath = path.dirname(project.getProjectFile());\n          newResource.setFile(path.relative(projectPath, filePath));\n          newResource.setName(path.relative(projectPath, filePath));\n\n          return newResource;\n        });\n      },\n      renderComponent: () => null,\n    })\n  ),\n];\n\nexport default localResourceSources;\n","// @flow\nimport { openPiskel } from './LocalPiskelBridge';\nimport { openJfxr } from './LocalJfxrBridge';\nimport { openYarn } from './LocalYarnBridge';\nimport { type ResourceExternalEditor } from './ResourceExternalEditor.flow';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\n\n/**\n * This is the list of editors that can be used to edit resources\n * on Electron runtime.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    displayName: 'Edit with Piskel',\n    kind: 'image',\n    edit: options => {\n      sendExternalEditorOpened('piskel');\n      return openPiskel(options);\n    },\n  },\n  {\n    name: 'Jfxr',\n    displayName: 'Create/Edit a Sound effect with Jfxr (*.wav)',\n    kind: 'audio',\n    edit: options => {\n      sendExternalEditorOpened('jfxr');\n      return openJfxr(options);\n    },\n  },\n  {\n    name: 'Yarn',\n    displayName: 'Create/Edit a Dialogue Tree with Yarn (*.json)',\n    kind: 'json',\n    edit: options => {\n      sendExternalEditorOpened('yarn');\n      return openYarn(options);\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open Piskel editor for the specified resources.\n * Take a list of resource names to be edited and will call the callback methods\n * (notably onChangesSaved with the name of the edited resources)\n */\nexport const openPiskel = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  singleFrame,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n\n  const resources = resourceNames.map((resourceName, originalIndex) => {\n    let resourcePath = getLocalResourceFullPath(project, resourceName);\n    return {\n      resourcePath,\n      resourceName,\n      originalIndex,\n    };\n  });\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const externalEditorData = {\n    ...extraOptions,\n    resources,\n    singleFrame,\n    projectPath,\n  };\n\n  // Listen to events meaning that edition in Piskel is finished\n  ipcRenderer.removeAllListeners('piskel-changes-saved');\n  ipcRenderer.on(\n    'piskel-changes-saved',\n    (event, outputResources, newAnimationName, externalEditorData) => {\n      const metadata = externalEditorData.data\n        ? { pskl: externalEditorData }\n        : null;\n\n      const resourcesManager = project.getResourcesManager();\n      outputResources.forEach(resource => {\n        resource.name = path.relative(projectPath, resource.path); // Still needed for onChangesSaved()\n        createOrUpdateResource(project, new gd.ImageResource(), resource.name);\n      });\n\n      outputResources[0].metadata = metadata;\n      outputResources[0].newAnimationName = newAnimationName;\n      // in case this is for a single frame object, save the metadata in the Image object\n      if (externalEditorData.singleFrame) {\n        if (metadata) {\n          resourcesManager\n            .getResource(path.relative(projectPath, outputResources[0].path))\n            .setMetadata(JSON.stringify(metadata));\n        }\n        onChangesSaved(outputResources);\n      } else {\n        // In case there are multiple frames, pass back the metadata to the editor and let it store it at an appropriate place.\n        // (For example, for sprites, SpritesList.js will save it in the metadata of the gd.Direction).\n\n        onChangesSaved(outputResources);\n      }\n    }\n  );\n\n  // Issue the event to open piskel\n  ipcRenderer.send('piskel-open-then-load-animation', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open JFXR to create wav resources.\n */\nexport const openJfxr = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('jfxr-changes-saved');\n  ipcRenderer.on(\n    'jfxr-changes-saved',\n    (event, newFilePath, externalEditorData) => {\n      const name = path.relative(projectPath, newFilePath);\n      createOrUpdateResource(project, new gd.AudioResource(), name);\n\n      const metadata = {\n        jfxr: externalEditorData,\n      };\n      project\n        .getResourcesManager()\n        .getResource(name)\n        .setMetadata(JSON.stringify(metadata));\n      onChangesSaved([{ metadata, name }]);\n    }\n  );\n\n  ipcRenderer.send('jfxr-create-wav', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open YARN to Create/Edit Json Dialogue Tree resources.\n */\nexport const openYarn = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('yarn-changes-saved');\n  ipcRenderer.on('yarn-changes-saved', (event, newFilePath) => {\n    const name = path.relative(projectPath, newFilePath);\n    createOrUpdateResource(project, new gd.JsonResource(), name);\n    onChangesSaved([{ name }]);\n  });\n\n  ipcRenderer.send('yarn-create-json', externalEditorData);\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport localFileSystem from '../LocalFileSystem';\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport { timeFunction } from '../../../Utils/TimeFunction';\nimport { findGDJS } from '../../../GameEngineFinder/LocalGDJSFinder';\nimport LocalNetworkPreviewDialog from './LocalNetworkPreviewDialog';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport SubscriptionChecker from '../../../Profile/SubscriptionChecker';\nimport {\n  getDebuggerServerAddress,\n  localPreviewDebuggerServer,\n} from './LocalPreviewDebuggerServer';\nimport Window from '../../../Utils/Window';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n  onChangeSubscription?: () => void,\n|};\n\ntype State = {|\n  networkPreviewDialogOpen: boolean,\n  networkPreviewHost: ?string,\n  networkPreviewPort: ?number,\n  networkPreviewError: ?any,\n  hotReloadsCount: number,\n  previewGamePath: ?string,\n  previewBrowserWindowOptions: ?{\n    width: number,\n    height: number,\n    useContentSize: boolean,\n    title: string,\n    backgroundColor: string,\n  },\n  hideMenuBar: boolean,\n  alwaysOnTop: boolean,\n|};\n\nexport default class LocalPreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => true;\n  canDoHotReload = () => true;\n\n  state = {\n    networkPreviewDialogOpen: false,\n    networkPreviewHost: null,\n    networkPreviewPort: null,\n    networkPreviewError: null,\n    previewGamePath: null,\n    previewBrowserWindowOptions: null,\n    hotReloadsCount: 0,\n    hideMenuBar: true,\n    alwaysOnTop: true,\n  };\n  _networkPreviewSubscriptionChecker: ?SubscriptionChecker = null;\n  _hotReloadSubscriptionChecker: ?SubscriptionChecker = null;\n\n  _openPreviewBrowserWindow = () => {\n    const { previewGamePath, previewBrowserWindowOptions } = this.state;\n    if (!previewBrowserWindowOptions || !previewGamePath) return;\n\n    if (!ipcRenderer) return;\n\n    ipcRenderer.invoke('preview-open', {\n      previewBrowserWindowOptions,\n      previewGameIndexHtmlPath: `file://${previewGamePath}/index.html`,\n      alwaysOnTop: this.state.alwaysOnTop,\n      hideMenuBar: this.state.hideMenuBar,\n    });\n  };\n\n  _openPreviewWindow = (\n    project: gdProject,\n    gamePath: string,\n    options: PreviewOptions\n  ): void => {\n    this.setState(\n      {\n        previewBrowserWindowOptions: {\n          width: project.getGameResolutionWidth(),\n          height: project.getGameResolutionHeight(),\n          useContentSize: true,\n          title: `Preview of ${project.getName()}`,\n          backgroundColor: '#000000',\n          webPreferences: {\n            webSecurity: false, // Allow to access to local files,\n            // Allow Node.js API access in renderer process, as long\n            // as we've not removed dependency on it and on \"@electron/remote\".\n            nodeIntegration: true,\n            contextIsolation: false,\n          },\n        },\n        previewGamePath: gamePath,\n        hideMenuBar: !options.getIsMenuBarHiddenInPreview(),\n        alwaysOnTop: options.getIsAlwaysOnTopInPreview(),\n      },\n      () => {\n        if (!options.networkPreview) {\n          this._openPreviewBrowserWindow();\n        } else {\n          if (!ipcRenderer) return;\n\n          ipcRenderer.removeAllListeners('serve-folder-done');\n          ipcRenderer.removeAllListeners('local-network-ips');\n          ipcRenderer.on('serve-folder-done', (event, err, serverParams) => {\n            if (err) {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: null,\n                networkPreviewHost: null,\n                networkPreviewError: err,\n              });\n            } else {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: serverParams.port,\n              });\n            }\n\n            setTimeout(() => this._checkSubscriptionForNetworkPreview());\n          });\n          ipcRenderer.on('local-network-ip', (event, ipAddress) => {\n            this.setState({\n              networkPreviewHost: ipAddress,\n            });\n          });\n          ipcRenderer.send('serve-folder', {\n            root: gamePath,\n          });\n          ipcRenderer.send('get-local-network-ip');\n        }\n      }\n    );\n  };\n\n  _prepareExporter = (): Promise<{|\n    outputDir: string,\n    exporter: gdjsExporter,\n    gdjsRoot: string,\n  |}> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const outputDir = path.join(fileSystem.getTempDir(), 'preview');\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        outputDir,\n        exporter,\n        gdjsRoot,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n\n    // Start the debugger server for previews. Even if not used,\n    // useful if the user opens the Debugger editor later, or want to\n    // hot reload.\n    return this.getPreviewDebuggerServer()\n      .startServer()\n      .catch(err => {\n        // Ignore any error when running the debugger server - the preview\n        // can still work without it.\n        console.error(\n          'Unable to start the Debugger Server for the preview:',\n          err\n        );\n      })\n      .then(() => this._prepareExporter())\n      .then(({ outputDir, exporter, gdjsRoot }) => {\n        timeFunction(\n          () => {\n            const previewExportOptions = new gd.PreviewExportOptions(\n              project,\n              outputDir\n            );\n            previewExportOptions.setIsDevelopmentEnvironment(Window.isDev());\n            previewExportOptions.setLayoutName(layout.getName());\n            if (externalLayout) {\n              previewExportOptions.setExternalLayoutName(\n                externalLayout.getName()\n              );\n            }\n\n            const previewDebuggerServerAddress = getDebuggerServerAddress();\n            if (previewDebuggerServerAddress) {\n              previewExportOptions.useWebsocketDebuggerClientWithServerAddress(\n                previewDebuggerServerAddress.address,\n                '' + previewDebuggerServerAddress.port\n              );\n            }\n\n            const includeFileHashs = this.props.getIncludeFileHashs();\n            for (const includeFile in includeFileHashs) {\n              const hash = includeFileHashs[includeFile];\n              previewExportOptions.setIncludeFileHash(includeFile, hash);\n            }\n\n            // Give the preview the path to the \"@electron/remote\" module of the editor,\n            // as this is required by some features and we've not removed dependency\n            // on \"@electron/remote\" yet.\n            previewExportOptions.setElectronRemoteRequirePath(\n              path.join(\n                gdjsRoot,\n                '../preview_node_modules',\n                '@electron/remote',\n                'renderer/index.js'\n              )\n            );\n\n            const debuggerIds = this.getPreviewDebuggerServer().getExistingDebuggerIds();\n            const shouldHotReload =\n              previewOptions.hotReload && !!debuggerIds.length;\n\n            previewExportOptions.setProjectDataOnlyExport(\n              // Only export project data if asked and if a hot-reloading is being done.\n              shouldHotReload && previewOptions.projectDataOnlyExport\n            );\n\n            previewExportOptions.setFullLoadingScreen(\n              previewOptions.fullLoadingScreen\n            );\n\n            exporter.exportProjectForPixiPreview(previewExportOptions);\n            previewExportOptions.delete();\n            exporter.delete();\n\n            if (shouldHotReload) {\n              debuggerIds.forEach(debuggerId => {\n                this.getPreviewDebuggerServer().sendMessage(debuggerId, {\n                  command: 'hotReload',\n                });\n              });\n\n              if (\n                this.state.hotReloadsCount % 16 === 0 &&\n                this._hotReloadSubscriptionChecker\n              ) {\n                this._hotReloadSubscriptionChecker.checkHasSubscription();\n              }\n              this.setState(state => ({\n                hotReloadsCount: state.hotReloadsCount + 1,\n              }));\n            } else {\n              this._openPreviewWindow(project, outputDir, previewOptions);\n            }\n          },\n          time => console.info(`Preview took ${time}ms`)\n        );\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    return localPreviewDebuggerServer;\n  }\n\n  _checkSubscriptionForNetworkPreview = () => {\n    if (!this._networkPreviewSubscriptionChecker) return true;\n\n    return this._networkPreviewSubscriptionChecker.checkHasSubscription();\n  };\n\n  render() {\n    const {\n      networkPreviewDialogOpen,\n      networkPreviewHost,\n      networkPreviewPort,\n      networkPreviewError,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._networkPreviewSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() => {\n            this.setState({ networkPreviewDialogOpen: false });\n            if (this.props.onChangeSubscription)\n              this.props.onChangeSubscription();\n          }}\n          id=\"Preview over wifi\"\n          title={<Trans>Preview over wifi</Trans>}\n          mode=\"try\"\n        />\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._hotReloadSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() => {\n            if (this.props.onChangeSubscription)\n              this.props.onChangeSubscription();\n          }}\n          id=\"Hot reloading\"\n          title={\n            <Trans>Live preview (apply changes to the running preview)</Trans>\n          }\n          mode=\"try\"\n        />\n        <LocalNetworkPreviewDialog\n          open={networkPreviewDialogOpen}\n          url={\n            networkPreviewHost && networkPreviewPort\n              ? `${networkPreviewHost}:${networkPreviewPort}`\n              : null\n          }\n          error={networkPreviewError}\n          onClose={() => this.setState({ networkPreviewDialogOpen: false })}\n          onExport={this.props.onExport}\n          onRunPreviewLocally={this._openPreviewBrowserWindow}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","// @flow\n\nexport const timeFunction = (fn: Function, onResult: number => void) => {\n  var t0 = performance.now();\n  fn();\n  var t1 = performance.now();\n  onResult(t1 - t0);\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport TextField from '../../../UI/TextField';\nimport Text from '../../../UI/Text';\nimport { Line } from '../../../UI/Grid';\nimport PlaceholderLoader from '../../../UI/PlaceholderLoader';\n\ntype Props = {|\n  open: boolean,\n  url: ?string,\n  onClose: () => void,\n  onExport: ?() => void,\n  onRunPreviewLocally: () => void,\n  error: ?any,\n|};\n\nexport default class LocalNetworkDialog extends React.Component<Props, {}> {\n  render() {\n    const {\n      url,\n      open,\n      error,\n      onExport,\n      onClose,\n      onRunPreviewLocally,\n    } = this.props;\n    if (!open) return null;\n\n    return (\n      <Dialog\n        actions={[\n          <FlatButton\n            key=\"close\"\n            label={<Trans>Close</Trans>}\n            primary\n            onClick={onClose}\n          />,\n        ]}\n        secondaryActions={[\n          onExport && (\n            <FlatButton\n              key=\"export\"\n              label={<Trans>Export game</Trans>}\n              onClick={onExport}\n            />\n          ),\n          <FlatButton\n            key=\"run-preview-locally\"\n            label={<Trans>Run on this computer</Trans>}\n            onClick={onRunPreviewLocally}\n          />,\n        ]}\n        open={open}\n        onRequestClose={onClose}\n      >\n        {error && (\n          <Line>\n            <Text>\n              <Trans>\n                Unable to start the server for the preview! Make sure that you\n                are authorized to run servers on this computer. Otherwise, use\n                classic preview to test your game.\n              </Trans>\n            </Text>\n          </Line>\n        )}\n        {!error && !url && <PlaceholderLoader />}\n        {!error && url && (\n          <div>\n            <Line>\n              <Text>\n                <Trans>\n                  Your preview is ready! On your mobile or tablet, open your\n                  browser and enter in the address bar:\n                </Trans>\n              </Text>\n            </Line>\n            <TextField value={url} fullWidth />\n            <Line>\n              <Text>\n                <Trans>\n                  Please note that your device should be connected on the same\n                  network as this computer.\n                </Trans>\n              </Text>\n            </Line>\n          </div>\n        )}\n      </Dialog>\n    );\n  }\n}\n","// @flow\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport {\n  type PreviewDebuggerServerCallbacks,\n  type PreviewDebuggerServer,\n  type DebuggerId,\n  type ServerAddress,\n} from '../../PreviewLauncher.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\nlet debuggerServerState: 'started' | 'stopped' = 'stopped';\nlet debuggerServerAddress: ?ServerAddress = null;\nconst callbacksList: Array<PreviewDebuggerServerCallbacks> = [];\nconst debuggerIds: Array<DebuggerId> = [];\n\nconst removeServerListeners = () => {\n  if (!ipcRenderer) return;\n\n  ipcRenderer.removeAllListeners('debugger-send-message-done');\n  ipcRenderer.removeAllListeners('debugger-error-received');\n  ipcRenderer.removeAllListeners('debugger-connection-closed');\n  ipcRenderer.removeAllListeners('debugger-connection-opened');\n  ipcRenderer.removeAllListeners('debugger-start-server-done');\n  ipcRenderer.removeAllListeners('debugger-message-received');\n};\n\n/**\n * A debugger server implemented using Electron (this one is just a bridge to it,\n * communicating through events with it).\n */\nexport const localPreviewDebuggerServer: PreviewDebuggerServer = {\n  startServer: () => {\n    if (!ipcRenderer) return Promise.reject();\n    if (debuggerServerState === 'started') return Promise.resolve();\n\n    const serverStartPromise = new Promise((resolve, reject) => {\n      let serverStartPromiseCompleted = false;\n      debuggerServerState = 'stopped';\n      debuggerServerAddress = null;\n      removeServerListeners();\n\n      ipcRenderer.on('debugger-error-received', (event, err) => {\n        if (!serverStartPromiseCompleted) {\n          reject(err);\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onErrorReceived }) => onErrorReceived(err));\n      });\n\n      ipcRenderer.on('debugger-connection-closed', (event, { id }) => {\n        const debuggerIdIndex = debuggerIds.indexOf(id);\n        if (debuggerIdIndex !== -1) debuggerIds.splice(debuggerIdIndex, 1);\n\n        callbacksList.forEach(({ onConnectionClosed }) =>\n          onConnectionClosed({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-connection-opened', (event, { id }) => {\n        debuggerIds.push(id);\n        callbacksList.forEach(({ onConnectionOpened }) =>\n          onConnectionOpened({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-start-server-done', (event, { address }) => {\n        console.info('Local preview debugger started');\n        debuggerServerState = 'started';\n        debuggerServerAddress = address;\n        if (!serverStartPromiseCompleted) {\n          resolve();\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onServerStateChanged }) =>\n          onServerStateChanged()\n        );\n      });\n\n      ipcRenderer.on('debugger-message-received', (event, { id, message }) => {\n        console.info('Processing message received for debugger');\n        try {\n          const parsedMessage = JSON.parse(message);\n          callbacksList.forEach(({ onHandleParsedMessage }) =>\n            onHandleParsedMessage({ id, parsedMessage })\n          );\n        } catch (e) {\n          console.warn(\n            'Error while parsing message received from debugger client:',\n            e\n          );\n        }\n      });\n      ipcRenderer.send('debugger-start-server');\n    });\n\n    // Consider the start of the server as a failure if not completed/errored\n    // after 5s.\n    const serverStartTimeoutPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject(\n          new Error(\n            'Debugger server not started or errored after 5s - aborting.'\n          )\n        );\n      }, 5000);\n    });\n    return Promise.race([serverStartPromise, serverStartTimeoutPromise]);\n  },\n  sendMessage: (id: DebuggerId, message: Object) => {\n    if (!ipcRenderer) return;\n    if (debuggerServerState === 'stopped') {\n      console.error('Cannot send message when debugger server is stopped.');\n      return;\n    }\n\n    ipcRenderer.send('debugger-send-message', {\n      id,\n      message: JSON.stringify(message),\n    });\n  },\n  getServerState: () => debuggerServerState,\n  getExistingDebuggerIds: () => debuggerIds,\n  registerCallbacks: (callbacks: PreviewDebuggerServerCallbacks) => {\n    callbacksList.push(callbacks);\n\n    return () => {\n      const callbacksIndex = callbacksList.indexOf(callbacks);\n      if (callbacksIndex !== -1) callbacksList.splice(callbacksIndex, 1);\n    };\n  },\n};\n\nexport const getDebuggerServerAddress = (): ?ServerAddress =>\n  debuggerServerAddress;\n","// @flow\nimport { type Exporter } from '../ExportDialog';\nimport { localCordovaExportPipeline } from './LocalCordovaExport';\nimport { localElectronExportPipeline } from './LocalElectronExport';\nimport { localHTML5ExportPipeline } from './LocalHTML5Export';\nimport { localFacebookInstantGamesExportPipeline } from './LocalFacebookInstantGamesExport';\nimport { localOnlineCordovaExportPipeline } from './LocalOnlineCordovaExport';\nimport { localOnlineElectronExportPipeline } from './LocalOnlineElectronExport';\nimport { localOnlineWebExportPipeline } from './LocalOnlineWebExport';\nimport { cordovaExporter } from '../GenericExporters/CordovaExport';\nimport { onlineWebExporter } from '../GenericExporters/OnlineWebExport';\nimport { html5Exporter } from '../GenericExporters/HTML5Export';\nimport { facebookInstantGamesExporter } from '../GenericExporters/FacebookInstantGamesExport';\nimport { onlineCordovaExporter } from '../GenericExporters/OnlineCordovaExport';\nimport { onlineElectronExporter } from '../GenericExporters/OnlineElectronExport';\nimport { electronExporter } from '../GenericExporters/ElectronExport';\n\nexport const localOnlineWebExporter: Exporter = {\n  ...onlineWebExporter,\n  exportPipeline: localOnlineWebExportPipeline,\n};\n\nexport const localAutomatedExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: localHTML5ExportPipeline,\n  },\n  {\n    ...onlineCordovaExporter,\n    exportPipeline: localOnlineCordovaExportPipeline,\n  },\n  {\n    ...onlineElectronExporter,\n    exportPipeline: localOnlineElectronExportPipeline,\n  },\n  {\n    ...facebookInstantGamesExporter,\n    exportPipeline: localFacebookInstantGamesExportPipeline,\n  },\n];\n\nexport const localManualExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: localHTML5ExportPipeline,\n  },\n  {\n    ...cordovaExporter,\n    exportPipeline: localCordovaExportPipeline,\n  },\n  {\n    ...electronExporter,\n    exportPipeline: localElectronExportPipeline,\n  },\n];\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/CordovaExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-cordova',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/ElectronExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-electron',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { ExplanationHeader, DoneFooter } from '../GenericExporters/HTML5Export';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-html5',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Export as a HTML5 game</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            fullWidth\n            primary\n            onClick={() => openExportFolder()}\n            label={<Trans>Open the exported game folder</Trans>}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport LocalFilePicker from '../../UI/LocalFilePicker';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/FacebookInstantGamesExport';\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst app = remote ? remote.app : null;\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  archiveOutputFilename: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-facebook-instant-games',\n\n  getInitialExportState: (project: gdProject) => ({\n    archiveOutputFilename: app\n      ? path.join(app.getPath('documents'), 'fb-instant-game.zip')\n      : '',\n  }),\n\n  canLaunchBuild: exportState => !!exportState.archiveOutputFilename,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFilePicker\n          title={'Facebook Instant Games export zip file'}\n          message={\n            'Choose where to save the exported file for Facebook Instant Games'\n          }\n          filters={[\n            {\n              name: 'Compressed file for Facebook Instant Games',\n              extensions: ['zip'],\n            },\n          ]}\n          value={exportState.archiveOutputFilename}\n          defaultPath={app ? app.getPath('documents') : ''}\n          onChange={value =>\n            updateExportState(() => ({ archiveOutputFilename: value }))\n          }\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'FacebookInstantGamesExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForFacebookInstantGames', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: context.exportState.archiveOutputFilename,\n    });\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell && path)\n        shell.openPath(path.dirname(exportState.archiveOutputFilename));\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\n\nimport React, { PureComponent } from 'react';\nimport TextField from '../TextField';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport RaisedButton from '../RaisedButton';\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  value: string,\n  onChange: string => void,\n  title: string,\n  message: string,\n  defaultPath?: string,\n  fullWidth?: boolean,\n  filters: Array<{\n    name: string,\n    extensions: Array<string>,\n  }>,\n|};\n\nexport default class LocalFilePicker extends PureComponent<Props, *> {\n  onChooseFolder = () => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = remote.getCurrentWindow();\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: this.props.title,\n        filters: this.props.filters,\n        message: this.props.message,\n        defaultPath: this.props.defaultPath,\n      })\n      .then(({ filePath }) => {\n        this.props.onChange(filePath || '');\n      });\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          ...styles.container,\n          width: this.props.fullWidth ? '100%' : undefined,\n        }}\n      >\n        <TextField\n          margin=\"dense\"\n          style={styles.textField}\n          type=\"text\"\n          translatableHintText={t`Choose a file`}\n          value={this.props.value}\n          onChange={(event, value) => this.props.onChange(value)}\n        />\n        <RaisedButton\n          label={<Trans>Choose</Trans>}\n          style={styles.button}\n          onClick={this.onChooseFolder}\n        />\n      </div>\n    );\n  }\n}\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineCordovaExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-cordova',\n  onlineBuildType: 'cordova-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => ({\n    targets: ['androidApk'],\n    keystore: 'new',\n    signingDialogOpen: false,\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '',\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Packaging for Android</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineCordovaExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      exportState.keystore,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineElectronExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-electron',\n  onlineBuildType: 'electron-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    !!exportState.targets.length && (errored || exportStep === ''),\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineElectronExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  OnlineGameLink,\n} from '../GenericExporters/OnlineWebExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-web',\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  // Build can be launched if just opened the dialog or build errored, re-enabled when done.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '' || exportStep === 'done',\n\n  // Navigation is enabled when the build is errored or if the build is not done.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored && !['', 'done'].includes(exportStep),\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Generate link</Trans>,\n\n  renderCustomStepsProgress: ({\n    build,\n    project,\n    onSaveProject,\n    errored,\n    exportStep,\n  }) => (\n    <OnlineGameLink\n      build={build}\n      project={project}\n      onSaveProject={onSaveProject}\n      errored={errored}\n      exportStep={exportStep}\n    />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineWebExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n      sizeLimit: 250 * 1000 * 1000,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { useCommandWithOptions } from '../CommandPalette/CommandHooks';\nimport { getElectronAccelerator } from '../KeyboardShortcuts';\nimport { useShortcutMap } from '../KeyboardShortcuts';\nimport { t } from '@lingui/macro';\nimport { isMacLike } from '../Utils/Platform';\nimport { type MainMenuProps } from './MainMenu.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype MainMenuEvent =\n  | 'main-menu-open'\n  | 'main-menu-open-recent'\n  | 'main-menu-save'\n  | 'main-menu-save-as'\n  | 'main-menu-close'\n  | 'main-menu-close-app'\n  | 'main-menu-export'\n  | 'main-menu-create-blank'\n  | 'main-menu-create-template'\n  | 'main-menu-open-project-manager'\n  | 'main-menu-open-home-page'\n  | 'main-menu-open-debugger'\n  | 'main-menu-open-about'\n  | 'main-menu-open-preferences'\n  | 'main-menu-open-language'\n  | 'main-menu-open-profile'\n  | 'main-menu-open-games-dashboard'\n  | 'update-status';\n\ntype MenuItemTemplate =\n  | {|\n      onClickSendEvent?: MainMenuEvent,\n      onClickOpenLink?: string,\n      accelerator?: string,\n      enabled?: boolean,\n      label?: string,\n      role?: string,\n      eventArgs?: any,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n      label: string,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n      role: string,\n    |}\n  | {|\n      type: 'separator',\n    |}\n  | {|\n      role: string,\n    |};\n\ntype RootMenuTemplate =\n  | {|\n      label?: string,\n      role?: string,\n      submenu: Array<MenuItemTemplate>,\n    |}\n  | {|\n      role: string,\n      submenu: Array<MenuItemTemplate>,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n    |};\n\n// Custom hook to register and deregister IPC listener\nconst useIPCEventListener = (ipcEvent: MainMenuEvent, func) => {\n  React.useEffect(\n    () => {\n      if (!ipcRenderer) return;\n      const handler = (event, ...eventArgs) => func(...eventArgs);\n      ipcRenderer.on(ipcEvent, handler);\n      return () => ipcRenderer.removeListener(ipcEvent, handler);\n    },\n    [ipcEvent, func]\n  );\n};\n\nconst buildAndSendMenuTemplate = (\n  project,\n  i18n,\n  recentProjectFiles,\n  shortcutMap\n) => {\n  const fileTemplate = {\n    label: i18n._(t`File`),\n    submenu: [\n      {\n        label: i18n._(t`Create`),\n        submenu: [\n          {\n            label: i18n._(t`New empty project...`),\n            accelerator: getElectronAccelerator(\n              shortcutMap['CREATE_NEW_PROJECT']\n            ),\n            onClickSendEvent: 'main-menu-create-blank',\n          },\n          {\n            label: i18n._(t`New project from template...`),\n            onClickSendEvent: 'main-menu-create-template',\n          },\n        ],\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Open...`),\n        accelerator: getElectronAccelerator(shortcutMap['OPEN_PROJECT']),\n        onClickSendEvent: 'main-menu-open',\n      },\n      {\n        label: i18n._(t`Open Recent`),\n        submenu: recentProjectFiles.map(item => ({\n          label: item.fileMetadata.fileIdentifier,\n          onClickSendEvent: 'main-menu-open-recent',\n          eventArgs: item,\n        })),\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Save`),\n        accelerator: getElectronAccelerator(shortcutMap['SAVE_PROJECT']),\n        onClickSendEvent: 'main-menu-save',\n        enabled: !!project,\n      },\n      {\n        label: i18n._(t`Save as...`),\n        accelerator: getElectronAccelerator(shortcutMap['SAVE_PROJECT_AS']),\n        onClickSendEvent: 'main-menu-save-as',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Export (web, iOS, Android)...`),\n        accelerator: getElectronAccelerator(shortcutMap['EXPORT_GAME']),\n        onClickSendEvent: 'main-menu-export',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Close Project`),\n        accelerator: getElectronAccelerator(shortcutMap['CLOSE_PROJECT']),\n        onClickSendEvent: 'main-menu-close',\n        enabled: !!project,\n      },\n    ],\n  };\n  if (!isMacLike()) {\n    fileTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`My Profile`),\n        onClickSendEvent: 'main-menu-open-profile',\n      },\n      {\n        label: i18n._(t`Games Dashboard`),\n        onClickSendEvent: 'main-menu-open-games-dashboard',\n      },\n      {\n        label: i18n._(t`Preferences`),\n        onClickSendEvent: 'main-menu-open-preferences',\n      },\n      {\n        label: i18n._(t`Language`),\n        onClickSendEvent: 'main-menu-open-language',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Exit GDevelop`),\n        accelerator: getElectronAccelerator(shortcutMap['QUIT_APP']),\n        onClickSendEvent: 'main-menu-close-app',\n      }\n    );\n  }\n\n  const editTemplate = {\n    label: i18n._(t`Edit`),\n    submenu: [\n      { label: i18n._(t`Undo`), role: 'undo' },\n      { label: i18n._(t`Redo`), role: 'redo' },\n      { type: 'separator' },\n      { label: i18n._(t`Cut`), role: 'cut' },\n      { label: i18n._(t`Copy`), role: 'copy' },\n      { label: i18n._(t`Paste`), role: 'paste' },\n      { label: i18n._(t`Paste and Match Style`), role: 'pasteandmatchstyle' },\n      { label: i18n._(t`Delete`), role: 'delete' },\n      { label: i18n._(t`Select All`), role: 'selectall' },\n    ],\n  };\n\n  const viewTemplate = {\n    label: i18n._(t`View`),\n    submenu: [\n      {\n        label: i18n._(t`Show Project Manager`),\n        accelerator: getElectronAccelerator(\n          shortcutMap['OPEN_PROJECT_MANAGER']\n        ),\n        onClickSendEvent: 'main-menu-open-project-manager',\n        enabled: !!project,\n      },\n      {\n        label: i18n._(t`Show Home`),\n        onClickSendEvent: 'main-menu-open-home-page',\n      },\n      {\n        label: i18n._(t`Open Debugger`),\n        onClickSendEvent: 'main-menu-open-debugger',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      { label: i18n._(t`Toggle Developer Tools`), role: 'toggledevtools' },\n      { type: 'separator' },\n      { label: i18n._(t`Toggle Fullscreen`), role: 'togglefullscreen' },\n    ],\n  };\n\n  const windowTemplate = {\n    label: i18n._(t`Window`),\n    role: 'window',\n    submenu: [{ label: i18n._(t`Minimize`), role: 'minimize' }],\n  };\n\n  const helpTemplate = {\n    label: i18n._(t`Help`),\n    role: 'help',\n    submenu: [\n      {\n        label: i18n._(t`GDevelop website`),\n        onClickOpenLink: 'http://gdevelop.io',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Community Forums`),\n        onClickOpenLink: 'https://forum.gdevelop.io',\n      },\n      {\n        label: i18n._(t`Community Discord Chat`),\n        onClickOpenLink: 'https://discord.gg/gdevelop',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Contribute to GDevelop`),\n        onClickOpenLink: 'https://gdevelop.io/page/contribute',\n      },\n      {\n        label: i18n._(t`Create Extensions for GDevelop`),\n        onClickOpenLink:\n          'https://github.com/4ian/GDevelop/blob/master/newIDE/README-extensions.md',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Help to Translate GDevelop`),\n        onClickOpenLink: 'https://crowdin.com/project/gdevelop',\n      },\n      {\n        label: i18n._(t`Report a wrong translation`),\n        onClickOpenLink: 'https://github.com/4ian/GDevelop/issues/969',\n      },\n    ],\n  };\n  if (!isMacLike()) {\n    helpTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`About GDevelop`),\n        onClickSendEvent: 'main-menu-open-about',\n      }\n    );\n  }\n\n  const template: Array<RootMenuTemplate> = [\n    fileTemplate,\n    editTemplate,\n    viewTemplate,\n    windowTemplate,\n    helpTemplate,\n  ];\n\n  if (isMacLike()) {\n    template.unshift({\n      label: i18n._(t`GDevelop 5`),\n      submenu: [\n        {\n          label: i18n._(t`About GDevelop`),\n          onClickSendEvent: 'main-menu-open-about',\n        },\n        { type: 'separator' },\n        {\n          label: i18n._(t`My Profile`),\n          onClickSendEvent: 'main-menu-open-profile',\n        },\n        {\n          label: i18n._(t`Games Dashboard`),\n          onClickSendEvent: 'main-menu-open-games-dashboard',\n        },\n        {\n          label: i18n._(t`Preferences`),\n          onClickSendEvent: 'main-menu-open-preferences',\n        },\n        {\n          label: i18n._(t`Language`),\n          onClickSendEvent: 'main-menu-open-language',\n        },\n        { type: 'separator' },\n        { role: 'services', submenu: [] },\n        { type: 'separator' },\n        { role: 'hide' },\n        { role: 'hideothers' },\n        { role: 'unhide' },\n        { type: 'separator' },\n        { role: 'quit' },\n      ],\n    });\n\n    editTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`Speech`),\n        submenu: [{ role: 'startspeaking' }, { role: 'stopspeaking' }],\n      }\n    );\n\n    windowTemplate.submenu = [\n      { role: 'minimize' },\n      { role: 'zoom' },\n      { type: 'separator' },\n      { role: 'front' },\n    ];\n  }\n\n  if (ipcRenderer) {\n    ipcRenderer.send('set-main-menu', template);\n  }\n};\n\n/**\n * Create and update the editor main menu using Electron APIs.\n */\nconst ElectronMainMenu = (props: MainMenuProps) => {\n  const { i18n, project, recentProjectFiles, onOpenRecentFile } = props;\n  const shortcutMap = useShortcutMap();\n  const language = i18n.language;\n\n  useIPCEventListener('main-menu-open', props.onChooseProject);\n  useIPCEventListener('main-menu-open-recent', props.onOpenRecentFile);\n  useIPCEventListener('main-menu-save', props.onSaveProject);\n  useIPCEventListener('main-menu-save-as', props.onSaveProjectAs);\n  useIPCEventListener('main-menu-close', props.onCloseProject);\n  useIPCEventListener('main-menu-close-app', props.onCloseApp);\n  useIPCEventListener('main-menu-export', props.onExportProject);\n  useIPCEventListener('main-menu-create-template', props.onCreateProject);\n  useIPCEventListener('main-menu-create-blank', props.onCreateBlank);\n  useIPCEventListener(\n    'main-menu-open-project-manager',\n    props.onOpenProjectManager\n  );\n  useIPCEventListener('main-menu-open-home-page', props.onOpenHomePage);\n  useIPCEventListener('main-menu-open-debugger', props.onOpenDebugger);\n  useIPCEventListener('main-menu-open-about', props.onOpenAbout);\n  useIPCEventListener('main-menu-open-preferences', props.onOpenPreferences);\n  useIPCEventListener('main-menu-open-language', props.onOpenLanguage);\n  useIPCEventListener('main-menu-open-profile', props.onOpenProfile);\n  useIPCEventListener(\n    'main-menu-open-games-dashboard',\n    props.onOpenGamesDashboard\n  );\n  useIPCEventListener('update-status', props.setElectronUpdateStatus);\n\n  React.useEffect(\n    () => {\n      buildAndSendMenuTemplate(project, i18n, recentProjectFiles, shortcutMap);\n    },\n    [i18n, language, project, recentProjectFiles, shortcutMap]\n  );\n\n  useCommandWithOptions('OPEN_RECENT_PROJECT', true, {\n    generateOptions: React.useCallback(\n      () =>\n        recentProjectFiles.map(item => ({\n          text: item.fileMetadata.fileIdentifier,\n          handler: () => onOpenRecentFile(item),\n        })),\n      [onOpenRecentFile, recentProjectFiles]\n    ),\n  });\n\n  return null;\n};\n\nexport default ElectronMainMenu;\n","// @flow\n// Note: this file does not use export/imports and use Flow comments to allow its usage from Node.js\n\nconst { loadExtension } = require('.');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst { findJsExtensionModules } = require('./LocalJsExtensionsFinder');\n\n/*flow-include\nimport type {JsExtensionsLoader, TranslationFunction} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\n\ntype MakeExtensionsLoaderArguments = {|\n  gd: any,\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n  onFindGDJS?: ?() => Promise<{gdjsRoot: string}>\n|};\n*/\n\n/**\n * Loader that will find all JS extensions declared in GDJS/Runtime/Extensions/xxx/JsExtension.js.\n * If you add a new extension and also want it to be available for the web-app version, add it in\n * BrowserJsExtensionsLoader.js\n */\nmodule.exports = function makeExtensionsLoader(\n  {\n    gd,\n    objectsEditorService,\n    objectsRenderingService,\n    filterExamples,\n    onFindGDJS,\n  } /*: MakeExtensionsLoaderArguments*/\n) /*: JsExtensionsLoader*/ {\n  return {\n    loadAllExtensions: (_ /*: TranslationFunction */) => {\n      return findJsExtensionModules({ filterExamples, onFindGDJS }).then(\n        extensionModulePaths => {\n          return Promise.all(\n            extensionModulePaths.map(extensionModulePath => {\n              let extensionModule = null;\n              try {\n                extensionModule = optionalRequire(extensionModulePath, {\n                  rethrowException: true,\n                });\n              } catch (ex) {\n                return {\n                  extensionModulePath,\n                  result: {\n                    message:\n                      'Unable to import extension. Please check for any syntax error or error that would prevent it from being run.',\n                    error: true,\n                    rawError: ex,\n                  },\n                };\n              }\n\n              if (extensionModule) {\n                // Load any editor for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsEditorService &&\n                  extensionModule.registerEditorConfigurations\n                ) {\n                  extensionModule.registerEditorConfigurations(\n                    objectsEditorService\n                  );\n                }\n\n                // Load any renderer for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsRenderingService &&\n                  extensionModule.registerInstanceRenderers\n                ) {\n                  extensionModule.registerInstanceRenderers(\n                    objectsRenderingService\n                  );\n                }\n\n                return {\n                  extensionModulePath,\n                  result: loadExtension(\n                    _,\n                    gd,\n                    gd.JsPlatform.get(),\n                    extensionModule\n                  ),\n                };\n              }\n\n              return {\n                extensionModulePath,\n                result: {\n                  error: true,\n                  message:\n                    'Unknown error. Please check for any syntax error or error that would prevent it from being run.',\n                },\n              };\n            })\n          );\n        },\n        err => {\n          console.error(`Unable to find JS extensions modules`);\n          throw err;\n        }\n      );\n    },\n  };\n};\n","// Note: this file does not use export/imports nor Flow to allow its usage from Node.js\n\nconst { findGDJS } = require('../GameEngineFinder/LocalGDJSFinder');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\n\nconst checkIfPathHasJsExtensionModule = extensionFolderPath => {\n  return new Promise(resolve => {\n    const jsExtensionModulePath = path.join(\n      extensionFolderPath,\n      'JsExtension.js'\n    );\n    fs.stat(jsExtensionModulePath, (err, stats) => {\n      if (err) {\n        return resolve(null);\n      }\n\n      return resolve(stats.isFile() ? jsExtensionModulePath : null);\n    });\n  });\n};\n\nconst findJsExtensionModules = ({ filterExamples, onFindGDJS }) => {\n  return (onFindGDJS ? onFindGDJS() : findGDJS()).then(({ gdjsRoot }) => {\n    const extensionsRoot = path.join(gdjsRoot, 'Runtime', 'Extensions');\n    console.info(\n      `Searching for JS extensions (file called JsExtension.js) in ${extensionsRoot}...`\n    );\n    return new Promise((resolve, reject) => {\n      fs.readdir(extensionsRoot, (error, extensionFolders) => {\n        if (error) {\n          return reject(error);\n        }\n\n        const filteredExtensionFolders = extensionFolders.filter(folder => {\n          if (!filterExamples) return true;\n\n          return folder.indexOf('Example') === -1;\n        });\n\n        Promise.all(\n          filteredExtensionFolders.map(extensionFolder =>\n            checkIfPathHasJsExtensionModule(\n              path.join(extensionsRoot, extensionFolder)\n            )\n          )\n        ).then(modulePaths => {\n          resolve(modulePaths.filter(modulePath => !!modulePath));\n        }, reject);\n      });\n    });\n  });\n};\n\nmodule.exports = {\n  findJsExtensionModules,\n};\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { getUID } from '../../Utils/LocalUserInfo';\nimport slugs from 'slugs';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst fs = optionalRequire('fs');\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to local files.\n */\nexport const makeLocalEventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  // The generated code for extensions will be stored in a temporary directory\n\n  const outputDir = path.join(\n    os.tmpdir(),\n    `GDGeneratedEventsFunctions-` + getUID()\n  );\n  fs.mkdir(outputDir, err => {\n    if (err && err.code !== 'EEXIST') {\n      console.error(\n        'Unable to create the directory where to output events functions generated code: ',\n        err\n      );\n      return;\n    }\n  });\n\n  const getPathFor = (codeNamespace: string) => {\n    return `${outputDir}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) => getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(functionCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(behaviorCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n  };\n};\n","// @flow\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst writeJSONFile = (object: Object, filepath: string): Promise<void> => {\n  if (!fs) return Promise.reject(new Error('Filesystem is not supported.'));\n\n  try {\n    const content = JSON.stringify(object, null, 2);\n    return fs.ensureDir(path.dirname(filepath)).then(\n      () =>\n        new Promise((resolve, reject) => {\n          fs.writeFile(filepath, content, (err: ?Error) => {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve();\n          });\n        })\n    );\n  } catch (stringifyException) {\n    return Promise.reject(stringifyException);\n  }\n};\n\nexport default class LocalEventsFunctionsExtensionWriter {\n  static chooseEventsFunctionExtensionFile = (\n    extensionName?: string\n  ): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an extension of the project',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n        defaultPath: extensionName ? extensionName : 'Extension.json',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeEventsFunctionsExtension = (\n    extension: gdEventsFunctionsExtension,\n    filepath: string\n  ): Promise<void> => {\n    const serializedObject = serializeToJSObject(extension);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the events function extension:', err);\n      throw err;\n    });\n  };\n}\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst fs = optionalRequire('fs');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport default class LocalEventsFunctionsExtensionOpener {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showOpenDialog(browserWindow, {\n        title: 'Import an extension in the project',\n        properties: ['openFile'],\n        message: 'Choose an extension file to import (.json file)',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return null;\n        return filePaths[0];\n      });\n  };\n\n  static readEventsFunctionExtensionFile = (\n    filepath: string\n  ): Promise<Object> => {\n    return readJSONFile(filepath);\n  };\n}\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport PreferencesContext from '../MainFrame/Preferences/PreferencesContext';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n/**\n * Set up some watchers for GDJS and Extensions sources.\n * Stop the watchers when the component is unmounted or `shouldWatch` prop is false.\n */\nexport const LocalGDJSDevelopmentWatcher = () => {\n  const preferences = React.useContext(PreferencesContext);\n  const shouldWatch = preferences.values.useGDJSDevelopmentWatcher;\n\n  React.useEffect(\n    () => {\n      if (!shouldWatch) {\n        // Nothing to set up in the effect if watch is deactivated.\n        return;\n      }\n\n      if (!ipcRenderer) {\n        console.error(\n          'Unable to find ipcRenderer to set up GDJS development watchers'\n        );\n        return;\n      }\n\n      ipcRenderer.send('setup-local-gdjs-development-watcher');\n      return () => {\n        ipcRenderer.send('close-local-gdjs-development-watcher');\n      };\n    },\n    [shouldWatch]\n  );\n\n  return null;\n};\n","// @flow\nimport { t } from '@lingui/macro';\n\nimport LocalFileStorageProvider from '../../ProjectsStorage/LocalFileStorageProvider';\nimport UrlStorageProvider from '../../ProjectsStorage/UrlStorageProvider';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { getExample } from '../../Utils/GDevelopServices/Example';\nimport { sendNewGameCreated } from '../../Utils/Analytics/EventSender';\nimport { showErrorBox } from '../../UI/Messages/MessageBox';\nimport {\n  type OnCreateBlankFunction,\n  type OnCreateFromExampleShortHeaderFunction,\n} from '../CreateProjectDialog';\nconst gd: libGDevelop = global.gd;\n\nconst path = optionalRequire('path');\nvar fs = optionalRequire('fs-extra');\n\nexport const onCreateBlank: OnCreateBlankFunction = async ({\n  i18n,\n  settings,\n}) => {\n  const { projectName, outputPath } = settings;\n  if (!fs || !outputPath) return null;\n\n  const project: gdProject = gd.ProjectHelper.createNewGDJSProject();\n  const localFilePath = path.join(outputPath, 'game.json');\n  project.setProjectFile(localFilePath);\n  sendNewGameCreated({ exampleUrl: '', exampleSlug: '' });\n  return {\n    source: {\n      project,\n      projectName,\n      storageProvider: null,\n      fileMetadata: null,\n    },\n    destination: {\n      storageProvider: LocalFileStorageProvider,\n      fileMetadata: { fileIdentifier: localFilePath },\n    },\n  };\n};\n\nexport const onCreateFromExampleShortHeader: OnCreateFromExampleShortHeaderFunction = async ({\n  i18n,\n  exampleShortHeader,\n  settings,\n}) => {\n  const { projectName, outputPath } = settings;\n  if (!fs || !outputPath) return;\n  try {\n    const example = await getExample(exampleShortHeader);\n\n    const localFilePath = path.join(outputPath, 'game.json');\n    sendNewGameCreated({\n      exampleUrl: example.projectFileUrl,\n      exampleSlug: exampleShortHeader.slug,\n    });\n    return {\n      source: {\n        projectName,\n        project: null,\n        storageProvider: UrlStorageProvider,\n        fileMetadata: {\n          fileIdentifier: example.projectFileUrl,\n        },\n      },\n      destination: {\n        storageProvider: LocalFileStorageProvider,\n        fileMetadata: {\n          fileIdentifier: localFilePath,\n        },\n      },\n    };\n  } catch (error) {\n    showErrorBox({\n      message:\n        i18n._(t`Unable to fetch the example.`) +\n        ' ' +\n        i18n._(t`Verify your internet connection or try again later.`),\n      rawError: error,\n      errorId: 'local-example-load-error',\n    });\n    return;\n  }\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport Cloud from '../../UI/CustomSvgIcons/Cloud';\nimport { type StorageProvider, type FileMetadata } from '../index';\n\n/**\n * A storage that is announcing the upcoming Cloud storage on the desktop app.\n */\nconst FakeCloudStorageProvider = ({\n  internalName: 'FakeCloud',\n  name: t`GDevelop cloud storage (coming soon)`,\n  disabled: true,\n  renderIcon: props => <Cloud fontSize={props.size} />,\n  createOperations: () => {\n    return {\n      doesInitialOpenRequireUserInteraction: true,\n      onOpen: (\n        fileMetadata: FileMetadata\n      ): Promise<{|\n        content: Object,\n      |}> => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onOpenWithPicker: (): Promise<?FileMetadata> => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onSaveProject: (project: gdProject, fileMetadata: FileMetadata) => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onSaveProjectAs: (project: gdProject, fileMetadata: ?FileMetadata) => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n    };\n  },\n}: StorageProvider);\n\nexport default FakeCloudStorageProvider;\n","// @flow\nimport {\n  type MoveAllProjectResourcesOptions,\n  type MoveAllProjectResourcesResult,\n  type MoveAllProjectResourcesFunction,\n} from './index';\nimport LocalFileStorageProvider from '../LocalFileStorageProvider';\nimport { moveUrlResourcesToLocalFiles } from '../LocalFileStorageProvider/LocalFileResourceMover';\nimport UrlStorageProvider from '../UrlStorageProvider';\nimport localFileSystem from '../../Export/LocalExporters/LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst path = optionalRequire('path');\n\nconst gd: libGDevelop = global.gd;\n\nconst movers: {\n  [string]: MoveAllProjectResourcesFunction,\n} = {\n  [`${LocalFileStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: async ({ project, newFileMetadata }: MoveAllProjectResourcesOptions) => {\n    // TODO: Ideally, errors while copying resources should be reported.\n    // TODO: Report progress.\n    const projectPath = path.dirname(newFileMetadata.fileIdentifier);\n    const fileSystem = assignIn(new gd.AbstractFileSystemJS(), localFileSystem);\n    gd.ProjectResourcesCopier.copyAllResourcesTo(\n      project,\n      fileSystem,\n      projectPath,\n      true, // Update the project with the new resource paths\n      false, // Don't move absolute files\n      true // Keep relative files folders structure.\n    );\n    return {\n      erroredResources: [],\n    };\n  },\n  // On the desktop app, try to download all URLs into local files, put\n  // next to the project file (in a \"assets\" directory). This is helpful\n  // to continue working on a game started on the web-app (using public URLs\n  // for resources).\n  [`${UrlStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: ({ project, newFileMetadata, onProgress }) =>\n    moveUrlResourcesToLocalFiles({\n      project,\n      fileMetadata: newFileMetadata,\n      onProgress,\n    }),\n};\n\nconst LocalResourceMover = {\n  moveAllProjectResources: async (\n    options: MoveAllProjectResourcesOptions\n  ): Promise<MoveAllProjectResourcesResult> => {\n    const { oldStorageProvider, newStorageProvider } = options;\n    const mover =\n      movers[\n        `${oldStorageProvider.internalName}=>${newStorageProvider.internalName}`\n      ];\n    if (!mover)\n      throw new Error(\n        `Can't find a ResourceMover for ${oldStorageProvider.internalName} to ${\n          newStorageProvider.internalName\n        }.`\n      );\n\n    return mover(options);\n  },\n};\n\nexport default LocalResourceMover;\n","// @flow\nimport {\n  type ResourceFetcher,\n  type FetchAllProjectResourcesOptions,\n  type FetchAllProjectResourcesResult,\n  type FetchAllProjectResourcesFunction,\n} from './index';\nimport LocalFileStorageProvider from '../LocalFileStorageProvider';\nimport { moveUrlResourcesToLocalFiles } from '../LocalFileStorageProvider/LocalFileResourceMover';\nimport UrlStorageProvider from '../UrlStorageProvider';\nimport { fetchRelativeResourcesToFullUrls } from '../UrlStorageProvider/UrlResourceFetcher';\n\nconst fetchers: {\n  [string]: FetchAllProjectResourcesFunction,\n} = {\n  // The local file storage provider fetches the resources that are URLs\n  // by downloading them locally.\n  [LocalFileStorageProvider.internalName]: moveUrlResourcesToLocalFiles,\n  // The URL storage consider relative resources to be relative to the project\n  // URL. This allows to open local projects uploaded to GitHub for example.\n  [UrlStorageProvider.internalName]: fetchRelativeResourcesToFullUrls,\n};\n\nconst LocalResourceFetcher: ResourceFetcher = {\n  fetchAllProjectResources: async (\n    options: FetchAllProjectResourcesOptions\n  ): Promise<FetchAllProjectResourcesResult> => {\n    const { storageProvider } = options;\n    const fetcher = fetchers[storageProvider.internalName];\n    if (!fetcher)\n      throw new Error(\n        `Can't find a ResourceFetcher for ${\n          storageProvider.internalName\n        } - have you registered the storage provider here?`\n      );\n\n    return fetcher(options);\n  },\n};\n\nexport default LocalResourceFetcher;\n","// @flow\nimport React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ExportDialog from './Export/ExportDialog';\nimport CreateProjectDialog from './ProjectCreation/CreateProjectDialog';\nimport Authentication from './Utils/GDevelopServices/Authentication';\nimport './UI/icomoon-font.css'; // Styles for Icomoon font.\n\n// Import for Electron powered IDE.\nimport localResourceSources from './ResourcesList/LocalResourceSources';\nimport localResourceExternalEditors from './ResourcesList/LocalResourceExternalEditors';\nimport LocalPreviewLauncher from './Export/LocalExporters/LocalPreviewLauncher';\nimport {\n  localAutomatedExporters,\n  localManualExporters,\n  localOnlineWebExporter,\n} from './Export/LocalExporters';\nimport ElectronMainMenu from './MainFrame/ElectronMainMenu';\nimport makeExtensionsLoader from './JsExtensionsLoader/LocalJsExtensionsLoader';\nimport { makeLocalEventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport Providers from './MainFrame/Providers';\nimport LocalEventsFunctionsExtensionWriter from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter';\nimport LocalEventsFunctionsExtensionOpener from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport LocalFileStorageProvider from './ProjectsStorage/LocalFileStorageProvider';\nimport { LocalGDJSDevelopmentWatcher } from './GameEngineFinder/LocalGDJSDevelopmentWatcher';\nimport {\n  onCreateFromExampleShortHeader,\n  onCreateBlank,\n} from './ProjectCreation/services/LocalCreation';\nimport FakeCloudStorageProvider from './ProjectsStorage/FakeCloudStorageProvider';\nimport LocalResourceMover from './ProjectsStorage/ResourceMover/LocalResourceMover';\nimport LocalResourceFetcher from './ProjectsStorage/ResourceFetcher/LocalResourceFetcher';\n\nconst gd: libGDevelop = global.gd;\n\nexport const create = (authentication: Authentication) => {\n  Window.setUpContextMenu();\n\n  const appArguments = Window.getArguments();\n  const isDev = Window.isDev();\n\n  return (\n    <Providers\n      authentication={authentication}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeLocalEventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={LocalEventsFunctionsExtensionWriter}\n      eventsFunctionsExtensionOpener={LocalEventsFunctionsExtensionOpener}\n    >\n      {({ i18n }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={\n            // Add Url provider\n            [LocalFileStorageProvider, FakeCloudStorageProvider]\n          }\n          defaultStorageProvider={LocalFileStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <MainFrame\n              i18n={i18n}\n              renderMainMenu={props => <ElectronMainMenu {...props} />}\n              renderPreviewLauncher={(props, ref) => (\n                <LocalPreviewLauncher {...props} ref={ref} />\n              )}\n              renderExportDialog={props => (\n                <ExportDialog\n                  project={props.project}\n                  onSaveProject={props.onSaveProject}\n                  onChangeSubscription={props.onChangeSubscription}\n                  onClose={props.onClose}\n                  automatedExporters={localAutomatedExporters}\n                  manualExporters={localManualExporters}\n                  onlineWebExporter={localOnlineWebExporter}\n                />\n              )}\n              renderCreateDialog={props => (\n                <CreateProjectDialog\n                  open={props.open}\n                  onClose={props.onClose}\n                  initialExampleShortHeader={props.initialExampleShortHeader}\n                  isProjectOpening={props.isProjectOpening}\n                  onOpenProjectPreCreationDialog={props.onOpenProjectPreCreationDialog}\n                />\n              )}\n              renderGDJSDevelopmentWatcher={\n                isDev ? () => <LocalGDJSDevelopmentWatcher /> : null\n              }\n              onCreateFromExampleShortHeader={onCreateFromExampleShortHeader}\n              onCreateBlank={onCreateBlank}\n              storageProviders={storageProviders}\n              resourceMover={LocalResourceMover}\n              resourceFetcher={LocalResourceFetcher}\n              getStorageProviderOperations={getStorageProviderOperations}\n              getStorageProvider={getStorageProvider}\n              resourceSources={localResourceSources}\n              resourceExternalEditors={localResourceExternalEditors}\n              extensionsLoader={makeExtensionsLoader({\n                gd,\n                objectsEditorService: ObjectsEditorService,\n                objectsRenderingService: ObjectsRenderingService,\n                filterExamples: !isDev,\n              })}\n              initialFileMetadataToOpen={initialFileMetadataToOpen}\n            />\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n};\n","import optionalRequire from '../../Utils/OptionalRequire';\nimport { getUID } from '../../Utils/LocalUserInfo';\nvar fs = optionalRequire('fs-extra');\nvar path = optionalRequire('path');\nvar os = optionalRequire('os');\nconst gd /* TODO: add flow in this file */ = global.gd;\n\n/**\n * Gives access to the local filesystem, but returns paths\n * that are using \"/\" as a path separator, even on Windows\n * (so that in exported games, paths are slashs, which is\n * supported everywhere).\n */\nconst LocalFileSystem = {\n  mkDir: function(path) {\n    try {\n      fs.mkdirsSync(path);\n    } catch (e) {\n      console.error('mkDir(' + path + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  dirExists: function(path) {\n    return fs.existsSync(path);\n  },\n  clearDir: function(path) {\n    try {\n      fs.emptyDirSync(path);\n    } catch (e) {\n      console.error('clearDir(' + path + ') failed: ' + e);\n    }\n  },\n  getTempDir: function() {\n    return path.join(os.tmpdir(), `GDTMP-${getUID()}`);\n  },\n  fileNameFrom: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return fullPath;\n\n    fullPath = this._translateUrl(fullPath);\n    return path.basename(fullPath);\n  },\n  dirNameFrom: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return '';\n\n    fullPath = this._translateUrl(fullPath);\n    return path.dirname(fullPath).replace(/\\\\/g, '/');\n  },\n  makeAbsolute: function(filename, baseDirectory) {\n    if (this._isExternalUrl(filename)) return filename;\n\n    filename = this._translateUrl(filename);\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path\n      .resolve(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  },\n  makeRelative: function(filename, baseDirectory) {\n    if (this._isExternalUrl(filename)) return filename;\n\n    filename = this._translateUrl(filename);\n    return path\n      .relative(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  },\n  isAbsolute: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return true;\n\n    if (fullPath.length === 0) return true;\n    fullPath = this._translateUrl(fullPath);\n    return (\n      (fullPath.length > 0 && fullPath.charAt(0) === '/') ||\n      (fullPath.length > 1 && fullPath.charAt(1) === ':')\n    );\n  },\n  copyFile: function(source, dest) {\n    //URL are not copied.\n    if (this._isExternalUrl(source)) return true;\n\n    source = this._translateUrl(source);\n    try {\n      if (source !== dest) fs.copySync(source, dest);\n    } catch (e) {\n      console.error('copyFile(' + source + ', ' + dest + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  writeToFile: function(file, contents) {\n    try {\n      fs.outputFileSync(file, contents);\n    } catch (e) {\n      console.error('writeToFile(' + file + ', ...) failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  readFile: function(file) {\n    try {\n      var contents = fs.readFileSync(file);\n      return contents.toString();\n    } catch (e) {\n      console.error('readFile(' + file + ') failed: ' + e);\n      return '';\n    }\n  },\n  readDir: function(path, ext) {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n    try {\n      var files = [];\n      if (fs.existsSync(path)) {\n        files = fs.readdirSync(path);\n        files.forEach(function(file) {\n          if (\n            ext.length === 0 ||\n            file.toUpperCase().indexOf(ext, file.length - ext.length) !== -1\n          ) {\n            output.push_back(path + '/' + file);\n          }\n        });\n      }\n    } catch (e) {\n      console.error('readDir(' + path + ',' + ext + ') failed: ' + e);\n    }\n\n    return output;\n  },\n  fileExists: function(filename) {\n    filename = this._translateUrl(filename);\n    try {\n      const stat = fs.statSync(filename);\n      return stat.isFile();\n    } catch (e) {\n      return false;\n    }\n  },\n  _isExternalUrl: function(filename) {\n    return (\n      filename.startsWith('http://') ||\n      filename.startsWith('https://') ||\n      filename.startsWith('ftp://') ||\n      filename.startsWith('blob:') ||\n      filename.startsWith('data:')\n    );\n  },\n  /**\n   * Return the filename associated to the URL on the server, relative to the games directory.\n   * (i.e: Transform g/mydirectory/myfile.png to mydirectory/myfile.png).\n   */\n  _translateUrl: function(filename) {\n    // TODO: remove\n    if (filename.substr(0, 2) === 'g/' || filename.substr(0, 2) === 'g\\\\')\n      filename = filename.substr(2);\n\n    return filename;\n  },\n};\n\nexport default LocalFileSystem;\n","// @flow\n\nimport optionalRequire from './OptionalRequire';\nimport optionalLazyRequire from '../Utils/OptionalLazyRequire';\nconst fs = optionalRequire('fs');\nconst lazyRequireArchiver = optionalLazyRequire('archiver');\n\n// TODO: Move in a Archiver folder?\n/**\n * Archive the given folder to a file. Only available when running on Electron runtime.\n */\nexport const archiveLocalFolder = ({\n  path,\n  outputFilename,\n  sizeLimit,\n}: {|\n  path: string,\n  outputFilename: string,\n  sizeLimit?: number,\n|}): Promise<string> => {\n  const archiver = lazyRequireArchiver();\n  return new Promise((resolve, reject) => {\n    if (!fs || !archiver) return reject(new Error('Archiver unavailable'));\n\n    const output = fs.createWriteStream(outputFilename);\n    const archive = archiver('zip', {\n      zlib: { level: 9 }, // Sets the compression level.\n    });\n\n    output.on('close', () => {\n      const fileSize = archive.pointer();\n      console.log(\n        `Archive written at ${outputFilename}, ${fileSize}} total bytes.`\n      );\n      if (sizeLimit && fileSize > sizeLimit) {\n        const roundFileSizeInMb = Math.round(fileSize / (1000 * 1000));\n        reject(\n          new Error(\n            `Archive is of size ${roundFileSizeInMb} MB, which is above the limit allowed of ${sizeLimit /\n              (1000 * 1000)} MB.`\n          )\n        );\n      }\n      resolve(outputFilename);\n    });\n\n    archive.on('error', err => {\n      reject(err);\n    });\n\n    archive.pipe(output);\n\n    archive.directory(path, false);\n\n    archive.finalize();\n  });\n};\n","// @flow\n// TODO: This module could be published on npm if useful.\nimport newNameGenerator from './NewNameGenerator';\nimport slugs from 'slugs';\n\ntype PartialObjectDescription = {|\n  reference: string,\n  object: Object,\n|};\n\ntype Reference = {\n  referenceTo: string,\n};\n\ntype SplitConfiguration = {|\n  pathSeparator: string,\n  getArrayItemReferenceName: (\n    object: Object,\n    currentReference: string\n  ) => string,\n  shouldSplit: (path: string) => boolean,\n  isReferenceMagicPropertyName: string,\n|};\n\ntype UnsplitConfiguration = {|\n  isReferenceMagicPropertyName: string,\n  getReferencePartialObject: (referencePath: string) => Promise<Object>,\n  maxUnsplitDepth?: number,\n|};\n\n/**\n * Mutate the given object to split it into multiple partial objects.\n * Partial objects will be replaced by references.\n *\n * @param object The object to be split.\n * @param configuration Configuration to be used to split the object.\n */\nexport const split = (\n  object: Object,\n  {\n    pathSeparator,\n    getArrayItemReferenceName,\n    shouldSplit,\n    isReferenceMagicPropertyName,\n  }: SplitConfiguration\n): Array<PartialObjectDescription> => {\n  const partialObjects = [];\n  const createReference = (reference, object): Reference => {\n    partialObjects.push({\n      reference,\n      object,\n    });\n\n    return {\n      [isReferenceMagicPropertyName]: true,\n      referenceTo: reference,\n    };\n  };\n\n  const splitObject = (\n    currentObject: Object,\n    currentPath: string,\n    currentReference: string\n  ) => {\n    if (currentObject !== null && typeof currentObject === 'object') {\n      if (Array.isArray(currentObject)) {\n        for (let index in currentObject) {\n          const itemPath = currentPath + pathSeparator + '*';\n          if (shouldSplit(itemPath)) {\n            const partialObject = currentObject[index];\n            const name = getArrayItemReferenceName(\n              partialObject,\n              currentReference\n            );\n            const itemReference = currentReference + pathSeparator + name;\n\n            currentObject[index] = createReference(\n              itemReference,\n              partialObject\n            );\n\n            splitObject(partialObject, itemPath, itemReference);\n          } else {\n            const itemReference = currentReference + pathSeparator + index;\n\n            splitObject(currentObject[index], itemPath, itemReference);\n          }\n        }\n      } else {\n        for (let propertyName in currentObject) {\n          const propertyPath = currentPath + pathSeparator + propertyName;\n          const propertyReference =\n            currentReference + pathSeparator + propertyName;\n          if (shouldSplit(propertyPath)) {\n            const partialObject = currentObject[propertyName];\n\n            currentObject[propertyName] = createReference(\n              propertyReference,\n              partialObject\n            );\n\n            splitObject(partialObject, propertyPath, propertyReference);\n          } else {\n            splitObject(\n              currentObject[propertyName],\n              propertyPath,\n              propertyReference\n            );\n          }\n        }\n      }\n    }\n  };\n\n  splitObject(object, '', '');\n  return partialObjects;\n};\n\n/**\n * Mutate the given object to recompose it from partial objects.\n * References to partial objects will be fetched as needed.\n *\n * @param object The object to be unsplit.\n * @param configuration Configuration to be used to unsplit the object.\n */\nexport const unsplit = (\n  object: Object,\n  {\n    isReferenceMagicPropertyName,\n    getReferencePartialObject,\n    maxUnsplitDepth,\n  }: UnsplitConfiguration\n): Promise<void> => {\n  const isReference = (object: Object): ?Reference => {\n    if (object[isReferenceMagicPropertyName] === true) {\n      return object;\n    }\n\n    return null;\n  };\n\n  const unsplitObject = (\n    currentObject: Object,\n    depth: number\n  ): Promise<void> => {\n    if (maxUnsplitDepth !== undefined && depth >= maxUnsplitDepth) {\n      return Promise.resolve();\n    }\n\n    if (currentObject !== null && typeof currentObject === 'object') {\n      const keys = Object.keys(currentObject);\n      if (keys) {\n        return Promise.all(\n          keys.map(indexOrPropertyName => {\n            const reference = isReference(currentObject[indexOrPropertyName]);\n            if (reference) {\n              return getReferencePartialObject(reference.referenceTo).then(\n                partialObject => {\n                  currentObject[indexOrPropertyName] = partialObject;\n\n                  return unsplitObject(\n                    currentObject[indexOrPropertyName],\n                    depth + 1\n                  );\n                }\n              );\n            }\n\n            return unsplitObject(currentObject[indexOrPropertyName], depth + 1);\n          })\n        ).then(() => {});\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  return unsplitObject(object, 0);\n};\n\n/**\n * A helper that can be used to split according to a list of hardcoded paths\n */\nexport const splitPaths = (paths: Set<string>) => {\n  return (path: string) => paths.has(path);\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getNameFromProperty = (propertyName: string) => {\n  return (object: Object): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    return property;\n  };\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getSlugifiedUniqueNameFromProperty = (propertyName: string) => {\n  const existingNamesForReference = {};\n\n  return (object: Object, currentReference: string): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    existingNamesForReference[currentReference] =\n      existingNamesForReference[currentReference] || {};\n    const newName = newNameGenerator(\n      slugs(property),\n      name => !!existingNamesForReference[currentReference][name]\n    );\n    existingNamesForReference[currentReference][newName] = true;\n    return newName;\n  };\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { type FileMetadata } from '../index';\nimport { unsplit } from '../../Utils/ObjectSplitter';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport const onOpenWithPicker = (): Promise<?FileMetadata> => {\n  if (!dialog) return Promise.reject('Not supported');\n  const browserWindow = remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: 'Open a project',\n      properties: ['openFile'],\n      message:\n        'If you want to open your GDevelop 4 project, be sure to save it as a .json file',\n      filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return null;\n      return { fileIdentifier: filePaths[0] };\n    });\n};\n\nexport const onOpen = (\n  fileMetadata: FileMetadata\n): Promise<{|\n  content: Object,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const projectPath = path.dirname(filePath);\n  return readJSONFile(filePath).then(object => {\n    return unsplit(object, {\n      getReferencePartialObject: referencePath => {\n        return readJSONFile(path.join(projectPath, referencePath) + '.json');\n      },\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n      // Limit unsplitting to depth 3 (which would allow properties of layouts/external layouts/external events\n      // to be un-splitted, but not the content of these properties), to avoid very slow processing\n      // of large game files.\n      maxUnsplitDepth: 3,\n    }).then(() => {\n      return { content: object };\n    });\n  });\n};\n\nexport const hasAutoSave = (\n  fileMetadata: FileMetadata,\n  compareLastModified: boolean\n): Promise<boolean> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const autoSavePath = filePath + '.autosave';\n  if (fs.existsSync(autoSavePath)) {\n    if (!compareLastModified) {\n      return Promise.resolve(true);\n    }\n    try {\n      const autoSavedTime = fs.statSync(autoSavePath).mtime.getTime();\n      const saveTime = fs.statSync(filePath).mtime.getTime();\n      if (autoSavedTime > saveTime) {\n        return Promise.resolve(true);\n      }\n    } catch (err) {\n      console.error('Unable to compare *.autosave to project', err);\n      return Promise.resolve(false);\n    }\n    return Promise.resolve(false);\n  }\n  return Promise.resolve(false);\n};\n\nexport const onGetAutoSave = (fileMetadata: FileMetadata) => {\n  return Promise.resolve({\n    ...fileMetadata,\n    fileIdentifier: fileMetadata.fileIdentifier + '.autosave',\n  });\n};\n","// @flow\nimport { serializeToJSObject, serializeToJSON } from '../../Utils/Serializer';\nimport { type FileMetadata } from '../index';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  split,\n  splitPaths,\n  getSlugifiedUniqueNameFromProperty,\n} from '../../Utils/ObjectSplitter';\nimport type { MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport { t } from '@lingui/macro';\n\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst checkFileContent = (filePath: string, expectedContent: string) => {\n  const time = performance.now();\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, { encoding: 'utf8' }, (err, content) => {\n      if (err) return reject(err);\n\n      if (content === '') {\n        reject(new Error(`Written file is empty, did the write fail?`));\n      }\n      if (content !== expectedContent) {\n        reject(\n          new Error(\n            `Written file is not containing the expected content, did the write fail?`\n          )\n        );\n      }\n      const verificationTime = performance.now() - time;\n      console.info(\n        `Verified ${filePath} content in ${verificationTime.toFixed()}ms.`\n      );\n      resolve();\n    });\n  });\n};\n\nexport const writeAndCheckFile = async (\n  content: string,\n  filePath: string\n): Promise<void> => {\n  if (!fs) throw new Error('Filesystem is not supported.');\n  if (content === '')\n    throw new Error('The content to save on disk is empty. Aborting.');\n\n  await fs.ensureDir(path.dirname(filePath));\n\n  await fs.writeFile(filePath, content);\n  await checkFileContent(filePath, content);\n};\n\nconst writeAndCheckFormattedJSONFile = async (\n  object: Object,\n  filePath: string\n): Promise<void> => {\n  const content = JSON.stringify(object, null, 2);\n  await writeAndCheckFile(content, filePath);\n};\n\nconst writeProjectFiles = (\n  project: gdProject,\n  filePath: string,\n  projectPath: string\n): Promise<void> => {\n  const serializedProjectObject = serializeToJSObject(project);\n  if (project.isFolderProject()) {\n    const partialObjects = split(serializedProjectObject, {\n      pathSeparator: '/',\n      getArrayItemReferenceName: getSlugifiedUniqueNameFromProperty('name'),\n      shouldSplit: splitPaths(\n        new Set([\n          '/layouts/*',\n          '/externalLayouts/*',\n          '/externalEvents/*',\n          '/layouts/*',\n          '/eventsFunctionsExtensions/*',\n        ])\n      ),\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n    });\n\n    return Promise.all(\n      partialObjects.map(partialObject => {\n        return writeAndCheckFormattedJSONFile(\n          partialObject.object,\n          path.join(projectPath, partialObject.reference) + '.json'\n        ).catch(err => {\n          console.error('Unable to write a partial file:', err);\n          throw err;\n        });\n      })\n    ).then(() => {\n      return writeAndCheckFormattedJSONFile(\n        serializedProjectObject,\n        filePath\n      ).catch(err => {\n        console.error('Unable to write the split project:', err);\n        throw err;\n      });\n    });\n  } else {\n    return writeAndCheckFormattedJSONFile(\n      serializedProjectObject,\n      filePath\n    ).catch(err => {\n      console.error('Unable to write the project:', err);\n      throw err;\n    });\n  }\n};\n\nexport const onSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: FileMetadata,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const now = Date.now();\n  if (!filePath) {\n    return Promise.reject(\n      'Project file is empty, \"Save as\" should have been called?'\n    );\n  }\n  const newFileMetadata = {\n    ...fileMetadata,\n    lastModifiedDate: now,\n  };\n\n  const projectPath = path.dirname(filePath);\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return { wasSaved: true, fileMetadata: newFileMetadata }; // Save was properly done\n  });\n};\n\nexport const onChooseSaveProjectAsLocation = async (\n  project: gdProject,\n  fileMetadata: ?FileMetadata // This is the current location.\n): Promise<{|\n  fileMetadata: ?FileMetadata, // This is the newly chosen location (or null if cancelled).\n|}> => {\n  const defaultPath = fileMetadata ? fileMetadata.fileIdentifier : '';\n  const browserWindow = remote.getCurrentWindow();\n  const saveDialogOptions = {\n    defaultPath,\n    filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n  };\n\n  if (!dialog) {\n    throw new Error('Unsupported');\n  }\n  const filePath = dialog.showSaveDialogSync(browserWindow, saveDialogOptions);\n  if (!filePath) {\n    return { fileMetadata: null };\n  }\n\n  return {\n    fileMetadata: {\n      fileIdentifier: filePath,\n    },\n  };\n};\n\nexport const onSaveProjectAs = async (\n  project: gdProject,\n  fileMetadata: ?FileMetadata,\n  options: {|\n    onStartSaving: () => void,\n    onMoveResources: () => Promise<void>,\n  |}\n): Promise<{|\n  wasSaved: boolean,\n|}> => {\n  if (!fileMetadata)\n    throw new Error('A location was not chosen before saving as.');\n\n  if (options && options.onStartSaving) options.onStartSaving();\n  await options.onMoveResources();\n\n  const filePath = fileMetadata.fileIdentifier;\n  const projectPath = path.dirname(filePath);\n  project.setProjectFile(filePath);\n\n  await writeProjectFiles(project, filePath, projectPath);\n  return {\n    wasSaved: true,\n  };\n};\n\nexport const onAutoSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<void> => {\n  const autoSavePath = fileMetadata.fileIdentifier + '.autosave';\n  return writeAndCheckFile(serializeToJSON(project), autoSavePath).catch(\n    err => {\n      console.error(`Unable to write ${autoSavePath}:`, err);\n      throw err;\n    }\n  );\n};\n\nexport const getWriteErrorMessage = (error: Error): MessageDescriptor =>\n  t`An error occurred when saving the project. Please try again by choosing another location.`;\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props} viewBox=\"0 0 16 16\" style={{ fill: 'none' }}>\n    <path\n      d=\"M5.75 11.25C5.75 11.25 6 14.25 4 15.25H12C10 14.25 10.25 11.25 10.25 11.25M5.75 11.25H13.25C14.3546 11.25 15.25 10.3546 15.25 9.25V2.75C15.25 1.64543 14.3546 0.75 13.25 0.75H2.75C1.64543 0.75 0.75 1.64543 0.75 2.75V9.25C0.75 10.3546 1.64543 11.25 2.75 11.25H5.75Z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </SvgIcon>\n));\n","// @flow\nimport * as React from 'react';\nimport { t } from '@lingui/macro';\nimport { type StorageProvider } from '../index';\nimport {\n  onOpenWithPicker,\n  onOpen,\n  hasAutoSave,\n  onGetAutoSave,\n} from './LocalProjectOpener';\nimport {\n  onSaveProject,\n  onChooseSaveProjectAsLocation,\n  onSaveProjectAs,\n  onAutoSaveProject,\n  getWriteErrorMessage,\n} from './LocalProjectWriter';\nimport {\n  type AppArguments,\n  POSITIONAL_ARGUMENTS_KEY,\n} from '../../Utils/Window';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport Computer from '../../UI/CustomSvgIcons/Computer';\n\n/**\n * Use the Electron APIs to provide access to the native\n * file system (with native save/open dialogs).\n */\nexport default ({\n  internalName: 'LocalFile',\n  name: t`Your computer`,\n  renderIcon: props => <Computer fontSize={props.size} />,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    return {\n      fileIdentifier: appArguments[POSITIONAL_ARGUMENTS_KEY][0],\n    };\n  },\n  createOperations: () => ({\n    onOpenWithPicker,\n    onOpen,\n    hasAutoSave,\n    onSaveProject,\n    onChooseSaveProjectAsLocation,\n    onSaveProjectAs,\n    onAutoSaveProject,\n    onGetAutoSave,\n    getOpenErrorMessage: (error: Error): MessageDescriptor => {\n      return t`Check that the file exists, that this file is a proper game created with GDevelop and that you have the authorization to open it.`;\n    },\n    getWriteErrorMessage,\n  }),\n}: StorageProvider);\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadLocalFile = (\n  localFilePath: string,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  if (!ipcRenderer) return Promise.reject('No support for local file upload');\n\n  ipcRenderer.removeAllListeners('local-file-upload-progress');\n  ipcRenderer.removeAllListeners('local-file-upload-done');\n\n  return new Promise((resolve, reject) => {\n    ipcRenderer.on(\n      'local-file-upload-progress',\n      (event, stepCurrentProgress, stepMaxProgress) => {\n        onProgress(stepCurrentProgress, stepMaxProgress);\n      }\n    );\n    ipcRenderer.on('local-file-upload-done', (event, err) => {\n      if (err) return reject(err);\n      resolve();\n    });\n    ipcRenderer.send('local-file-upload', localFilePath, uploadOptions);\n  });\n};\n"],"sourceRoot":""}