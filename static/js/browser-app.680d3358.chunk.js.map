{"version":3,"sources":["Export/BrowserExporters/BrowserS3PreviewLauncher/index.js","Export/BrowserExporters/BrowserS3PreviewLauncher/BrowserPreviewLinkDialog.js","Export/BrowserExporters/BrowserS3PreviewLauncher/BrowserPreviewErrorDialog.js","Export/BrowserExporters/BrowserS3FileSystem.js","Export/BrowserExporters/BrowserS3PreviewLauncher/BrowserPreviewDebuggerServer.js","Export/BrowserExporters/BrowserOnlineCordovaExport.js","Export/BrowserExporters/BrowserOnlineElectronExport.js","Export/BrowserExporters/BrowserOnlineWebExport.js","Export/BrowserExporters/BrowserHTML5Export.js","Export/BrowserExporters/BrowserCordovaExport.js","Export/BrowserExporters/BrowserElectronExport.js","Export/BrowserExporters/BrowserFacebookInstantGamesExport.js","JsExtensionsLoader/BrowserJsExtensionsLoader.js","UI/CustomSvgIcons/GoogleDrive.js","ProjectsStorage/DownloadFileStorageProvider/DownloadFileSaveAsDialog.js","ProjectCreation/services/BrowserCreation.js","ProjectsStorage/GoogleDriveStorageProvider/GoogleDriveFileOrFolderPicker.js","ProjectsStorage/GoogleDriveStorageProvider/GoogleDriveSaveAsDialog.js","ResourcesList/FileToCloudProjectResourceUploader.js","ResourcesList/BrowserResourceSources.js","ResourcesList/BrowserResourceExternalEditors.js","Export/BrowserExporters/index.js","EventsFunctionsExtensionsLoader/CodeWriters/BrowserS3EventsFunctionCodeWriter.js","ProjectsStorage/DownloadFileStorageProvider/index.js","ProjectsStorage/CloudStorageProvider/CloudSaveAsDialog.js","ProjectsStorage/CloudStorageProvider/CloudProjectWriter.js","ProjectsStorage/CloudStorageProvider/CloudProjectOpener.js","ProjectsStorage/CloudStorageProvider/index.js","ProjectsStorage/CloudStorageProvider/CloudResourceMover.js","ProjectsStorage/ResourceMover/BrowserResourceMover.js","ProjectsStorage/ResourceFetcher/BrowserResourceFetcher.js","BrowserApp.js","GameEngineFinder/BrowserS3GDJSFinder.js","Utils/BrowserArchiver.js","Export/BrowserExporters/BrowserFileSystem.js","Utils/BlobDownloadUrlHolder.js","Utils/GDevelopServices/Preview.js","Export/BrowserExporters/BrowserFileUploader.js","Utils/Zip.js/index.js","Utils/BlobDownloader.js","ProjectsStorage/GoogleDriveStorageProvider/index.js"],"names":["gd","global","nextPreviewWindowId","openPreviewWindow","project","url","existingTargetId","width","getGameResolutionWidth","height","getGameResolutionHeight","left","window","screenX","innerWidth","top","screenY","innerHeight","targetId","previewWindow","open","BrowserS3PreviewLauncher","canDoNetworkPreview","canDoHotReload","state","previewLinkDialog","error","_prepareExporter","findGDJS","then","gdjsRoot","filesContent","console","info","prefix","makeTimestampedId","outputDir","getBaseUrl","browserS3FileSystem","BrowserS3FileSystem","bucketBaseUrl","fileSystem","assignIn","AbstractFileSystemJS","exporter","Exporter","setCodeOutputDirectory","launchPreview","previewOptions","layout","externalLayout","setState","getPreviewDebuggerServer","startServer","catch","err","previewExportOptions","PreviewExportOptions","setLayoutName","getName","setIsDevelopmentEnvironment","Window","isDev","setExternalLayoutName","useWindowMessageDebuggerClient","debuggerIds","getExistingDebuggerIds","lastDebuggerId","length","shouldHotReload","hotReload","setNonRuntimeScriptsCacheBurst","Date","now","setFullLoadingScreen","fullLoadingScreen","exportProjectForPixiPreview","delete","uploadPendingObjects","getExistingTargetIdForDebuggerId","registerPreviewWindow","browserPreviewDebuggerServer","this","onClose","onPreviewWindowOpened","React","BrowserPreviewLinkDialog","_makeOnOpen","i18n","props","actions","label","primary","onClick","onRequestClose","onApply","Component","BrowserPreviewErrorDialog","title","code","message","isURL","filename","startsWith","_pendingUploadObjects","_allCopiedExternalUrls","Set","Promise","all","map","uploadObject","result","log","mkDir","path","dirExists","clearDir","getTempDir","fileNameFrom","fullpath","basename","dirNameFrom","dirname","makeAbsolute","baseDirectory","isAbsolute","resolve","normalize","makeRelative","relative","charAt","copyFile","source","dest","add","warn","writeToFile","fullPath","contents","key","replace","fileExtension","extname","push","Key","Body","ContentType","readFile","file","_indexedFilesContent","text","readDir","ext","toUpperCase","output","VectorString","forEach","upperCaseUrl","indexOf","push_back","fileExists","textFileDescriptor","filePath","debuggerServerState","callbacksList","nextDebuggerId","previewWindowAndTargetIds","Object","keys","Number","getDebuggerIdForPreviewWindow","id","windowClosedPollingIntervalId","setupWindowClosedPolling","setInterval","closed","onConnectionClosed","clearInterval","PREVIEWS_ORIGIN","a","addEventListener","event","origin","parsedMessage","JSON","parse","data","onHandleParsedMessage","onServerStateChanged","sendMessage","postMessage","getServerState","registerCallbacks","callbacks","callbacksIndex","splice","sameWindowExistingId","onConnectionOpened","previewWindowAndTargetId","browserOnlineCordovaExportPipeline","name","onlineBuildType","limitedBuilds","packageNameWarningType","getInitialExportState","targets","keystore","signingDialogOpen","canLaunchBuild","exportState","errored","exportStep","isNavigationDisabled","includes","renderHeader","renderLaunchButtonLabel","prepareExporter","context","abstractFileSystem","BrowserFileSystem","textFiles","launchExport","exportOptions","MapStringBoolean","set","exportWholePixiProject","getAllTextFilesIn","urlFiles","getAllUrlFilesIn","launchResourcesDownload","downloadUrlFilesToBlobFiles","onProgress","updateStepProgress","blobFiles","launchCompression","archiveFiles","basePath","launchUpload","blobFile","getBuildFileUploadOptions","uploadOptions","uploadBlobFile","launchOnlineBuild","authenticatedUser","uploadBucketKey","gameId","options","getAuthorizationHeader","firebaseUser","buildCordovaAndroid","uid","reject","Error","browserOnlineElectronExportPipeline","buildElectron","browserOnlineWebExportPipeline","renderCustomStepsProgress","build","onSaveProject","sizeLimit","buildWeb","browserHTML5ExportPipeline","renderDoneFooter","compressionOutput","renderGameButton","blob","blobDownloadUrl","fullWidth","openBlobDownloadUrl","browserCordovaExportPipeline","browserElectronExportPipeline","browserFacebookInstantGamesExportPipeline","jsExtensions","extensionModule","require","objectsRenderingServiceModules","makeExtensionsLoader","objectsEditorService","objectsRenderingService","filterExamples","loadAllExtensions","_","filter","registerEditorConfigurations","requirePath","registerModule","registerInstanceRenderers","extensionModulePath","loadExtension","JsPlatform","get","memo","d","PROJECT_JSON_FILENAME","pathPosix","posix","downloadResourcesAsBlobs","onAddBlobFile","erroredResources","getResourcesToFetch","resourcesManager","getResourcesManager","getAllResourceNames","toJSArray","resourceName","resource","getResource","resourceFile","getFile","checkIfIsGDevelopCloudBucketUrl","extractFilenameFromProjectResourceUrl","Boolean","resourcesToFetchAndUpload","downloadUrlsToBlobs","urlContainers","count","total","downloadedBlobsAndResources","alreadyUsedFilenames","item","extension","pathPrefix","getKind","newBasename","newNameGenerator","tentativeBasename","has","join","newResourcePath","setFile","DownloadFileSaveAsDialog","onDone","zippedProjectBlob","setZippedProjectBlob","useGenericRetryableProcessWithProgress","onDoProcess","ensureProcessIsDone","renderProcessDialog","newProject","ProjectHelper","createNewGDJSProject","serializedProject","SerializerElement","serializeTo","unserializeFrom","blobFileDescriptor","stringify","serializeToJSObject","showErrorBox","rawError","errorId","openExternalURL","maxWidth","noMargin","expand","justifyContent","onCreateBlank","settings","sendNewGameCreated","exampleUrl","exampleSlug","projectName","storageProvider","fileMetadata","destination","onCreateFromExampleShortHeader","exampleShortHeader","getExample","example","projectFileUrl","slug","UrlStorageProvider","fileIdentifier","styles","container","position","display","alignItems","button","marginLeft","textField","flex","GoogleDriveFileOrFolderPicker","style","TextField","floatingLabelText","floatingLabelFixed","type","translatableHintText","value","onChange","RaisedButton","onOpenPicker","GoogleDriveSaveAsDialog","selectedFileOrFolder","setSelectedFileOrFolder","newFileName","setNewFileName","saving","setSaving","saveError","setSaveError","pickerError","setPickerError","dialogHidden","hideDialog","canSave","save","onSave","canCancel","Dialog","FlatButton","disabled","onCancel","LeftLoader","isLoading","cannotBeDismissed","onShowFilePicker","selectFolderEnabled","showUploadView","AlertMessage","kind","fileInput","resourceKindToInputAcceptedFiles","audio","image","font","video","json","bitmapFont","FileToCloudProjectResourceUploader","getStorageProvider","onChooseResources","createNewResource","inputRef","useRef","useContext","AuthenticatedUserContext","useState","isUploading","setIsUploading","selectedFiles","setSelectedFiles","hasSelectedFiles","useMemo","cloudProjectId","uploadProgress","setUploadProgress","onUpload","useCallback","current","uploadProjectResourceFiles","results","erroredResults","okResults","newResource","setName","setOrigin","doNotReport","invalidFiles","size","PROJECT_RESOURCE_MAX_SIZE_IN_BYTES","canUploadWithThisStorageProvider","internalName","isConnected","authenticated","canChooseFiles","canUploadFiles","Paper","variant","accept","resourceKind","multiple","multiSelection","ref","files","i","currentTarget","erroredFile","LinearProgress","ResourceStoreChooser","ResourceStore","onChoose","chosenResourceUrl","UrlChooser","inputValue","setInputValue","setError","urlsErroredBooleanArray","setUrlsErroredBooleanArray","hasErroredUrls","validateInputValue","useDebounce","urls","split","axios","timeout","validateStatus","status","responses","response","renderButton","renderTextField","SemiControlledTextField","multiline","rows","rowsMax","errorText","isErrored","index","browserResourceSources","allResourceKindsAndMetadata","displayName","displayTab","renderComponent","editors","edit","sendExternalEditorOpened","showMessageBox","browserOnlineWebExporter","onlineWebExporter","exportPipeline","browserAutomatedExporters","html5Exporter","onlineCordovaExporter","onlineElectronExporter","facebookInstantGamesExporter","browserManualExporters","cordovaExporter","electronExporter","makeBrowserS3EventsFunctionCodeWriter","onWriteFile","getPathFor","codeNamespace","slugs","getIncludeFileFor","writeFunctionCode","functionCodeNamespace","includeFile","content","writeBehaviorCode","behaviorCodeNamespace","renderIcon","fontSize","hiddenInOpenDialog","createOperations","setDialog","closeDialog","onSaveProjectAs","onStartSaving","onMoveResources","wasSaved","CloudSaveAsDialog","nameSuggestion","flexBody","autoFocus","maxLength","CLOUD_PROJECT_NAME_MAX_LENGTH","e","newName","zipProject","initializeZipJs","zipJs","projectJson","serializeToJSON","textReader","TextReader","createWriter","BlobWriter","zipWriter","close","zipProjectAndCommitVersion","archive","commitVersion","newVersion","generateOnSaveProject","generateOnChangeProjectProperty","properties","updateCloudProject","getWriteErrorMessage","generateOnChooseSaveProjectAsLocation","createCloudProject","cloudProject","generateOnSaveProjectAs","getCredentialsForCloudProject","unzipProject","zippedProject","createReader","BlobReader","zipReader","getEntries","entries","getData","TextWriter","generateOnOpen","getCloudProject","getProjectFileAsZipBlob","zippedSerializedProject","generateOnEnsureCanAccessResources","Cloud","needUserAuthentication","getFileMetadataFromAppArguments","appArguments","POSITIONAL_ARGUMENTS_KEY","onOpen","onEnsureCanAccessResources","onChooseSaveProjectAsLocation","onChangeProjectProperty","getOpenErrorMessage","isBlobURL","moveAllCloudProjectResourcesToCloudProject","oldFileMetadata","newFileMetadata","oldStorageProvider","oldStorageProviderOperations","newStorageProvider","newStorageProviderOperations","newCloudProjectId","getResourcesToFetchAndUpload","extractProjectUuidFromProjetResourceUrl","downloadedBlobsAndResourcesToUpload","downloadedFilesAndResourcesToUpload","File","ensureNoCloudProjectResources","moveNothing","movers","CloudStorageProvider","GoogleDriveStorageProvider","DownloadFileStorageProvider","BrowserResourceMover","moveAllProjectResources","mover","fetchNothing","fetchers","fetchRelativeResourcesToFullUrls","BrowserResourceFetcher","fetchAllProjectResources","fetcher","create","authentication","setUpContextMenu","getArguments","Providers","disableCheckForUpdates","makeEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","ProjectStorageProviders","storageProviders","defaultStorageProvider","getStorageProviderOperations","initialFileMetadataToOpen","MainFrame","renderPreviewLauncher","initialDialog","renderExportDialog","ExportDialog","onChangeSubscription","automatedExporters","manualExporters","allExportersRequireOnline","renderCreateDialog","CreateProjectDialog","initialExampleShortHeader","isProjectOpening","onOpenProjectPreCreationDialog","resourceMover","resourceFetcher","resourceSources","resourceExternalEditors","browserResourceExternalEditors","extensionsLoader","ObjectsEditorService","ObjectsRenderingService","filesToDownload","preview","web","cordova","electron","fileSet","getIDEVersion","relativeFilePath","fetch","ok","eachCallback","array","callback","done","callNextCallback","downloadedBlobs","erroredUrls","downloadedBlob","errorMessages","shortenString","zippedFilesCount","totalFilesCount","fileSize","roundFileSizeInMb","Math","round","_textFiles","_filesToDownload","filePathOrURL","baseDirectoryOrURL","substring","upperCaseFilePath","normalizedFilePath","BlobDownloadUrlHolder","children","setBlobDownloadUrl","currentBlob","setCurrentBlob","URL","createObjectURL","revokeObjectURL","body","document","createElement","appendChild","href","download","click","removeChild","params","getSignedUrl","uploadType","contentType","signedUrl","put","headers","GDevelopGamePreviews","baseUrl","maxContentLength","Infinity","onUploadProgress","progressEvent","loaded","zipJsLoaded","zipJsLoadingPromise","zip","loadScript","PUBLIC_URL","workerScripts","deflater","inflater","addSearchParameterToUrl","urlEncodedParameterName","urlEncodedValue","separator","PromisePool","withConcurrency","for","process","urlContainer","urlWithParameters","credentials","checkIfCredentialsRequired","DEVELOPER_KEY","DISCOVERY_DOCS","SCOPE","apisLoaded","apisLoadingPromise","initializeApis","gapi","load","auth2LoadPromise","auth2","init","apiKey","clientId","discoveryDocs","scope","client","setApiKey","driveLoadPromise","onerror","isAuthenticated","authenticate","googleAuth","getAuthInstance","isSignedIn","currentUser","listen","signIn","googleUser","getAuthResponse","patchJsonFile","fileId","method","Headers","Authorization","access_token","res","showFilePicker","google","picker","pickerBuilder","PickerBuilder","addView","DocsView","setIncludeFolders","setSelectFolderEnabled","setOAuthToken","setDeveloperKey","setAppId","setCallback","Response","ACTION","Action","PICKED","doc","DOCUMENTS","Document","ID","NAME","parentId","PARENT_ID","TYPE","Type","LOCATION","MIME_TYPE","dispose","CANCEL","DocsUploadView","setVisible","pickerElements","getElementsByClassName","zIndex","googleDriveState","ids","doesInitialOpenRequireUserInteraction","fileContent","ex","onOpenWithPicker","googleDriveFileOrFolder","lastModifiedDate","drive","parents","mimeType","fields","apiResponse","newFileId"],"mappings":"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","file":"static/js/browser-app.680d3358.chunk.js","sourcesContent":["// @flow\nimport * as React from 'react';\nimport BrowserPreviewLinkDialog from './BrowserPreviewLinkDialog';\nimport BrowserPreviewErrorDialog from './BrowserPreviewErrorDialog';\nimport BrowserS3FileSystem from '../BrowserS3FileSystem';\nimport { findGDJS } from '../../../GameEngineFinder/BrowserS3GDJSFinder';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport { getBaseUrl } from '../../../Utils/GDevelopServices/Preview';\nimport { makeTimestampedId } from '../../../Utils/TimestampedId';\nimport {\n  browserPreviewDebuggerServer,\n  getExistingTargetIdForDebuggerId,\n  registerPreviewWindow,\n} from './BrowserPreviewDebuggerServer';\nimport Window from '../../../Utils/Window';\nconst gd: libGDevelop = global.gd;\n\ntype State = {|\n  previewLinkDialog: ?{\n    project: gdProject,\n    url: string,\n  },\n  error: ?Error,\n|};\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n  onChangeSubscription?: () => void,\n|};\n\nlet nextPreviewWindowId = 0;\n\n/**\n * This opens a preview window at the specified URL for the specified project.\n * This will be a new window if `existingTargetId` is null, or will replace an existing\n * window content if `existingTargetId` is specified.\n */\nexport const openPreviewWindow = (\n  project: gdProject,\n  url: string,\n  existingTargetId: ?string\n): {| previewWindow: any, targetId: string |} => {\n  const width = project.getGameResolutionWidth();\n  const height = project.getGameResolutionHeight();\n  const left = window.screenX + window.innerWidth / 2 - width / 2;\n  const top = window.screenY + window.innerHeight / 2 - height / 2;\n\n  const targetId = existingTargetId\n    ? // Reuse the existing target id if specified - which means the URL will\n      // replace the one in an existing preview window.\n      existingTargetId\n    : // Otherwise, create a new target id to open a new window.\n      'GDevelopPreview' + nextPreviewWindowId++;\n\n  const previewWindow = window.open(\n    url,\n    targetId,\n    `width=${width},height=${height},left=${left},top=${top}`\n  );\n\n  return { previewWindow, targetId };\n};\n\nexport default class BrowserS3PreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => false;\n  canDoHotReload = () => false;\n\n  state = {\n    previewLinkDialog: null,\n    error: null,\n  };\n\n  _prepareExporter = (): Promise<any> => {\n    return findGDJS('preview').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const prefix = makeTimestampedId();\n\n      const outputDir = getBaseUrl() + prefix;\n      const browserS3FileSystem = new BrowserS3FileSystem({\n        filesContent,\n        bucketBaseUrl: getBaseUrl(),\n        prefix,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        browserS3FileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      exporter.setCodeOutputDirectory(outputDir);\n\n      return {\n        exporter,\n        outputDir,\n        browserS3FileSystem,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n    this.setState({\n      error: null,\n    });\n\n    return this.getPreviewDebuggerServer()\n      .startServer()\n      .catch(err => {\n        // Ignore any error when running the debugger server - the preview\n        // can still work without it.\n        console.error(\n          'Unable to start the Debugger Server for the preview:',\n          err\n        );\n      })\n      .then(() => this._prepareExporter())\n      .then(({ exporter, outputDir, browserS3FileSystem }) => {\n        const previewExportOptions = new gd.PreviewExportOptions(\n          project,\n          outputDir\n        );\n        previewExportOptions.setLayoutName(layout.getName());\n        previewExportOptions.setIsDevelopmentEnvironment(Window.isDev());\n        if (externalLayout) {\n          previewExportOptions.setExternalLayoutName(externalLayout.getName());\n        }\n\n        previewExportOptions.useWindowMessageDebuggerClient();\n\n        const debuggerIds = this.getPreviewDebuggerServer().getExistingDebuggerIds();\n        const lastDebuggerId = debuggerIds.length\n          ? debuggerIds[debuggerIds.length - 1]\n          : null;\n        const shouldHotReload =\n          previewOptions.hotReload && lastDebuggerId !== null;\n\n        // Scripts generated from extensions keep the same URL even after being modified.\n        // Use a cache bursting parameter to force the browser to reload them.\n        previewExportOptions.setNonRuntimeScriptsCacheBurst(Date.now());\n\n        previewExportOptions.setFullLoadingScreen(\n          previewOptions.fullLoadingScreen\n        );\n\n        exporter.exportProjectForPixiPreview(previewExportOptions);\n        previewExportOptions.delete();\n        exporter.delete();\n        return browserS3FileSystem.uploadPendingObjects().then(() => {\n          const url = outputDir + '/index.html';\n          const { previewWindow, targetId } = openPreviewWindow(\n            project,\n            url,\n            // We abuse the \"hot reload\" to choose if we open a new window or replace\n            // the content of an existing one. But hot reload is NOT implemented (yet -\n            // it would need to generate the preview in the same place and trigger a reload\n            // of the scripts).\n            shouldHotReload\n              ? getExistingTargetIdForDebuggerId(lastDebuggerId)\n              : null // Open a new window with a new target id.\n          );\n\n          if (!previewWindow) {\n            this.setState({\n              previewLinkDialog: {\n                project,\n                url,\n              },\n            });\n          } else {\n            registerPreviewWindow({\n              previewWindow,\n              targetId,\n            });\n          }\n        });\n      })\n      .catch((error: Error) => {\n        this.setState({\n          error,\n        });\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    return browserPreviewDebuggerServer;\n  }\n\n  render() {\n    const { previewLinkDialog, error } = this.state;\n\n    if (error) {\n      return (\n        <BrowserPreviewErrorDialog\n          error={error}\n          onClose={() =>\n            this.setState({\n              error: null,\n            })\n          }\n        />\n      );\n    }\n\n    if (previewLinkDialog) {\n      return (\n        <BrowserPreviewLinkDialog\n          url={previewLinkDialog.url}\n          project={previewLinkDialog.project}\n          onPreviewWindowOpened={({ previewWindow, targetId }) => {\n            registerPreviewWindow({\n              previewWindow,\n              targetId,\n            });\n          }}\n          onClose={() =>\n            this.setState({\n              previewLinkDialog: null,\n            })\n          }\n        />\n      );\n    }\n\n    return null;\n  }\n}\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { type I18n as I18nType } from '@lingui/core';\n\nimport React, { Component } from 'react';\nimport Dialog, { DialogPrimaryButton } from '../../../UI/Dialog';\nimport { showErrorBox } from '../../../UI/Messages/MessageBox';\nimport { Column, Line } from '../../../UI/Grid';\nimport Text from '../../../UI/Text';\nimport { openPreviewWindow } from '.';\n\ntype Props = {|\n  project: gdProject,\n  url: string,\n  onPreviewWindowOpened: any => void,\n  onClose: () => void,\n|};\n\nexport default class BrowserPreviewLinkDialog extends Component<Props> {\n  _makeOnOpen = (i18n: I18nType) => () => {\n    const { previewWindow, targetId } = openPreviewWindow(\n      this.props.project,\n      this.props.url,\n      null // No existing target id: always open a new window.\n    );\n    if (!{ previewWindow, targetId }) {\n      showErrorBox({\n        message: i18n._(\n          t`Unable to open the preview! Be sure that popup are allowed for this website.`\n        ),\n        rawError: undefined,\n        errorId: 'preview-popup-disallowed',\n      });\n    } else {\n      this.props.onPreviewWindowOpened({ previewWindow, targetId });\n    }\n    this.props.onClose();\n  };\n\n  render() {\n    const { url } = this.props;\n    if (!url) return null;\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Dialog\n            actions={[\n              <DialogPrimaryButton\n                key=\"launch-preview\"\n                label={<Trans>Launch the preview</Trans>}\n                primary\n                onClick={this._makeOnOpen(i18n)}\n              />,\n            ]}\n            onRequestClose={this.props.onClose}\n            onApply={this._makeOnOpen(i18n)}\n            open\n          >\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>\n                    Your preview is ready! Click on the button to launch the\n                    preview.\n                  </Trans>\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>\n                    To skip this dialog and{' '}\n                    <b>directly open the preview next time</b>, please allow\n                    popups to be opened for this website in your browser.\n                  </Trans>\n                </Text>\n              </Column>\n            </Line>\n          </Dialog>\n        )}\n      </I18n>\n    );\n  }\n}\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport React, { Component } from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport { Column, Line } from '../../../UI/Grid';\nimport Text from '../../../UI/Text';\n\ntype Props = {|\n  error: Error,\n  onClose: () => void,\n|};\n\nexport default class BrowserPreviewErrorDialog extends Component<Props> {\n  render() {\n    const { error, onClose } = this.props;\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Dialog\n            actions={[\n              <FlatButton\n                key=\"close\"\n                label={<Trans>Close</Trans>}\n                onClick={onClose}\n              />,\n            ]}\n            title={<Trans>Could not launch the preview</Trans>}\n            onRequestClose={onClose}\n            open\n          >\n            <Line>\n              <Column>\n                <Text>\n                  {// $FlowFixMe - AWS returned errors can have extra fields\n                  error.code === 'NetworkingError' ? (\n                    <Trans>\n                      The preview could not be launched because you're offline.\n                    </Trans>\n                  ) : (\n                    <Trans>\n                      The preview could not be launched because an error\n                      happened: {error.message}.\n                    </Trans>\n                  )}\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>\n                    Make sure you're online, have a proper internet connection\n                    and try again. If you download and use GDevelop desktop\n                    application, you can also run previews without any internet\n                    connection.\n                  </Trans>\n                </Text>\n              </Column>\n            </Line>\n          </Dialog>\n        )}\n      </I18n>\n    );\n  }\n}\n","// @flow\nimport path from 'path';\nimport { uploadObject } from '../../Utils/GDevelopServices/Preview';\nconst gd: libGDevelop = global.gd;\n\nexport type TextFileDescriptor = {|\n  filePath: string,\n  text: string,\n|};\n\ntype PendingUploadFileDescriptor = {|\n  Key: string,\n  Body: string,\n  ContentType: 'text/javascript' | 'text/html',\n|};\n\ntype ConstructorArgs = {|\n  filesContent: Array<TextFileDescriptor>,\n  prefix: string,\n  bucketBaseUrl: string,\n|};\n\nconst isURL = (filename: string) => {\n  return (\n    filename.startsWith('http://') ||\n    filename.startsWith('https://') ||\n    filename.startsWith('ftp://') ||\n    filename.startsWith('blob:') ||\n    filename.startsWith('data:')\n  );\n};\n\n/**\n * An in-memory \"file system\" that can be used for GDevelop previews.\n */\nexport default class BrowserS3FileSystem {\n  prefix: string;\n  bucketBaseUrl: string;\n\n  // Store the content of some files.\n  _indexedFilesContent: { [string]: TextFileDescriptor };\n\n  // Store all the objects that should be written on the S3 bucket.\n  // Call uploadPendingObjects to send them\n  _pendingUploadObjects: Array<PendingUploadFileDescriptor> = [];\n\n  // Store a set of all external URLs copied so that we can simulate\n  // readDir result.\n  _allCopiedExternalUrls = new Set<string>();\n\n  constructor({ filesContent, prefix, bucketBaseUrl }: ConstructorArgs) {\n    this.prefix = prefix;\n    this.bucketBaseUrl = bucketBaseUrl;\n\n    this._indexedFilesContent = {};\n    filesContent.forEach(textFileDescriptor => {\n      this._indexedFilesContent[\n        textFileDescriptor.filePath\n      ] = textFileDescriptor;\n    });\n  }\n\n  uploadPendingObjects = () => {\n    return Promise.all(this._pendingUploadObjects.map(uploadObject)).then(\n      result => {\n        console.log('Uploaded all objects:', result);\n        this._pendingUploadObjects = [];\n      },\n      error => {\n        console.error(\"Can't upload all objects:\", error);\n        throw error;\n      }\n    );\n  };\n\n  mkDir = (path: string) => {\n    // Assume required directories always exist.\n  };\n  dirExists = (path: string) => {\n    // Assume required directories always exist.\n    return true;\n  };\n  clearDir = (path: string) => {\n    // Assume path is cleared.\n  };\n  getTempDir = () => {\n    return '/virtual-unused-tmp-dir';\n  };\n  fileNameFrom = (fullpath: string) => {\n    if (isURL(fullpath)) return fullpath;\n\n    return path.basename(fullpath);\n  };\n  dirNameFrom = (fullpath: string) => {\n    if (isURL(fullpath)) return '';\n\n    return path.dirname(fullpath);\n  };\n  makeAbsolute = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path.resolve(baseDirectory, path.normalize(filename));\n  };\n  makeRelative = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    return path.relative(baseDirectory, path.normalize(filename));\n  };\n  isAbsolute = (fullpath: string) => {\n    if (isURL(fullpath)) return true;\n\n    if (fullpath.length === 0) return true;\n    return (\n      (fullpath.length > 0 && fullpath.charAt(0) === '/') ||\n      (fullpath.length > 1 && fullpath.charAt(1) === ':')\n    );\n  };\n  copyFile = (source: string, dest: string) => {\n    //URL are not copied.\n    if (isURL(source)) {\n      this._allCopiedExternalUrls.add(source);\n      return true;\n    }\n\n    console.warn('Copy not done from', source, 'to', dest);\n    return true;\n  };\n  writeToFile = (fullPath: string, contents: string) => {\n    const key = fullPath.replace(this.bucketBaseUrl, '');\n    const mime = {\n      '.js': 'text/javascript',\n      '.html': 'text/html',\n    };\n    const fileExtension = path.extname(fullPath);\n\n    // Defer real upload until it's triggered by calling\n    // uploadPendingObjects.\n    this._pendingUploadObjects.push({\n      Key: key,\n      Body: contents,\n      ContentType: mime[fileExtension],\n    });\n    return true;\n  };\n\n  readFile = (file: string) => {\n    if (!!this._indexedFilesContent[file])\n      return this._indexedFilesContent[file].text;\n\n    console.error(`Unknown file ${file}, returning an empty string`);\n    return '';\n  };\n\n  readDir = (path: string, ext: string) => {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n\n    // Simulate ReadDir by returning all external URLs\n    // with the filename matching the extension.\n    this._allCopiedExternalUrls.forEach(url => {\n      const upperCaseUrl = url.toUpperCase();\n      if (upperCaseUrl.indexOf(ext) === upperCaseUrl.length - ext.length) {\n        output.push_back(url);\n      }\n    });\n\n    return output;\n  };\n\n  fileExists = (filename: string) => {\n    if (isURL(filename)) return true;\n\n    // Assume all files asked for exists.\n    return true;\n  };\n}\n","// @flow\nimport {\n  type PreviewDebuggerServerCallbacks,\n  type PreviewDebuggerServer,\n  type DebuggerId,\n} from '../../PreviewLauncher.flow';\n\nlet debuggerServerState: 'started' | 'stopped' = 'stopped';\nconst callbacksList: Array<PreviewDebuggerServerCallbacks> = [];\n\nlet nextDebuggerId = 0;\n\nconst previewWindowAndTargetIds: {\n  [DebuggerId]: { previewWindow: any, targetId: string },\n} = {};\n\nconst getExistingDebuggerIds = () =>\n  Object.keys(previewWindowAndTargetIds).map(key => Number(key));\n\nconst getDebuggerIdForPreviewWindow = (previewWindow: any) => {\n  for (const key in previewWindowAndTargetIds) {\n    const id = Number(key);\n    if (previewWindowAndTargetIds[id].previewWindow === previewWindow) {\n      return id;\n    }\n  }\n  return null;\n};\n\nlet windowClosedPollingIntervalId = null;\n\n/**\n * Listen to window closing so that we can notify the debuggers\n * when a preview window is closed.\n * Polling seems the only option to do so.\n */\nconst setupWindowClosedPolling = () => {\n  if (windowClosedPollingIntervalId !== null) return;\n\n  windowClosedPollingIntervalId = setInterval(() => {\n    for (const key in previewWindowAndTargetIds) {\n      const id = Number(key);\n      const { previewWindow } = previewWindowAndTargetIds[id];\n      if (previewWindow.closed) {\n        console.info('A preview window was closed, with debugger id:', id);\n        delete previewWindowAndTargetIds[id];\n        callbacksList.forEach(({ onConnectionClosed }) =>\n          onConnectionClosed({\n            id,\n            debuggerIds: getExistingDebuggerIds(),\n          })\n        );\n        if (!Object.keys(previewWindowAndTargetIds).length) {\n          clearInterval(windowClosedPollingIntervalId);\n          windowClosedPollingIntervalId = null;\n        }\n      }\n    }\n  }, 1000);\n};\n\nconst PREVIEWS_ORIGIN = 'https://game-previews.gdevelop.io';\n\n/**\n * A debugger server implemented using the ability to send/receive messages\n * from popup windows in the browser.\n */\nexport const browserPreviewDebuggerServer: PreviewDebuggerServer = {\n  startServer: async () => {\n    if (debuggerServerState === 'started') return;\n    debuggerServerState = 'started';\n\n    window.addEventListener('message', event => {\n      if (event.origin !== PREVIEWS_ORIGIN) return;\n\n      const id = getDebuggerIdForPreviewWindow(event.source);\n      if (id === null) return; // Could not find the id of this preview window.\n\n      try {\n        const parsedMessage = JSON.parse(event.data);\n        callbacksList.forEach(({ onHandleParsedMessage }) =>\n          onHandleParsedMessage({ id, parsedMessage })\n        );\n      } catch (error) {\n        console.error(\n          'Error while parsing messages coming from a preview:',\n          error\n        );\n      }\n    });\n\n    setupWindowClosedPolling();\n\n    callbacksList.forEach(({ onServerStateChanged }) => onServerStateChanged());\n  },\n  sendMessage: (id: DebuggerId, message: Object) => {\n    const { previewWindow } = previewWindowAndTargetIds[id];\n    if (!previewWindow) return;\n\n    try {\n      previewWindow.postMessage(message, PREVIEWS_ORIGIN);\n    } catch (error) {\n      console.error('Unable to send a message to the preview window:', error);\n    }\n  },\n  getServerState: () => debuggerServerState,\n  getExistingDebuggerIds,\n  registerCallbacks: (callbacks: PreviewDebuggerServerCallbacks) => {\n    callbacksList.push(callbacks);\n\n    return () => {\n      const callbacksIndex = callbacksList.indexOf(callbacks);\n      if (callbacksIndex !== -1) callbacksList.splice(callbacksIndex, 1);\n    };\n  },\n};\n\nexport const registerPreviewWindow = ({\n  previewWindow,\n  targetId,\n}: {|\n  previewWindow: any,\n  targetId: string,\n|}) => {\n  const id = nextDebuggerId++;\n  const sameWindowExistingId = getDebuggerIdForPreviewWindow(previewWindow);\n  if (sameWindowExistingId !== null) {\n    // This window is already associated to a debugger id. This is surely\n    // because a new preview was launched in an existing window, replacing the old one.\n    // So we replace the existing debugger id.\n    delete previewWindowAndTargetIds[sameWindowExistingId];\n  }\n\n  previewWindowAndTargetIds[id] = { previewWindow, targetId };\n\n  setupWindowClosedPolling();\n\n  callbacksList.forEach(({ onConnectionOpened }) =>\n    onConnectionOpened({\n      id,\n      debuggerIds: getExistingDebuggerIds(),\n    })\n  );\n};\n\nexport const getExistingTargetIdForDebuggerId = (id: ?DebuggerId): ?string => {\n  if (id == null) return null;\n\n  const previewWindowAndTargetId = previewWindowAndTargetIds[id];\n  if (previewWindowAndTargetId) return previewWindowAndTargetId.targetId;\n\n  return null;\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadBlobFile } from './BrowserFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlFilesToBlobFiles,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineCordovaExport';\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-online-cordova',\n  onlineBuildType: 'cordova-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => ({\n    targets: ['androidApk'],\n    keystore: 'new',\n    signingDialogOpen: false,\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '',\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Packaging for Android</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('cordova').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlFilesToBlobFiles({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    blobFile: Blob\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadBlobFile(\n        blobFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      exportState.keystore,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadBlobFile } from './BrowserFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlFilesToBlobFiles,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineElectronExport';\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-online-electron',\n  onlineBuildType: 'electron-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    !!exportState.targets.length && (errored || exportStep === ''),\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('electron').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlFilesToBlobFiles({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    blobFile: Blob\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadBlobFile(\n        blobFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadBlobFile } from './BrowserFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlFilesToBlobFiles,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  OnlineGameLink,\n} from '../GenericExporters/OnlineWebExport';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-online-web',\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  // Build can be launched if just opened the dialog or build errored, re-enabled when done.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '' || exportStep === 'done',\n\n  // Navigation is enabled when the build is errored or if the build is not done.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored && !['', 'done'].includes(exportStep),\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Generate link</Trans>,\n\n  renderCustomStepsProgress: ({\n    build,\n    project,\n    onSaveProject,\n    errored,\n    exportStep,\n  }) => (\n    <OnlineGameLink\n      build={build}\n      project={project}\n      onSaveProject={onSaveProject}\n      errored={errored}\n      exportStep={exportStep}\n    />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('web').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlFilesToBlobFiles({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n      sizeLimit: 250 * 1000 * 1000,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    blobFile: Blob\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadBlobFile(\n        blobFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlFilesToBlobFiles,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport {\n  BlobDownloadUrlHolder,\n  openBlobDownloadUrl,\n} from '../../Utils/BlobDownloadUrlHolder';\nimport { ExplanationHeader, DoneFooter } from '../GenericExporters/HTML5Export';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-html5',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Export as a HTML5 game</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('web').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlFilesToBlobFiles({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                fullWidth\n                primary\n                onClick={() => openBlobDownloadUrl(blobDownloadUrl, 'game.zip')}\n                label={<Trans>Download the exported game</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlFilesToBlobFiles,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport {\n  BlobDownloadUrlHolder,\n  openBlobDownloadUrl,\n} from '../../Utils/BlobDownloadUrlHolder';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/CordovaExport';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-cordova',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('cordova').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlFilesToBlobFiles({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                fullWidth\n                primary\n                onClick={() => openBlobDownloadUrl(blobDownloadUrl, 'game.zip')}\n                label={<Trans>Download the exported game</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlFilesToBlobFiles,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport {\n  BlobDownloadUrlHolder,\n  openBlobDownloadUrl,\n} from '../../Utils/BlobDownloadUrlHolder';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/ElectronExport';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-electron',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('electron').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlFilesToBlobFiles({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                fullWidth\n                primary\n                onClick={() => openBlobDownloadUrl(blobDownloadUrl, 'game.zip')}\n                label={<Trans>Download the exported game</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlFilesToBlobFiles,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport {\n  BlobDownloadUrlHolder,\n  openBlobDownloadUrl,\n} from '../../Utils/BlobDownloadUrlHolder';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/FacebookInstantGamesExport';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-facebook-instant-games',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('facebook-instant-games').then(\n      ({ gdjsRoot, filesContent }) => {\n        console.info('GDJS found in ', gdjsRoot);\n\n        const outputDir = '/export/';\n        const abstractFileSystem = new BrowserFileSystem({\n          textFiles: filesContent,\n        });\n        // TODO: Memory leak? Check for other exporters too.\n        const fileSystem = assignIn(\n          new gd.AbstractFileSystemJS(),\n          abstractFileSystem\n        );\n        const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n        return {\n          exporter,\n          outputDir,\n          abstractFileSystem,\n        };\n      }\n    );\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForFacebookInstantGames', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlFilesToBlobFiles({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                primary\n                onClick={() =>\n                  openBlobDownloadUrl(blobDownloadUrl, 'fb-instant-game.zip')\n                }\n                label={<Trans>Download the Instant Game archive</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport {\n  type JsExtensionsLoader,\n  type ExtensionLoadingResult,\n  type TranslationFunction,\n  loadExtension,\n} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\nconst gd: libGDevelop = global.gd;\n\n// The list of \"JsExtension.js\" files to be bundled in the webapp, keyed by their extension name.\nconst jsExtensions = [\n  {\n    name: 'AdMob',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/AdMob/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'AdvancedWindow',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/AdvancedWindow/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'FacebookInstantGames',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/FacebookInstantGames/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'DeviceSensors',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/DeviceSensors/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'DeviceVibration',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/DeviceVibration/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'DebuggerTools',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/DebuggerTools/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Physics2',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Physics2Behavior/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'ExampleJsExtension',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/ExampleJsExtension/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Tween',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/TweenBehavior/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Video',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Video/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'FileSystem',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/FileSystem/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Firebase',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Firebase/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Leaderboards',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Leaderboards/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'PlayerAuthentication',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/PlayerAuthentication/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'DialogueTree',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/DialogueTree/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'BBText',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/BBText/JsExtension.js'),\n    objectsRenderingServiceModules: {\n      // $FlowExpectedError - this path is ignored for Flow.\n      'pixi-multistyle-text/dist/pixi-multistyle-text.umd': require('GDJS-for-web-app-only/Runtime/Extensions/BBText/pixi-multistyle-text/dist/pixi-multistyle-text.umd'),\n    },\n  },\n  {\n    name: 'TileMap',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/JsExtension.js'),\n    objectsRenderingServiceModules: {\n      // $FlowExpectedError - this path is ignored for Flow.\n      'pixi-tilemap/dist/pixi-tilemap.umd': require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/pixi-tilemap/dist/pixi-tilemap.umd'),\n      // $FlowExpectedError - this path is ignored for Flow.\n      'helper/TileMapHelper': require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/helper/TileMapHelper.js'),\n      // $FlowExpectedError - this path is ignored for Flow.\n      'pako/dist/pako.min': require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/pako/dist/pako.min'),\n    },\n  },\n  {\n    name: 'Effects',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Effects/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'P2P',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/P2P/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Lighting',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Lighting/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'SpatialSound',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/SpatialSound/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'BitmapText',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/BitmapText/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Screenshot',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Screenshot/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'TextInput',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/TextInput/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n];\n\ntype MakeExtensionsLoaderArguments = {|\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n|};\n\n/**\n * Loader that load all JS extensions required in this file.\n * Extensions are usually auto-discovered when declared in Extensions/xxx/JsExtension.js, but not\n * for the web-app where everything must be bundled.\n */\nexport default function makeExtensionsLoader({\n  objectsEditorService,\n  objectsRenderingService,\n  filterExamples,\n}: MakeExtensionsLoaderArguments): JsExtensionsLoader {\n  return {\n    loadAllExtensions(\n      _: TranslationFunction\n    ): Promise<\n      Array<{ extensionModulePath: string, result: ExtensionLoadingResult }>\n    > {\n      return Promise.resolve(\n        jsExtensions\n          .filter(({ name }) => !filterExamples || !name.includes('Example'))\n          .map(({ name, extensionModule, objectsRenderingServiceModules }) => {\n            // Load any editor for objects, if we have somewhere where\n            // to register them.\n            if (\n              objectsEditorService &&\n              extensionModule.registerEditorConfigurations\n            ) {\n              extensionModule.registerEditorConfigurations(\n                objectsEditorService\n              );\n            }\n\n            // Register modules for ObjectsRenderingService\n            if (objectsRenderingService && objectsRenderingServiceModules) {\n              for (let requirePath in objectsRenderingServiceModules) {\n                objectsRenderingService.registerModule(\n                  requirePath,\n                  objectsRenderingServiceModules[requirePath]\n                );\n              }\n            }\n\n            // Load any renderer for objects, if we have somewhere where\n            // to register them.\n            if (\n              objectsRenderingService &&\n              extensionModule.registerInstanceRenderers\n            ) {\n              extensionModule.registerInstanceRenderers(\n                objectsRenderingService\n              );\n            }\n\n            return {\n              extensionModulePath: 'internal-extension://' + name,\n              result: loadExtension(\n                _,\n                gd,\n                gd.JsPlatform.get(),\n                extensionModule\n              ),\n            };\n          })\n      );\n    },\n  };\n}\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props}>\n    <path d=\"M7.71,3.5L1.15,15L4.58,21L11.13,9.5M9.73,15L6.3,21H19.42L22.85,15M22.28,14L15.42,2H8.58L8.57,2L15.43,14H22.28Z\" />\n  </SvgIcon>\n));\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport Dialog from '../../UI/Dialog';\nimport FlatButton from '../../UI/FlatButton';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Line } from '../../UI/Grid';\nimport { ColumnStackLayout } from '../../UI/Layout';\nimport Window from '../../Utils/Window';\nimport {\n  BlobDownloadUrlHolder,\n  openBlobDownloadUrl,\n} from '../../Utils/BlobDownloadUrlHolder';\nimport PlaceholderLoader from '../../UI/PlaceholderLoader';\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport { showErrorBox } from '../../UI/Messages/MessageBox';\nimport Text from '../../UI/Text';\nimport {\n  downloadUrlsToBlobs,\n  type ItemResult,\n} from '../../Utils/BlobDownloader';\nimport { useGenericRetryableProcessWithProgress } from '../../Utils/UseGenericRetryableProcessWithProgress';\nimport { checkIfIsGDevelopCloudBucketUrl } from '../../Utils/CrossOrigin';\nimport { extractFilenameFromProjectResourceUrl } from '../../Utils/GDevelopServices/Project';\nimport {\n  archiveFiles,\n  type BlobFileDescriptor,\n  type TextFileDescriptor,\n} from '../../Utils/BrowserArchiver';\nimport path from 'path';\nimport newNameGenerator from '../../Utils/NewNameGenerator';\nconst gd: libGDevelop = global.gd;\n\nconst PROJECT_JSON_FILENAME = 'game.json';\n\n// For some reason, `path.posix` is undefined when packaged\n// with webpack, so we're using `path` directly. As it's for the web-app,\n// it should always be the posix version. In tests on Windows,\n// it's necessary to use path.posix.\n// Search for \"pathPosix\" in the codebase for other places where this is used.\nconst pathPosix = path.posix || path;\n\nconst isURL = (filename: string) => {\n  return (\n    filename.startsWith('http://') ||\n    filename.startsWith('https://') ||\n    filename.startsWith('ftp://') ||\n    filename.startsWith('blob:') ||\n    filename.startsWith('data:')\n  );\n};\n\ntype DownloadResourcesAsBlobsOptionsWithoutProgress = {\n  project: gdProject,\n  onAddBlobFile: (blobFileDescriptor: BlobFileDescriptor) => void,\n};\n\ntype DownloadResourcesAsBlobsOptions = {\n  ...DownloadResourcesAsBlobsOptionsWithoutProgress,\n  onProgress: (count: number, total: number) => void,\n};\n\nexport const downloadResourcesAsBlobs = async ({\n  project,\n  onAddBlobFile,\n  onProgress,\n}: DownloadResourcesAsBlobsOptions) => {\n  const result = {\n    erroredResources: [],\n  };\n\n  type ResourceToFetch = {|\n    resource: gdResource,\n    url: string,\n    filename: string,\n  |};\n\n  const getResourcesToFetch = (project: gdProject): Array<ResourceToFetch> => {\n    const resourcesManager = project.getResourcesManager();\n    const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n    return allResourceNames\n      .map(\n        (resourceName: string): ?ResourceToFetch => {\n          const resource = resourcesManager.getResource(resourceName);\n          const resourceFile = resource.getFile();\n\n          if (isURL(resourceFile)) {\n            if (checkIfIsGDevelopCloudBucketUrl(resourceFile)) {\n              return {\n                resource,\n                url: resourceFile,\n                filename: extractFilenameFromProjectResourceUrl(resourceFile),\n              };\n            } else {\n              // Public URL resource: nothing to do.\n              return null;\n            }\n          } else {\n            // Local resource: unsupported.\n            result.erroredResources.push({\n              resourceName: resource.getName(),\n              error: new Error(\n                'Unsupported relative file when downloading a copy.'\n              ),\n            });\n            return null;\n          }\n        }\n      )\n      .filter(Boolean);\n  };\n\n  const resourcesToFetchAndUpload = getResourcesToFetch(project);\n\n  // Download all the project resources as blob (much like what is done during an export).\n  const downloadedBlobsAndResources: Array<\n    ItemResult<ResourceToFetch>\n  > = await downloadUrlsToBlobs({\n    urlContainers: resourcesToFetchAndUpload,\n    onProgress: (count, total) => {\n      onProgress(count, total * 2);\n    },\n  });\n\n  const alreadyUsedFilenames = new Set([PROJECT_JSON_FILENAME]);\n\n  downloadedBlobsAndResources.forEach(({ item, error, blob }) => {\n    const { resource, filename } = item;\n    if (error || !blob) {\n      result.erroredResources.push({\n        resourceName: resource.getName(),\n        error: error || new Error('Unknown error during download.'),\n      });\n      return;\n    }\n\n    // Ensure each filename is unique, and sort resources in folder by types.\n    const extension = pathPosix.extname(filename);\n    const basename = pathPosix.basename(filename, extension);\n    const pathPrefix = 'assets/' + resource.getKind();\n    const newBasename = newNameGenerator(basename, tentativeBasename =>\n      alreadyUsedFilenames.has(\n        pathPosix.join(pathPrefix, tentativeBasename + extension)\n      )\n    );\n    const newResourcePath = pathPosix.join(pathPrefix, newBasename + extension);\n    alreadyUsedFilenames.add(newResourcePath);\n\n    resource.setFile(newResourcePath);\n    onAddBlobFile({ blob, filePath: newResourcePath });\n  });\n\n  return result;\n};\n\ntype Props = {|\n  project: gdProject,\n  onDone: () => void,\n|};\n\nexport default function DownloadFileSaveAsDialog({ project, onDone }: Props) {\n  const [zippedProjectBlob, setZippedProjectBlob] = React.useState<?Blob>(null);\n  const {\n    ensureProcessIsDone,\n    renderProcessDialog,\n  } = useGenericRetryableProcessWithProgress<DownloadResourcesAsBlobsOptionsWithoutProgress>(\n    {\n      onDoProcess: React.useCallback(\n        (options, onProgress) =>\n          downloadResourcesAsBlobs({ ...options, onProgress }),\n        []\n      ),\n    }\n  );\n  React.useEffect(\n    () => {\n      (async () => {\n        setZippedProjectBlob(null);\n        const newProject = gd.ProjectHelper.createNewGDJSProject();\n        try {\n          // Make a copy of the project, as it will be updated.\n          const serializedProject = new gd.SerializerElement();\n          project.serializeTo(serializedProject);\n          newProject.unserializeFrom(serializedProject);\n          serializedProject.delete();\n\n          // Download resources to blobs, and update the project resources.\n          const blobFiles: Array<BlobFileDescriptor> = [];\n          const textFiles: Array<TextFileDescriptor> = [];\n          await ensureProcessIsDone({\n            project: newProject,\n            onAddBlobFile: (blobFileDescriptor: BlobFileDescriptor) => {\n              blobFiles.push(blobFileDescriptor);\n            },\n          });\n\n          // Serialize the project.\n          textFiles.push({\n            text: JSON.stringify(serializeToJSObject(newProject)),\n            filePath: PROJECT_JSON_FILENAME,\n          });\n\n          // Archive the whole project.\n          const zippedProjectBlob = await archiveFiles({\n            textFiles,\n            blobFiles,\n            basePath: '/',\n            onProgress: (count: number, total: number) => {},\n          });\n          setZippedProjectBlob(zippedProjectBlob);\n        } catch (rawError) {\n          showErrorBox({\n            message:\n              'Unable to save your project because of an internal error.',\n            rawError,\n            errorId: 'download-file-save-as-dialog-error',\n          });\n          return;\n        } finally {\n          newProject.delete();\n        }\n      })();\n      return () => setZippedProjectBlob(null);\n    },\n    [project, ensureProcessIsDone]\n  );\n\n  return (\n    <Dialog\n      actions={[\n        <FlatButton\n          key=\"download\"\n          label={<Trans>Download GDevelop desktop version</Trans>}\n          primary={false}\n          onClick={() => Window.openExternalURL('http://gdevelop.io')}\n        />,\n        <FlatButton\n          key=\"close\"\n          label={<Trans>Close</Trans>}\n          primary={false}\n          onClick={onDone}\n        />,\n      ]}\n      onRequestClose={onDone}\n      open\n      maxWidth=\"sm\"\n      title={<Trans>Download a copy</Trans>}\n    >\n      <ColumnStackLayout noMargin>\n        <Text>\n          <Trans>\n            You can download the file of your game to continue working on it\n            using the full GDevelop version:\n          </Trans>\n        </Text>\n        <Line noMargin expand justifyContent=\"center\">\n          {zippedProjectBlob ? (\n            <BlobDownloadUrlHolder blob={zippedProjectBlob}>\n              {blobDownloadUrl => (\n                <RaisedButton\n                  primary\n                  onClick={() =>\n                    openBlobDownloadUrl(blobDownloadUrl, 'gdevelop-game.zip')\n                  }\n                  label={\n                    <Trans>Download the compressed game and resources</Trans>\n                  }\n                />\n              )}\n            </BlobDownloadUrlHolder>\n          ) : (\n            <PlaceholderLoader />\n          )}\n        </Line>\n      </ColumnStackLayout>\n      {renderProcessDialog()}\n    </Dialog>\n  );\n}\n","// @flow\nimport { t } from '@lingui/macro';\n\nimport UrlStorageProvider from '../../ProjectsStorage/UrlStorageProvider';\nimport { getExample } from '../../Utils/GDevelopServices/Example';\nimport { sendNewGameCreated } from '../../Utils/Analytics/EventSender';\nimport { showErrorBox } from '../../UI/Messages/MessageBox';\nimport {\n  type OnCreateBlankFunction,\n  type OnCreateFromExampleShortHeaderFunction,\n} from '../CreateProjectDialog';\n\nconst gd: libGDevelop = global.gd;\n\nexport const onCreateBlank: OnCreateBlankFunction = async ({\n  i18n,\n  settings,\n}) => {\n  sendNewGameCreated({ exampleUrl: '', exampleSlug: '' });\n\n  const { projectName } = settings;\n\n  const project = gd.ProjectHelper.createNewGDJSProject();\n  return {\n    source: {\n      project,\n      projectName,\n      storageProvider: null,\n      fileMetadata: null,\n    },\n    destination: null,\n  };\n};\n\nexport const onCreateFromExampleShortHeader: OnCreateFromExampleShortHeaderFunction = async ({\n  i18n,\n  exampleShortHeader,\n  settings,\n}) => {\n  try {\n    const { projectName } = settings;\n\n    const example = await getExample(exampleShortHeader);\n    sendNewGameCreated({\n      exampleUrl: example.projectFileUrl,\n      exampleSlug: exampleShortHeader.slug,\n    });\n    return {\n      source: {\n        project: null,\n        projectName,\n        storageProvider: UrlStorageProvider,\n        fileMetadata: {\n          fileIdentifier: example.projectFileUrl,\n        },\n      },\n      destination: null,\n    };\n  } catch (error) {\n    showErrorBox({\n      message:\n        i18n._(t`Unable to fetch the example.`) +\n        ' ' +\n        i18n._(t`Verify your internet connection or try again later.`),\n      rawError: error,\n      errorId: 'browser-example-load-error',\n    });\n    return;\n  }\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport TextField from '../../UI/TextField';\nimport { type GoogleDriveFileOrFolder } from '.';\n\ntype Props = {|\n  floatingLabelText: React.Node,\n  value: ?GoogleDriveFileOrFolder,\n  onOpenPicker: () => void,\n|};\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n    width: '100%',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\nconst GoogleDriveFileOrFolderPicker = (props: Props) => {\n  return (\n    <div\n      style={{\n        ...styles.container,\n      }}\n    >\n      <TextField\n        style={styles.textField}\n        floatingLabelText={props.floatingLabelText}\n        floatingLabelFixed\n        type=\"text\"\n        translatableHintText={t`Choose a file or folder`}\n        value={props.value ? props.value.name : ''}\n        onChange={() => {}}\n      />\n      <RaisedButton\n        label={<Trans>Choose...</Trans>}\n        primary\n        style={styles.button}\n        onClick={props.onOpenPicker}\n      />\n    </div>\n  );\n};\n\nexport default GoogleDriveFileOrFolderPicker;\n","// @flow\nimport { t } from '@lingui/macro';\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport Dialog, { DialogPrimaryButton } from '../../UI/Dialog';\nimport FlatButton from '../../UI/FlatButton';\nimport { Column, Line } from '../../UI/Grid';\nimport GoogleDriveFileOrFolderPicker from './GoogleDriveFileOrFolderPicker';\nimport {\n  type GoogleDriveFileOrFolder,\n  type GoogleDriveFilePickerOptions,\n} from '.';\nimport TextField from '../../UI/TextField';\nimport LeftLoader from '../../UI/LeftLoader';\nimport AlertMessage from '../../UI/AlertMessage';\n\ntype Props = {|\n  onCancel: () => void,\n  onSave: ({|\n    selectedFileOrFolder: GoogleDriveFileOrFolder,\n    newFileName: string,\n  |}) => Promise<void>,\n  onShowFilePicker: GoogleDriveFilePickerOptions => Promise<?GoogleDriveFileOrFolder>,\n|};\n\n/**\n * A \"Save as\" dialog for Google Drive, allowing to pick a file to overwrite or a folder\n * and a new filename where to save the game.\n */\nconst GoogleDriveSaveAsDialog = (props: Props) => {\n  const [selectedFileOrFolder, setSelectedFileOrFolder] = React.useState(\n    (null: ?GoogleDriveFileOrFolder)\n  );\n  const [newFileName, setNewFileName] = React.useState('');\n  const [saving, setSaving] = React.useState(false);\n  const [saveError, setSaveError] = React.useState((null: ?Error));\n  const [pickerError, setPickerError] = React.useState((null: ?Error));\n  const [dialogHidden, hideDialog] = React.useState(false);\n\n  const canSave = () => {\n    if (saving) return;\n    if (!selectedFileOrFolder) return;\n\n    return selectedFileOrFolder.type === 'FOLDER' ? !!newFileName : true;\n  };\n  const save = () => {\n    if (!canSave() || !selectedFileOrFolder) return;\n\n    setSaveError(null);\n    setSaving(true);\n    props\n      .onSave({\n        selectedFileOrFolder,\n        newFileName,\n      })\n      .catch(error => {\n        setSaveError(error);\n        setSaving(false);\n      });\n  };\n  const canCancel = () => !saving;\n  const cancel = () => {\n    if (!canCancel()) return;\n\n    props.onCancel();\n  };\n  const openPicker = () => {\n    hideDialog(true);\n    setPickerError(null);\n    props\n      .onShowFilePicker({ selectFolderEnabled: true, showUploadView: false })\n      .then(selectedFileOrFolder => {\n        setSelectedFileOrFolder(selectedFileOrFolder);\n        hideDialog(false);\n      })\n      .catch(error => {\n        setPickerError(error);\n        hideDialog(false);\n      });\n  };\n\n  // Hide the dialog while the picker is opened, as it does not play nice with material-ui's\n  // Dialog.\n  if (dialogHidden) {\n    return null;\n  }\n\n  return (\n    <Dialog\n      title={<Trans>Save on Google Drive</Trans>}\n      actions={[\n        <FlatButton\n          key=\"cancel\"\n          label={<Trans>Cancel</Trans>}\n          primary={false}\n          disabled={!canCancel()}\n          onClick={props.onCancel}\n        />,\n        <LeftLoader key=\"save\" isLoading={saving}>\n          <DialogPrimaryButton\n            label={<Trans>Save</Trans>}\n            primary\n            disabled={!canSave()}\n            onClick={save}\n          />\n        </LeftLoader>,\n      ]}\n      cannotBeDismissed={saving}\n      onRequestClose={cancel}\n      onApply={save}\n      open\n      maxWidth=\"sm\"\n    >\n      <Column noMargin>\n        <Line>\n          <GoogleDriveFileOrFolderPicker\n            floatingLabelText={\n              <Trans>Google Drive folder or existing file to overwrite</Trans>\n            }\n            value={selectedFileOrFolder}\n            onOpenPicker={openPicker}\n          />\n        </Line>\n        <Line>\n          {selectedFileOrFolder && selectedFileOrFolder.type === 'FOLDER' ? (\n            <TextField\n              floatingLabelText={<Trans>New file name</Trans>}\n              floatingLabelFixed\n              type=\"text\"\n              translatableHintText={t`YourGame.json`}\n              value={newFileName}\n              onChange={(event, newFileName) => setNewFileName(newFileName)}\n              fullWidth\n            />\n          ) : null}\n        </Line>\n        {saveError && (\n          <Line>\n            <AlertMessage kind=\"error\">\n              There was an error when saving your game. Verify that you have the\n              rights on the folder or file that you selected and try again.\n            </AlertMessage>\n          </Line>\n        )}\n        {pickerError && (\n          <Line>\n            <AlertMessage kind=\"error\">\n              There was an error when selecting a file or folder from Google\n              Drive. Try again later or verify that you are properly connected\n              to Google Drive.\n            </AlertMessage>\n          </Line>\n        )}\n      </Column>\n    </Dialog>\n  );\n};\n\nexport default GoogleDriveSaveAsDialog;\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { type ChooseResourceOptions } from './ResourceSource';\nimport AuthenticatedUserContext from '../Profile/AuthenticatedUserContext';\nimport AlertMessage from '../UI/AlertMessage';\nimport { ColumnStackLayout, LineStackLayout } from '../UI/Layout';\nimport RaisedButton from '../UI/RaisedButton';\nimport {\n  type UploadedProjectResourceFiles,\n  uploadProjectResourceFiles,\n  PROJECT_RESOURCE_MAX_SIZE_IN_BYTES,\n} from '../Utils/GDevelopServices/Project';\nimport { showErrorBox } from '../UI/Messages/MessageBox';\nimport { type StorageProvider, type FileMetadata } from '../ProjectsStorage';\nimport { Line, Column } from '../UI/Grid';\nimport LinearProgress from '../UI/LinearProgress';\n\nconst styles = { fileInput: {} };\n\ntype FileToCloudProjectResourceUploaderProps = {\n  options: ChooseResourceOptions,\n  fileMetadata: ?FileMetadata,\n  getStorageProvider: () => StorageProvider,\n  onChooseResources: (resources: Array<gdResource>) => void,\n  createNewResource: () => gdResource,\n};\n\nconst resourceKindToInputAcceptedFiles = {\n  audio: 'audio/aac,audio/x-wav,audio/mpeg,audio/mp3,audio/ogg',\n  image: 'image/jpeg,image/png,image/webp',\n  font: 'font/ttf,font/otf',\n  video: 'video/mp4,video/webm',\n  json: 'application/json',\n  bitmapFont: '.fnt,.xml',\n};\n\nexport const FileToCloudProjectResourceUploader = ({\n  options,\n  fileMetadata,\n  getStorageProvider,\n  onChooseResources,\n  createNewResource,\n}: FileToCloudProjectResourceUploaderProps) => {\n  const inputRef = React.useRef<?HTMLInputElement>(null);\n  const authenticatedUser = React.useContext(AuthenticatedUserContext);\n  const [isUploading, setIsUploading] = React.useState(false);\n  const [selectedFiles, setSelectedFiles] = React.useState<File[]>([]);\n  const hasSelectedFiles = selectedFiles.length > 0;\n  const storageProvider = React.useMemo(getStorageProvider, [\n    getStorageProvider,\n  ]);\n  const cloudProjectId = fileMetadata ? fileMetadata.fileIdentifier : null;\n  const [uploadProgress, setUploadProgress] = React.useState(0);\n  const onUpload = React.useCallback(\n    async () => {\n      const input = inputRef.current;\n      if (!input) return;\n      if (!cloudProjectId) return;\n\n      try {\n        setIsUploading(true);\n        setUploadProgress(0);\n        const results: UploadedProjectResourceFiles = await uploadProjectResourceFiles(\n          authenticatedUser,\n          cloudProjectId,\n          selectedFiles,\n          (current: number, total: number) => {\n            setUploadProgress((current / total) * 100);\n          }\n        );\n        const erroredResults = results.filter(({ error }) => !!error);\n        const okResults = results.filter(({ url }) => !!url);\n        if (erroredResults.length) {\n          throw erroredResults[0];\n        } else if (okResults.length) {\n          onChooseResources(\n            okResults.map(({ url, resourceFile }) => {\n              const newResource = createNewResource();\n              newResource.setFile(url || '');\n              newResource.setName(resourceFile.name);\n              newResource.setOrigin('cloud-project-resource', url || '');\n\n              return newResource;\n            })\n          );\n        }\n      } catch (error) {\n        showErrorBox({\n          message:\n            'There was an error while uploading some resources. Verify your internet connection or try again later.',\n          rawError: error,\n          errorId: 'upload-cloud-project-resource-error',\n          doNotReport: true,\n        });\n      } finally {\n        setIsUploading(false);\n      }\n    },\n    [\n      selectedFiles,\n      authenticatedUser,\n      onChooseResources,\n      createNewResource,\n      cloudProjectId,\n    ]\n  );\n\n  const invalidFiles = selectedFiles\n    .map(file => {\n      if (file.size > PROJECT_RESOURCE_MAX_SIZE_IN_BYTES) {\n        return {\n          filename: file.name,\n          error: 'too-large',\n        };\n      }\n      return null;\n    })\n    .filter(Boolean);\n\n  const canUploadWithThisStorageProvider =\n    storageProvider.internalName === 'Cloud' && !!fileMetadata;\n  const isConnected = !!authenticatedUser.authenticated;\n  const canChooseFiles =\n    !isUploading && isConnected && canUploadWithThisStorageProvider;\n  const canUploadFiles =\n    !isUploading &&\n    canChooseFiles &&\n    hasSelectedFiles &&\n    invalidFiles.length === 0;\n\n  return (\n    <ColumnStackLayout noMargin>\n      {!isConnected ? (\n        <AlertMessage kind=\"warning\">\n          <Trans>\n            Your need to first create your account, or login, to upload your own\n            resources.\n          </Trans>\n        </AlertMessage>\n      ) : !canUploadWithThisStorageProvider ? (\n        <AlertMessage kind=\"warning\">\n          <Trans>\n            Your need to first save your game on GDevelop Cloud to upload your\n            own resources.\n          </Trans>\n        </AlertMessage>\n      ) : null}\n      <Paper variant=\"outlined\">\n        <Line expand>\n          <Column expand>\n            <input\n              accept={resourceKindToInputAcceptedFiles[options.resourceKind]}\n              style={styles.fileInput}\n              multiple={options.multiSelection}\n              type=\"file\"\n              ref={inputRef}\n              disabled={!canChooseFiles}\n              onChange={event => {\n                const files = [];\n                for (let i = 0; i < event.currentTarget.files.length; i++) {\n                  files.push(event.currentTarget.files[i]);\n                }\n                setSelectedFiles(files);\n              }}\n            />\n          </Column>\n        </Line>\n      </Paper>\n      {invalidFiles.map(erroredFile => {\n        if (erroredFile.error === 'too-large')\n          return (\n            <AlertMessage kind=\"error\">\n              <Trans>\n                The file {erroredFile.filename} is too large. Use files that are\n                smaller for your game: each must be less than{' '}\n                {PROJECT_RESOURCE_MAX_SIZE_IN_BYTES / 1000 / 1000} MB.\n              </Trans>\n            </AlertMessage>\n          );\n\n        return (\n          <AlertMessage kind=\"error\">\n            <Trans>The file {erroredFile.filename} is invalid.</Trans>\n          </AlertMessage>\n        );\n      })}\n      <LineStackLayout alignItems=\"center\" justifyContent=\"flex-end\" expand>\n        {isUploading ? (\n          <LinearProgress expand value={uploadProgress} variant=\"determinate\" />\n        ) : null}\n        <RaisedButton\n          onClick={onUpload}\n          disabled={!canUploadFiles}\n          primary\n          label={\n            options.multiSelection ? (\n              <Trans>Add selected file(s)</Trans>\n            ) : (\n              <Trans>Add selected file</Trans>\n            )\n          }\n        />\n      </LineStackLayout>\n    </ColumnStackLayout>\n  );\n};\n","// @flow\nimport { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport {\n  type ChooseResourceOptions,\n  type ResourceSourceComponentProps,\n  type ResourceSource,\n  allResourceKindsAndMetadata,\n} from './ResourceSource';\nimport { ResourceStore } from '../AssetStore/ResourceStore';\nimport path from 'path';\nimport { Line } from '../UI/Grid';\nimport { ColumnStackLayout, TextFieldWithButtonLayout } from '../UI/Layout';\nimport RaisedButton from '../UI/RaisedButton';\nimport SemiControlledTextField from '../UI/SemiControlledTextField';\nimport { useDebounce } from '../Utils/UseDebounce';\nimport axios from 'axios';\nimport AlertMessage from '../UI/AlertMessage';\nimport { FileToCloudProjectResourceUploader } from './FileToCloudProjectResourceUploader';\n\ntype ResourceStoreChooserProps = {\n  options: ChooseResourceOptions,\n  onChooseResources: (resources: Array<gdResource>) => void,\n  createNewResource: () => gdResource,\n};\n\nconst ResourceStoreChooser = ({\n  options,\n  onChooseResources,\n  createNewResource,\n}: ResourceStoreChooserProps) => {\n  return (\n    <ResourceStore\n      onChoose={resource => {\n        const chosenResourceUrl = resource.url;\n        const newResource = createNewResource();\n        newResource.setFile(chosenResourceUrl);\n        newResource.setName(path.basename(chosenResourceUrl));\n        newResource.setOrigin('gdevelop-asset-store', chosenResourceUrl);\n\n        onChooseResources([newResource]);\n      }}\n      resourceKind={options.resourceKind}\n    />\n  );\n};\n\nexport const UrlChooser = ({\n  options,\n  onChooseResources,\n  createNewResource,\n}: ResourceStoreChooserProps) => {\n  const [inputValue, setInputValue] = React.useState('');\n  const [error, setError] = React.useState<?Error>(null);\n  const [urlsErroredBooleanArray, setUrlsErroredBooleanArray] = React.useState<\n    boolean[]\n  >([]);\n  const hasErroredUrls = !!urlsErroredBooleanArray.filter(Boolean).length;\n\n  const validateInputValue = useDebounce(async (inputValue: string) => {\n    const urls = options.multiSelection\n      ? inputValue.split('\\n').filter(Boolean)\n      : [inputValue];\n    setError(null);\n    setUrlsErroredBooleanArray([]);\n\n    try {\n      const responses = await Promise.all(\n        urls.map(async url => {\n          return await axios.get(url, {\n            timeout: 1000,\n            validateStatus: status => true,\n          });\n        })\n      );\n\n      setUrlsErroredBooleanArray(\n        responses.map(\n          response => !(response.status >= 200 && response.status < 400)\n        )\n      );\n    } catch (error) {\n      setError(error);\n    }\n  }, 500);\n\n  React.useEffect(\n    () => {\n      validateInputValue(inputValue);\n    },\n    [inputValue, validateInputValue]\n  );\n\n  return (\n    <ColumnStackLayout noMargin expand>\n      <Line noMargin>\n        <TextFieldWithButtonLayout\n          renderButton={style => (\n            <RaisedButton\n              onClick={() => {\n                const urls = options.multiSelection\n                  ? inputValue.split('\\n').filter(Boolean)\n                  : [inputValue];\n\n                onChooseResources(\n                  urls.map(url => {\n                    const newResource = createNewResource();\n                    newResource.setFile(url);\n                    newResource.setName(path.basename(url));\n                    newResource.setOrigin('url', url);\n\n                    return newResource;\n                  })\n                );\n              }}\n              primary\n              label={<Trans>Choose</Trans>}\n              style={style}\n              disabled={!!error || hasErroredUrls}\n            />\n          )}\n          renderTextField={() => (\n            <SemiControlledTextField\n              floatingLabelText={\n                options.multiSelection ? (\n                  <Trans>Resource(s) URL(s) (one per line)</Trans>\n                ) : (\n                  <Trans>Resource URL</Trans>\n                )\n              }\n              value={inputValue}\n              onChange={setInputValue}\n              multiline={options.multiSelection}\n              rows={1}\n              rowsMax={5}\n              fullWidth\n              errorText={\n                error ? (\n                  <Trans>\n                    There was an error verifying the URL(s). Please check they\n                    are correct.\n                  </Trans>\n                ) : hasErroredUrls ? (\n                  <Trans>\n                    Unable to verify URLs{' '}\n                    {urlsErroredBooleanArray\n                      .map((isErrored, index) => {\n                        if (isErrored) return '#' + (index + 1);\n                        return null;\n                      })\n                      .filter(Boolean)\n                      .join(', ')}\n                    . Please check they are correct.\n                  </Trans>\n                ) : null\n              }\n            />\n          )}\n        />\n      </Line>\n      <AlertMessage kind=\"warning\">\n        <Trans>\n          The URLs must be public and stay accessible while you work on this\n          project - they won't be stored inside the project file. When exporting\n          a game, the resources pointed by these URLs will be downloaded and\n          stored inside the game.\n        </Trans>\n      </AlertMessage>\n    </ColumnStackLayout>\n  );\n};\n\nconst browserResourceSources: Array<ResourceSource> = [\n  ...allResourceKindsAndMetadata.map(({ kind, createNewResource }) => ({\n    name: `resource-store-${kind}`,\n    displayName: t`Choose from asset store`,\n    displayTab: 'standalone',\n    kind,\n    renderComponent: (props: ResourceSourceComponentProps) => (\n      <ResourceStoreChooser\n        createNewResource={createNewResource}\n        onChooseResources={props.onChooseResources}\n        options={props.options}\n        key={`resource-store-${kind}`}\n      />\n    ),\n  })),\n  ...allResourceKindsAndMetadata.map(({ kind, createNewResource }) => ({\n    name: `upload-${kind}`,\n    displayName: t`File(s) from your device`,\n    displayTab: 'import',\n    kind,\n    renderComponent: (props: ResourceSourceComponentProps) => (\n      <FileToCloudProjectResourceUploader\n        createNewResource={createNewResource}\n        onChooseResources={props.onChooseResources}\n        options={props.options}\n        fileMetadata={props.fileMetadata}\n        getStorageProvider={props.getStorageProvider}\n        key={`url-chooser-${kind}`}\n      />\n    ),\n  })),\n  ...allResourceKindsAndMetadata.map(({ kind, createNewResource }) => ({\n    name: `url-chooser-${kind}`,\n    displayName: t`Use a public URL`,\n    displayTab: 'import-advanced',\n    kind,\n    renderComponent: (props: ResourceSourceComponentProps) => (\n      <UrlChooser\n        createNewResource={createNewResource}\n        onChooseResources={props.onChooseResources}\n        options={props.options}\n        key={`url-chooser-${kind}`}\n      />\n    ),\n  })),\n];\n\nexport default browserResourceSources;\n","// @flow\nimport Window from '../Utils/Window';\nimport { type ResourceExternalEditor } from './ResourceExternalEditor.flow';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\n\n/**\n * This is the list of editors that can be used to edit resources\n * when running in a browser.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    displayName: 'Edit with Piskel',\n    kind: 'image',\n    edit: () => {\n      sendExternalEditorOpened('piskel');\n      Window.showMessageBox(\n        'This feature is only supported in the desktop version for now!\\nDownload it from GDevelop website.'\n      );\n    },\n  },\n  {\n    name: 'jfxr-app',\n    displayName: 'Edit with Jfxr',\n    kind: 'audio',\n    edit: () => {\n      sendExternalEditorOpened('jfxr');\n      Window.showMessageBox(\n        'This feature is only supported in the desktop version for now!\\nDownload it from GDevelop website.'\n      );\n    },\n  },\n  {\n    name: 'yarn-app',\n    displayName: 'Edit with Yarn',\n    kind: 'json',\n    edit: () => {\n      sendExternalEditorOpened('yarn');\n      Window.showMessageBox(\n        'This feature is only supported in the desktop version for now!\\nDownload it from GDevelop website.'\n      );\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport { type Exporter } from '../ExportDialog';\nimport { browserOnlineCordovaExportPipeline } from './BrowserOnlineCordovaExport';\nimport { browserOnlineElectronExportPipeline } from './BrowserOnlineElectronExport';\nimport { browserOnlineWebExportPipeline } from './BrowserOnlineWebExport';\nimport { browserHTML5ExportPipeline } from './BrowserHTML5Export';\nimport { browserCordovaExportPipeline } from './BrowserCordovaExport';\nimport { browserElectronExportPipeline } from './BrowserElectronExport';\nimport { browserFacebookInstantGamesExportPipeline } from './BrowserFacebookInstantGamesExport';\nimport { cordovaExporter } from '../GenericExporters/CordovaExport';\nimport { onlineWebExporter } from '../GenericExporters/OnlineWebExport';\nimport { html5Exporter } from '../GenericExporters/HTML5Export';\nimport { facebookInstantGamesExporter } from '../GenericExporters/FacebookInstantGamesExport';\nimport { onlineCordovaExporter } from '../GenericExporters/OnlineCordovaExport';\nimport { onlineElectronExporter } from '../GenericExporters/OnlineElectronExport';\nimport { electronExporter } from '../GenericExporters/ElectronExport';\n\nexport const browserOnlineWebExporter: Exporter = {\n  ...onlineWebExporter,\n  exportPipeline: browserOnlineWebExportPipeline,\n};\n\nexport const browserAutomatedExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: browserHTML5ExportPipeline,\n  },\n  {\n    ...onlineCordovaExporter,\n    exportPipeline: browserOnlineCordovaExportPipeline,\n  },\n  {\n    ...onlineElectronExporter,\n    exportPipeline: browserOnlineElectronExportPipeline,\n  },\n  {\n    ...facebookInstantGamesExporter,\n    exportPipeline: browserFacebookInstantGamesExportPipeline,\n  },\n];\n\nexport const browserManualExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: browserHTML5ExportPipeline,\n  },\n  {\n    ...cordovaExporter,\n    exportPipeline: browserCordovaExportPipeline,\n  },\n  {\n    ...electronExporter,\n    exportPipeline: browserElectronExportPipeline,\n  },\n];\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport { uploadObject, getBaseUrl } from '../../Utils/GDevelopServices/Preview';\nimport { makeTimestampedId } from '../../Utils/TimestampedId';\nimport slugs from 'slugs';\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to temporary S3 files.\n */\nexport const makeBrowserS3EventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  const prefix = makeTimestampedId();\n  const getPathFor = (codeNamespace: string) => {\n    return `${prefix}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) =>\n      getBaseUrl() + getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      const key = getPathFor(functionCodeNamespace);\n      onWriteFile({ includeFile: key, content: code });\n      console.log(`Uploading function generated code to ${key}...`);\n      return uploadObject({\n        Key: getPathFor(functionCodeNamespace),\n        Body: code,\n        ContentType: 'text/javascript',\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      const key = getPathFor(behaviorCodeNamespace);\n      onWriteFile({ includeFile: key, content: code });\n      console.log(`Uploading behavior generated code to ${key}...`);\n      return uploadObject({\n        Key: getPathFor(behaviorCodeNamespace),\n        Body: code,\n        ContentType: 'text/javascript',\n      });\n    },\n  };\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport DownloadFileSaveAsDialog from './DownloadFileSaveAsDialog';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\n\n/**\n * \"Storage\" allowing to download a copy of the game.\n * Used for the web-app.\n */\nexport default ({\n  internalName: 'DownloadFile',\n  name: t`Download a copy`,\n  renderIcon: props => <SaveAlt fontSize={props.size} />,\n  hiddenInOpenDialog: true,\n  createOperations: ({ setDialog, closeDialog }) => ({\n    onSaveProjectAs: async (\n      project: gdProject,\n      fileMetadata: ?FileMetadata,\n      options\n    ) => {\n      if (options && options.onStartSaving) options.onStartSaving();\n      await options.onMoveResources();\n\n      return new Promise(resolve => {\n        setDialog(() => (\n          <DownloadFileSaveAsDialog\n            onDone={() => {\n              closeDialog();\n              resolve({ wasSaved: false });\n            }}\n            project={project}\n          />\n        ));\n      });\n    },\n  }),\n}: StorageProvider);\n","// @flow\n\nimport * as React from 'react';\nimport { I18n } from '@lingui/react';\nimport { type I18n as I18nType } from '@lingui/core';\nimport { Trans, t } from '@lingui/macro';\n\nimport Dialog, { DialogPrimaryButton } from '../../UI/Dialog';\nimport FlatButton from '../../UI/FlatButton';\nimport TextField from '../../UI/TextField';\nimport { CLOUD_PROJECT_NAME_MAX_LENGTH } from '../../Utils/GDevelopServices/Project';\n\ntype Props = {|\n  onCancel: () => void,\n  nameSuggestion: string,\n  onSave: (newCloudProjectName: string) => void,\n|};\n\nconst CloudSaveAsDialog = (props: Props) => {\n  const [name, setName] = React.useState<string>(props.nameSuggestion);\n  const [error, setError] = React.useState<?string>(null);\n\n  const onSave = (i18n: I18nType) => {\n    setError(null);\n    if (!name) {\n      setError(i18n._(t`Project name cannot be empty.`));\n      return;\n    }\n    props.onSave(name);\n  };\n\n  return (\n    <I18n>\n      {({ i18n }) => (\n        <Dialog\n          onApply={() => onSave(i18n)}\n          actions={[\n            <FlatButton\n              key=\"cancel\"\n              label={<Trans>Cancel</Trans>}\n              primary={false}\n              onClick={props.onCancel}\n            />,\n            <DialogPrimaryButton\n              key=\"save\"\n              label={<Trans>Save</Trans>}\n              primary\n              onClick={() => onSave(i18n)}\n            />,\n          ]}\n          open\n          onRequestClose={props.onCancel}\n          maxWidth=\"sm\"\n          title={<Trans>Choose a name for your new project</Trans>}\n          flexBody\n        >\n          <TextField\n            autoFocus\n            fullWidth\n            maxLength={CLOUD_PROJECT_NAME_MAX_LENGTH}\n            errorText={error}\n            translatableHintText={t`Project name`}\n            type=\"text\"\n            value={name}\n            onChange={(e, newName) => {\n              setName(newName);\n            }}\n          />\n        </Dialog>\n      )}\n    </I18n>\n  );\n};\n\nexport default CloudSaveAsDialog;\n","// @flow\nimport * as React from 'react';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { type FileMetadata } from '..';\nimport {\n  commitVersion,\n  createCloudProject,\n  getCredentialsForCloudProject,\n  updateCloudProject,\n} from '../../Utils/GDevelopServices/Project';\nimport type { $AxiosError } from 'axios';\nimport type { MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport { serializeToJSON } from '../../Utils/Serializer';\nimport { initializeZipJs } from '../../Utils/Zip.js';\nimport CloudSaveAsDialog from './CloudSaveAsDialog';\nimport { t } from '@lingui/macro';\n\nconst zipProject = async (project: gdProject) => {\n  const zipJs: ZipJs = await initializeZipJs();\n  const projectJson = serializeToJSON(project);\n  const textReader = new zipJs.TextReader(projectJson);\n\n  return new Promise((resolve, reject) => {\n    zipJs.createWriter(\n      new zipJs.BlobWriter('application/zip'),\n      zipWriter => {\n        zipWriter.add('game.json', textReader, () => {\n          zipWriter.close(blob => {\n            resolve(blob);\n          });\n        });\n      },\n      error => {\n        console.error('An error occurred when zipping project', error);\n        reject(error);\n      }\n    );\n  });\n};\n\nconst zipProjectAndCommitVersion = async ({\n  authenticatedUser,\n  project,\n  cloudProjectId,\n}: {\n  authenticatedUser: AuthenticatedUser,\n  project: gdProject,\n  cloudProjectId: string,\n}): Promise<?string> => {\n  const archive = await zipProject(project);\n  const newVersion = await commitVersion(\n    authenticatedUser,\n    cloudProjectId,\n    archive\n  );\n  return newVersion;\n};\n\nexport const generateOnSaveProject = (\n  authenticatedUser: AuthenticatedUser\n) => async (project: gdProject, fileMetadata: FileMetadata) => {\n  const newVersion = await zipProjectAndCommitVersion({\n    authenticatedUser,\n    project,\n    cloudProjectId: fileMetadata.fileIdentifier,\n  });\n  if (!newVersion) return { wasSaved: false, fileMetadata };\n  return {\n    wasSaved: true,\n    fileMetadata,\n  };\n};\n\nexport const generateOnChangeProjectProperty = (\n  authenticatedUser: AuthenticatedUser\n) => async (\n  project: gdProject,\n  fileMetadata: FileMetadata,\n  properties: { name: string }\n): Promise<boolean> => {\n  if (!authenticatedUser.authenticated) return false;\n  try {\n    await updateCloudProject(\n      authenticatedUser,\n      fileMetadata.fileIdentifier,\n      properties\n    );\n    const newVersion = await zipProjectAndCommitVersion({\n      authenticatedUser,\n      project,\n      cloudProjectId: fileMetadata.fileIdentifier,\n    });\n    if (!newVersion) {\n      throw new Error(\"Couldn't save project following property update.\");\n    }\n\n    return true;\n  } catch (error) {\n    // TODO: Determine if a feedback should be given to user so that they can try again if necessary.\n    console.warn(\n      'An error occurred while changing cloud project name. Ignoring.',\n      error\n    );\n    return false;\n  }\n};\n\nexport const getWriteErrorMessage = (\n  error: Error | $AxiosError<any>\n): MessageDescriptor => {\n  if (\n    error.response &&\n    error.response.data &&\n    error.response.data.code === 'project-creation/too-many-projects'\n  ) {\n    return t`You've reached the limit of cloud projects you can have. Delete some existing cloud projects of yours before trying again.`;\n  }\n  return t`An error occurred when saving the project, please verify your internet connection or try again later.`;\n};\n\nexport const generateOnChooseSaveProjectAsLocation = (\n  authenticatedUser: AuthenticatedUser,\n  setDialog: (() => React.Node) => void,\n  closeDialog: () => void\n) => async (\n  project: gdProject,\n  fileMetadata: ?FileMetadata\n): Promise<{|\n  fileMetadata: ?FileMetadata,\n|}> => {\n  if (!authenticatedUser.authenticated) {\n    return { fileMetadata: null };\n  }\n\n  const name = await new Promise(resolve => {\n    setDialog(() => (\n      <CloudSaveAsDialog\n        onCancel={() => {\n          closeDialog();\n          resolve(null);\n        }}\n        nameSuggestion={project.getName()}\n        onSave={(newName: string) => {\n          closeDialog();\n          resolve(newName);\n        }}\n      />\n    ));\n  });\n\n  if (!name) return { fileMetadata: null }; // Save was cancelled.\n\n  const cloudProject = await createCloudProject(authenticatedUser, {\n    name,\n  });\n  if (!cloudProject)\n    throw new Error('No cloud project was returned from creation api call.');\n\n  return {\n    fileMetadata: {\n      fileIdentifier: cloudProject.id,\n    },\n  };\n};\n\nexport const generateOnSaveProjectAs = (\n  authenticatedUser: AuthenticatedUser,\n  setDialog: (() => React.Node) => void,\n  closeDialog: () => void\n) => async (\n  project: gdProject,\n  fileMetadata: ?FileMetadata,\n  options: {|\n    onStartSaving: () => void,\n    onMoveResources: () => Promise<void>,\n  |}\n) => {\n  if (!fileMetadata)\n    throw new Error('A location was not chosen before saving as.');\n  if (!authenticatedUser.authenticated) {\n    return { wasSaved: false };\n  }\n  if (options && options.onStartSaving) options.onStartSaving();\n\n  // From now, save was confirmed so we create a new project. Any failure should\n  // be reported as an error.\n  try {\n    await options.onMoveResources();\n\n    const cloudProjectId = fileMetadata.fileIdentifier;\n    await getCredentialsForCloudProject(authenticatedUser, cloudProjectId);\n    const newVersion = await zipProjectAndCommitVersion({\n      authenticatedUser,\n      project,\n      cloudProjectId,\n    });\n    if (!newVersion)\n      throw new Error('No version id was returned from committing api call.');\n\n    return {\n      wasSaved: true,\n    };\n  } catch (error) {\n    console.error('An error occurred while creating a cloud project', error);\n    throw error;\n  }\n};\n","// @flow\n\nimport { t } from '@lingui/macro';\nimport {\n  getCloudProject,\n  getCredentialsForCloudProject,\n  getProjectFileAsZipBlob,\n} from '../../Utils/GDevelopServices/Project';\nimport { initializeZipJs } from '../../Utils/Zip.js';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { type FileMetadata } from '..';\n\nconst unzipProject = async (zippedProject: Blob) => {\n  const zipJs: ZipJs = await initializeZipJs();\n\n  return new Promise((resolve, reject) => {\n    zipJs.createReader(\n      new zipJs.BlobReader(zippedProject),\n      zipReader => {\n        zipReader.getEntries(entries => {\n          // Reading only the first entry since the zip should only contain the project json file\n          entries[0].getData(new zipJs.TextWriter(), result => {\n            resolve(result);\n          });\n        });\n      },\n      error => {\n        console.error(\n          'An error occurred when unzipping archived project',\n          error\n        );\n        reject(error);\n      }\n    );\n  });\n};\n\nexport const generateOnOpen = (authenticatedUser: AuthenticatedUser) => async (\n  fileMetadata: FileMetadata,\n  onProgress?: (progress: number, message: MessageDescriptor) => void\n): Promise<{|\n  content: Object,\n|}> => {\n  const cloudProjectId = fileMetadata.fileIdentifier;\n\n  onProgress && onProgress((1 / 4) * 100, t`Calibrating sensors`);\n  const cloudProject = await getCloudProject(authenticatedUser, cloudProjectId);\n  if (!cloudProject) throw new Error(\"Cloud project couldn't be fetched.\");\n\n  onProgress && onProgress((2 / 4) * 100, t`Starting engine`);\n  await getCredentialsForCloudProject(authenticatedUser, cloudProjectId);\n  onProgress && onProgress((3 / 4) * 100, t`Checking tools`);\n  const zippedSerializedProject = await getProjectFileAsZipBlob(cloudProject);\n  onProgress && onProgress((4 / 4) * 100, t`Opening portal`);\n  const serializedProject = await unzipProject(zippedSerializedProject);\n\n  return {\n    content: JSON.parse(serializedProject),\n  };\n};\n\nexport const generateOnEnsureCanAccessResources = (\n  authenticatedUser: AuthenticatedUser\n) => async (\n  project: gdProject,\n  fileMetadata: FileMetadata,\n  onProgress?: (progress: number, message: MessageDescriptor) => void\n): Promise<void> => {\n  const cloudProjectId = fileMetadata.fileIdentifier;\n  await getCredentialsForCloudProject(authenticatedUser, cloudProjectId);\n};\n","// @flow\nimport * as React from 'react';\nimport { t } from '@lingui/macro';\nimport { type StorageProvider } from '../index';\nimport {\n  generateOnChangeProjectProperty,\n  generateOnSaveProject,\n  generateOnChooseSaveProjectAsLocation,\n  generateOnSaveProjectAs,\n  getWriteErrorMessage,\n} from './CloudProjectWriter';\nimport {\n  type AppArguments,\n  POSITIONAL_ARGUMENTS_KEY,\n} from '../../Utils/Window';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport {\n  generateOnOpen,\n  generateOnEnsureCanAccessResources,\n} from './CloudProjectOpener';\nimport Cloud from '../../UI/CustomSvgIcons/Cloud';\n\nconst isURL = (filename: string) => {\n  return (\n    filename.startsWith('http://') ||\n    filename.startsWith('https://') ||\n    filename.startsWith('ftp://') ||\n    filename.startsWith('blob:') ||\n    filename.startsWith('data:')\n  );\n};\n\nexport default ({\n  internalName: 'Cloud',\n  name: t`GDevelop Cloud`,\n  renderIcon: props => <Cloud fontSize={props.size} />,\n  hiddenInOpenDialog: true,\n  needUserAuthentication: true,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    const fileIdentifier = appArguments[POSITIONAL_ARGUMENTS_KEY][0];\n    if (isURL(fileIdentifier)) return null;\n\n    return {\n      fileIdentifier,\n    };\n  },\n  createOperations: ({ setDialog, closeDialog, authenticatedUser }) => ({\n    onOpen: generateOnOpen(authenticatedUser),\n    onEnsureCanAccessResources: generateOnEnsureCanAccessResources(\n      authenticatedUser\n    ),\n    onSaveProject: generateOnSaveProject(authenticatedUser),\n    onChooseSaveProjectAsLocation: generateOnChooseSaveProjectAsLocation(\n      authenticatedUser,\n      setDialog,\n      closeDialog\n    ),\n    onSaveProjectAs: generateOnSaveProjectAs(\n      authenticatedUser,\n      setDialog,\n      closeDialog\n    ),\n    onChangeProjectProperty: generateOnChangeProjectProperty(authenticatedUser),\n    getOpenErrorMessage: (error: Error): MessageDescriptor => {\n      return t`An error occurred when opening the project. Check that your internet connection is working and that your browser allows the use of cookies.`;\n    },\n    getWriteErrorMessage,\n  }),\n}: StorageProvider);\n","// @flow\nimport {\n  type MoveAllProjectResourcesOptions,\n  type MoveAllProjectResourcesResult,\n} from '../ResourceMover';\nimport {\n  getCredentialsForCloudProject,\n  type UploadedProjectResourceFiles,\n  uploadProjectResourceFiles,\n  extractFilenameFromProjectResourceUrl,\n  extractProjectUuidFromProjetResourceUrl,\n} from '../../Utils/GDevelopServices/Project';\nimport { checkIfIsGDevelopCloudBucketUrl } from '../../Utils/CrossOrigin';\nimport {\n  downloadUrlsToBlobs,\n  type ItemResult,\n} from '../../Utils/BlobDownloader';\n\nconst isURL = (filename: string) => {\n  return (\n    filename.startsWith('http://') ||\n    filename.startsWith('https://') ||\n    filename.startsWith('ftp://') ||\n    filename.startsWith('blob:') ||\n    filename.startsWith('data:')\n  );\n};\n\nconst isBlobURL = (filename: string) => {\n  return filename.startsWith('blob:');\n};\n\nexport const moveAllCloudProjectResourcesToCloudProject = async ({\n  project,\n  authenticatedUser,\n  oldFileMetadata,\n  newFileMetadata,\n  oldStorageProvider,\n  oldStorageProviderOperations,\n  newStorageProvider,\n  newStorageProviderOperations,\n  onProgress,\n}: MoveAllProjectResourcesOptions): Promise<MoveAllProjectResourcesResult> => {\n  const result: MoveAllProjectResourcesResult = {\n    erroredResources: [],\n  };\n\n  type ResourceToFetchAndUpload = {|\n    resource: gdResource,\n    url: string,\n    filename: string,\n  |};\n\n  const newCloudProjectId = newFileMetadata.fileIdentifier;\n\n  /**\n   * Find the resources stored on GDevelop Cloud that must be downloaded and\n   * uploaded into the new project.\n   */\n  const getResourcesToFetchAndUpload = (\n    project: gdProject\n  ): Array<ResourceToFetchAndUpload> => {\n    const resourcesManager = project.getResourcesManager();\n    const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n    return allResourceNames\n      .map(\n        (resourceName: string): ?ResourceToFetchAndUpload => {\n          const resource = resourcesManager.getResource(resourceName);\n          const resourceFile = resource.getFile();\n\n          if (isURL(resourceFile)) {\n            if (checkIfIsGDevelopCloudBucketUrl(resourceFile)) {\n              if (\n                extractProjectUuidFromProjetResourceUrl(resourceFile) ===\n                newCloudProjectId\n              ) {\n                // Somehow the resource is *already* stored in the new project - surely because\n                // the project resources were partially moved (like when you click \"Retry\" after some failures\n                // when saving a project as a new cloud project).\n                // Just ignore this resource which is already moved then.\n                return null;\n              }\n\n              return {\n                resource,\n                url: resourceFile,\n                filename: extractFilenameFromProjectResourceUrl(resourceFile),\n              };\n            } else if (isBlobURL(resourceFile)) {\n              result.erroredResources.push({\n                resourceName: resource.getName(),\n                error: new Error('Unsupported blob URL.'),\n              });\n              return null;\n            } else {\n              // Public URL resource: nothing to do.\n              return null;\n            }\n          } else {\n            // Local resource: unsupported.\n            result.erroredResources.push({\n              resourceName: resource.getName(),\n              error: new Error('Unsupported relative file.'),\n            });\n            return null;\n          }\n        }\n      )\n      .filter(Boolean);\n  };\n\n  const resourcesToFetchAndUpload = getResourcesToFetchAndUpload(project);\n\n  // If an error happens here, it will be thrown out of the function.\n  if (oldStorageProviderOperations.onEnsureCanAccessResources)\n    oldStorageProviderOperations.onEnsureCanAccessResources(\n      project,\n      oldFileMetadata\n    );\n\n  // Download all the project resources as blob (much like what is done during an export).\n  const downloadedBlobsAndResourcesToUpload: Array<\n    ItemResult<ResourceToFetchAndUpload>\n  > = await downloadUrlsToBlobs({\n    urlContainers: resourcesToFetchAndUpload,\n    onProgress: (count, total) => {\n      onProgress(count, total * 2);\n    },\n  });\n\n  // Transform Blobs into Files.\n  const downloadedFilesAndResourcesToUpload = downloadedBlobsAndResourcesToUpload\n    .map(({ item, blob, error }) => {\n      if (error || !blob) {\n        result.erroredResources.push({\n          resourceName: item.resource.getName(),\n          error: error || new Error('Unknown error during download.'),\n        });\n        return null;\n      }\n\n      return {\n        resource: item.resource,\n        file: new File([blob], item.filename, { type: blob.type }),\n      };\n    })\n    .filter(Boolean);\n\n  // Upload the files just downloaded, for the new project.\n  await getCredentialsForCloudProject(authenticatedUser, newCloudProjectId);\n  const uploadedProjectResourceFiles: UploadedProjectResourceFiles = await uploadProjectResourceFiles(\n    authenticatedUser,\n    newCloudProjectId,\n    downloadedFilesAndResourcesToUpload.map(({ file }) => file),\n    (count, total) => {\n      onProgress(total + count, total * 2);\n    }\n  );\n\n  // Update resources with the newly created URLs.\n  uploadedProjectResourceFiles.forEach(({ url, error }, index) => {\n    const resource = downloadedFilesAndResourcesToUpload[index].resource;\n    if (error || !url) {\n      result.erroredResources.push({\n        resourceName: resource.getName(),\n        error: error || new Error('Unknown error during upload.'),\n      });\n      return;\n    }\n\n    resource.setFile(url);\n  });\n\n  return result;\n};\n","// @flow\nimport {\n  type ResourceMover,\n  type MoveAllProjectResourcesOptions,\n  type MoveAllProjectResourcesResult,\n  type MoveAllProjectResourcesFunction,\n} from './index';\nimport CloudStorageProvider from '../CloudStorageProvider';\nimport GoogleDriveStorageProvider from '../GoogleDriveStorageProvider';\nimport UrlStorageProvider from '../UrlStorageProvider';\nimport DownloadFileStorageProvider from '../DownloadFileStorageProvider';\nimport { checkIfIsGDevelopCloudBucketUrl } from '../../Utils/CrossOrigin';\nimport { moveAllCloudProjectResourcesToCloudProject } from '../CloudStorageProvider/CloudResourceMover';\n\nconst isURL = (filename: string) => {\n  return (\n    filename.startsWith('http://') ||\n    filename.startsWith('https://') ||\n    filename.startsWith('ftp://') ||\n    filename.startsWith('blob:') ||\n    filename.startsWith('data:')\n  );\n};\n\nconst isBlobURL = (filename: string) => {\n  return filename.startsWith('blob:');\n};\nconst ensureNoCloudProjectResources = async ({\n  project,\n}: MoveAllProjectResourcesOptions): Promise<MoveAllProjectResourcesResult> => {\n  const result: MoveAllProjectResourcesResult = {\n    erroredResources: [],\n  };\n  const resourcesManager = project.getResourcesManager();\n  const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n  allResourceNames.forEach((resourceName: string) => {\n    const resource = resourcesManager.getResource(resourceName);\n    const resourceFile = resource.getFile();\n\n    if (isURL(resourceFile)) {\n      if (checkIfIsGDevelopCloudBucketUrl(resourceFile)) {\n        result.erroredResources.push({\n          resourceName: resource.getName(),\n          error: new Error(\n            'Resources uploaded to GDevelop Cloud are not supported on Google Drive.'\n          ),\n        });\n      } else if (isBlobURL(resourceFile)) {\n        result.erroredResources.push({\n          resourceName: resource.getName(),\n          error: new Error('Resources with Blob URLs are not supported.'),\n        });\n        return;\n      } else {\n        // Public URL resource: it works.\n        return;\n      }\n    } else {\n      // Local resource: unsupported.\n      result.erroredResources.push({\n        resourceName: resource.getName(),\n        error: new Error('Relative files in resources are not supported.'),\n      });\n      return;\n    }\n  });\n\n  return result;\n};\n\nconst moveNothing = async () => {\n  return {\n    erroredResources: [],\n  };\n};\n\nconst movers: {\n  [string]: MoveAllProjectResourcesFunction,\n} = {\n  // Moving to GDevelop \"Cloud\" storage:\n\n  // From a Cloud project to another, resources need to be copied\n  // (unless they are public URLs).\n  [`${CloudStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveAllCloudProjectResourcesToCloudProject,\n  // Nothing to move around when going from a project on a public URL\n  // to a cloud project (we could offer an option one day though to download\n  // and upload the URL resources on GDevelop Cloud).\n  [`${UrlStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveNothing,\n  // Nothing to move around when going from a project on Google Drive\n  // to a cloud project (because only public URLs are supported on Google Drive).\n  [`${GoogleDriveStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveNothing,\n\n  // Moving to \"GoogleDrive\" storage:\n\n  // Google Drive does not support GDevelop cloud resources, so ensure there are none.\n  [`${CloudStorageProvider.internalName}=>${\n    GoogleDriveStorageProvider.internalName\n  }`]: ensureNoCloudProjectResources,\n  // Nothing to move around when saving to a Google Drive project from a public URL\n  // (because only public URLs are supported).\n  [`${UrlStorageProvider.internalName}=>${\n    GoogleDriveStorageProvider.internalName\n  }`]: moveNothing,\n  // Nothing to move around when saving from a Google Drive project to another\n  // (because only public URLs are supported).\n  [`${GoogleDriveStorageProvider.internalName}=>${\n    GoogleDriveStorageProvider.internalName\n  }`]: moveNothing,\n\n  // Moving to \"DownloadFile\":\n\n  // Saving to \"DownloadFile\" will *not* change any resources, as it's a\n  // \"temporary save\" that is made and given to the user.\n  [`${CloudStorageProvider.internalName}=>${\n    DownloadFileStorageProvider.internalName\n  }`]: moveNothing,\n  [`${UrlStorageProvider.internalName}=>${\n    DownloadFileStorageProvider.internalName\n  }`]: moveNothing,\n  [`${GoogleDriveStorageProvider.internalName}=>${\n    DownloadFileStorageProvider.internalName\n  }`]: moveNothing,\n};\n\nconst BrowserResourceMover: ResourceMover = {\n  moveAllProjectResources: async (\n    options: MoveAllProjectResourcesOptions\n  ): Promise<MoveAllProjectResourcesResult> => {\n    const { oldStorageProvider, newStorageProvider } = options;\n    const mover =\n      movers[\n        `${oldStorageProvider.internalName}=>${newStorageProvider.internalName}`\n      ];\n    if (!mover)\n      throw new Error(\n        `Can't find a ResourceMover for ${oldStorageProvider.internalName} to ${\n          newStorageProvider.internalName\n        }.`\n      );\n\n    return mover(options);\n  },\n};\n\nexport default BrowserResourceMover;\n","// @flow\nimport {\n  type ResourceFetcher,\n  type FetchAllProjectResourcesOptions,\n  type FetchAllProjectResourcesResult,\n  type FetchAllProjectResourcesFunction,\n} from './index';\nimport CloudStorageProvider from '../CloudStorageProvider';\nimport GoogleDriveStorageProvider from '../GoogleDriveStorageProvider';\nimport UrlStorageProvider from '../UrlStorageProvider';\nimport { fetchRelativeResourcesToFullUrls } from '../UrlStorageProvider/UrlResourceFetcher';\n\nconst fetchNothing: FetchAllProjectResourcesFunction = async () => {\n  return {\n    erroredResources: [],\n  };\n};\n\nconst fetchers: {\n  [string]: FetchAllProjectResourcesFunction,\n} = {\n  // The cloud storage has nothing to fetch, all resources are supposed\n  // to be public URLs or URLs on GDevelop Cloud, accessed with a cookie.\n  [CloudStorageProvider.internalName]: fetchNothing,\n  // The cloud storage has nothing to fetch, all resources are supposed\n  // to be public URLs.\n  [GoogleDriveStorageProvider.internalName]: fetchNothing,\n  // The URL storage consider relative resources to be relative to the project\n  // URL. This allows to open local projects uploaded to GitHub for example.\n  [UrlStorageProvider.internalName]: fetchRelativeResourcesToFullUrls,\n};\n\nconst BrowserResourceFetcher: ResourceFetcher = {\n  fetchAllProjectResources: async (\n    options: FetchAllProjectResourcesOptions\n  ): Promise<FetchAllProjectResourcesResult> => {\n    const { storageProvider } = options;\n    const fetcher = fetchers[storageProvider.internalName];\n    if (!fetcher)\n      throw new Error(\n        `Can't find a ResourceFetcher for ${\n          storageProvider.internalName\n        } - have you registered the storage provider here?`\n      );\n\n    return fetcher(options);\n  },\n};\n\nexport default BrowserResourceFetcher;\n","// @flow\nimport * as React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ExportDialog from './Export/ExportDialog';\nimport CreateProjectDialog from './ProjectCreation/CreateProjectDialog';\nimport Authentication from './Utils/GDevelopServices/Authentication';\nimport './UI/icomoon-font.css'; // Styles for Icomoon font.\n\n// Import for browser only IDE\nimport browserResourceSources from './ResourcesList/BrowserResourceSources';\nimport browserResourceExternalEditors from './ResourcesList/BrowserResourceExternalEditors';\nimport BrowserS3PreviewLauncher from './Export/BrowserExporters/BrowserS3PreviewLauncher';\nimport {\n  browserAutomatedExporters,\n  browserManualExporters,\n  browserOnlineWebExporter,\n} from './Export/BrowserExporters';\nimport makeExtensionsLoader from './JsExtensionsLoader/BrowserJsExtensionsLoader';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport { makeBrowserS3EventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/BrowserS3EventsFunctionCodeWriter';\nimport Providers from './MainFrame/Providers';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport UrlStorageProvider from './ProjectsStorage/UrlStorageProvider';\nimport GoogleDriveStorageProvider from './ProjectsStorage/GoogleDriveStorageProvider';\nimport DownloadFileStorageProvider from './ProjectsStorage/DownloadFileStorageProvider';\nimport CloudStorageProvider from './ProjectsStorage/CloudStorageProvider';\nimport {\n  onCreateFromExampleShortHeader,\n  onCreateBlank,\n} from './ProjectCreation/services/BrowserCreation';\nimport BrowserResourceMover from './ProjectsStorage/ResourceMover/BrowserResourceMover';\nimport BrowserResourceFetcher from './ProjectsStorage/ResourceFetcher/BrowserResourceFetcher';\n\nexport const create = (authentication: Authentication) => {\n  Window.setUpContextMenu();\n\n  let app = null;\n  const appArguments = Window.getArguments();\n\n  app = (\n    <Providers\n      authentication={authentication}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeBrowserS3EventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={null}\n      eventsFunctionsExtensionOpener={null}\n    >\n      {({ i18n }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={[\n            UrlStorageProvider,\n            CloudStorageProvider,\n            GoogleDriveStorageProvider,\n            DownloadFileStorageProvider,\n          ]}\n          defaultStorageProvider={UrlStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <MainFrame\n              i18n={i18n}\n              renderPreviewLauncher={(props, ref) => (\n                <BrowserS3PreviewLauncher {...props} ref={ref} />\n              )}\n              initialDialog={appArguments['initial-dialog']}\n              renderExportDialog={props => (\n                <ExportDialog\n                  project={props.project}\n                  onSaveProject={props.onSaveProject}\n                  onChangeSubscription={props.onChangeSubscription}\n                  onClose={props.onClose}\n                  automatedExporters={browserAutomatedExporters}\n                  manualExporters={browserManualExporters}\n                  onlineWebExporter={browserOnlineWebExporter}\n                  allExportersRequireOnline\n                />\n              )}\n              renderCreateDialog={props => (\n                <CreateProjectDialog\n                  open={props.open}\n                  onClose={props.onClose}\n                  initialExampleShortHeader={props.initialExampleShortHeader}\n                  isProjectOpening={props.isProjectOpening}\n                  onOpenProjectPreCreationDialog={\n                    props.onOpenProjectPreCreationDialog\n                  }\n                />\n              )}\n              storageProviders={storageProviders}\n              resourceMover={BrowserResourceMover}\n              resourceFetcher={BrowserResourceFetcher}\n              onCreateFromExampleShortHeader={onCreateFromExampleShortHeader}\n              onCreateBlank={onCreateBlank}\n              getStorageProviderOperations={getStorageProviderOperations}\n              getStorageProvider={getStorageProvider}\n              resourceSources={browserResourceSources}\n              resourceExternalEditors={browserResourceExternalEditors}\n              extensionsLoader={makeExtensionsLoader({\n                objectsEditorService: ObjectsEditorService,\n                objectsRenderingService: ObjectsRenderingService,\n                filterExamples: !Window.isDev(),\n              })}\n              initialFileMetadataToOpen={initialFileMetadataToOpen}\n            />\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n\n  return app;\n};\n","// @flow\nimport { getIDEVersion } from '../Version';\n\ntype FileSet =\n  | 'preview'\n  | 'cordova'\n  | 'electron'\n  | 'web'\n  | 'cocos2d-js'\n  | 'facebook-instant-games';\n\nconst filesToDownload: { [FileSet]: Array<string> } = {\n  preview: ['/Runtime/index.html'],\n  web: ['/Runtime/index.html'],\n  'cocos2d-js': [\n    '/Runtime/Cocos2d/cocos2d-js-v3.10.js',\n    '/Runtime/Cocos2d/index.html',\n    '/Runtime/Cocos2d/main.js',\n    '/Runtime/Cocos2d/project.json',\n  ],\n  'facebook-instant-games': [\n    '/Runtime/FacebookInstantGames/fbapp-config.json',\n    '/Runtime/FacebookInstantGames/index.html',\n  ],\n  cordova: [\n    '/Runtime/Cordova/www/index.html',\n    '/Runtime/Cordova/config.xml',\n    '/Runtime/Cordova/package.json',\n  ],\n  electron: [\n    '/Runtime/index.html',\n    '/Runtime/Electron/main.js',\n    '/Runtime/Electron/package.json',\n  ],\n};\n\nexport type TextFileDescriptor = {| text: string, filePath: string |};\n\nexport const findGDJS = (\n  fileSet: FileSet\n): Promise<{|\n  gdjsRoot: string,\n  filesContent: Array<TextFileDescriptor>,\n|}> => {\n  // Get GDJS for this version. If you updated the version,\n  // run `newIDE/web-app/scripts/deploy-GDJS-Runtime` script.\n  let gdjsRoot = `https://resources.gdevelop-app.com/GDJS-${getIDEVersion()}`;\n\n  // If you want to test your local changes to the game engine on the local web-app,\n  // run `npx serve -- --cors` (or another CORS enabled http server on port 5000)\n  // in `newIDE/app/resources/GDJS` and uncomment this line:\n  // gdjsRoot = `http://localhost:5000`;\n\n  return Promise.all(\n    filesToDownload[fileSet].map(relativeFilePath => {\n      const url = gdjsRoot + relativeFilePath;\n\n      // Don't do any caching, rely on the browser cache only.\n      return fetch(url).then(response => {\n        if (!response.ok) {\n          console.error(`Error while downloading \"${url}\"`, response);\n          throw new Error(\n            `Error while downloading \"${url}\" (status: ${response.status})`\n          );\n        }\n        return response.text().then(text => ({\n          filePath: url,\n          text,\n        }));\n      });\n    })\n  ).then(filesContent => {\n    return {\n      gdjsRoot,\n      filesContent,\n    };\n  });\n};\n","// @flow\nimport { initializeZipJs } from './Zip.js';\nimport { downloadUrlsToBlobs, type ItemResult } from './BlobDownloader';\nimport path from 'path';\nimport { shortenString } from './StringHelpers.js';\n\nexport type BlobFileDescriptor = {|\n  filePath: string,\n  blob: Blob,\n|};\n\nexport type TextFileDescriptor = {|\n  filePath: string,\n  text: string,\n|};\n\nexport type UrlFileDescriptor = {|\n  filePath: string,\n  url: string,\n|};\n\nfunction eachCallback<T>(\n  array: Array<T>,\n  callback: (T, () => void) => void,\n  done: () => void\n) {\n  if (!array.length) {\n    done();\n    return;\n  }\n  let index = 0;\n\n  const callNextCallback = () => {\n    callback(array[index], () => {\n      index++;\n      if (index >= array.length) {\n        done();\n      } else {\n        callNextCallback();\n      }\n    });\n  };\n\n  callNextCallback();\n}\n\nexport const downloadUrlFilesToBlobFiles = async ({\n  urlFiles,\n  onProgress,\n}: {|\n  urlFiles: Array<UrlFileDescriptor>,\n  onProgress: (count: number, total: number) => void,\n|}): Promise<Array<BlobFileDescriptor>> => {\n  const downloadedBlobs: Array<\n    ItemResult<UrlFileDescriptor>\n  > = await downloadUrlsToBlobs({\n    urlContainers: urlFiles.filter(({ url }) => url.indexOf('.h') === -1), // Should be useless now, still keep it by safety.\n    onProgress,\n  });\n\n  const erroredUrls = downloadedBlobs.filter(downloadedBlob => {\n    return !!downloadedBlob.error || !downloadedBlob.blob;\n  });\n  if (erroredUrls.length) {\n    const errorMessages = erroredUrls\n      .map(({ error }) =>\n        error ? error.message : 'Unknown error during download.'\n      )\n      .filter(Boolean)\n      .join(',\\n');\n\n    throw new Error(\n      `Could not download ${erroredUrls.length} files:\\n ${shortenString(\n        errorMessages,\n        300\n      )}`\n    );\n  }\n\n  return downloadedBlobs.map(({ item, blob }) => {\n    return {\n      // $FlowFixMe - any non existing blob is discarded before.\n      blob,\n      filePath: item.filePath,\n    };\n  });\n};\n\n/**\n * Archive the specified blobs and texts into a zip file,\n * returned as a blob.\n */\nexport const archiveFiles = async ({\n  textFiles,\n  blobFiles,\n  basePath,\n  onProgress,\n  sizeLimit,\n}: {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n  basePath: string,\n  onProgress: (count: number, total: number) => void,\n  sizeLimit?: number,\n|}): Promise<Blob> => {\n  const zipJs: ZipJs = await initializeZipJs();\n\n  let zippedFilesCount = 0;\n  let totalFilesCount = blobFiles.length + textFiles.length;\n\n  return new Promise((resolve, reject) => {\n    zipJs.createWriter(\n      new zipJs.BlobWriter('application/zip'),\n      function(zipWriter) {\n        eachCallback(\n          blobFiles,\n          ({ filePath, blob }, done) => {\n            // All files in a zip are relative\n            const relativeFilePath = path.relative(basePath, filePath);\n\n            zipWriter.add(\n              relativeFilePath,\n              new zipJs.BlobReader(blob),\n              () => {\n                zippedFilesCount++;\n                onProgress(zippedFilesCount, totalFilesCount);\n                done();\n              },\n              () => {\n                /* We don't track progress at the file level */\n              }\n            );\n          },\n          () => {\n            eachCallback(\n              textFiles,\n              ({ filePath, text }, done) => {\n                // All files in a zip are relative\n                const relativeFilePath = path.relative(basePath, filePath);\n\n                zipWriter.add(\n                  relativeFilePath,\n                  new zipJs.TextReader(text),\n                  () => {\n                    zippedFilesCount++;\n                    onProgress(zippedFilesCount, totalFilesCount);\n                    done();\n                  },\n                  () => {\n                    /* We don't track progress at the file level */\n                  }\n                );\n              },\n              () => {\n                zipWriter.close((blob: Blob) => {\n                  const fileSize = blob.size;\n                  if (sizeLimit && fileSize > sizeLimit) {\n                    const roundFileSizeInMb = Math.round(\n                      fileSize / (1000 * 1000)\n                    );\n                    reject(\n                      new Error(\n                        `Archive is of size ${roundFileSizeInMb} MB, which is above the limit allowed of ${sizeLimit /\n                          (1000 * 1000)} MB.`\n                      )\n                    );\n                  }\n                  resolve(blob);\n                });\n              }\n            );\n          }\n        );\n      },\n      error => {\n        console.error('Error while making zip:', error);\n        reject(error);\n      }\n    );\n  });\n};\n","// @flow\nimport path from 'path';\nconst gd: libGDevelop = global.gd;\n\nexport type BlobFileDescriptor = {|\n  filePath: string,\n  blob: Blob,\n|};\n\nexport type TextFileDescriptor = {|\n  filePath: string,\n  text: string,\n|};\n\nexport type UrlFileDescriptor = {|\n  filePath: string,\n  url: string,\n|};\n\ntype ConstructorArgs = {|\n  textFiles: Array<TextFileDescriptor>,\n|};\n\nconst isURL = (filename: string) => {\n  return (\n    filename.startsWith('http://') ||\n    filename.startsWith('https://') ||\n    filename.startsWith('ftp://') ||\n    filename.startsWith('blob:') ||\n    filename.startsWith('data:')\n  );\n};\n\n// For some reason, `path.posix` is undefined when packaged\n// with webpack, so we're using `path` directly. As it's for the web-app,\n// it should always be the posix version. In tests on Windows,\n// it's necessary to use path.posix.\n// Search for \"pathPosix\" in the codebase for other places where this is used.\nconst pathPosix = path.posix || path;\n\n// TODO: Merge BrowserS3FileSystem into this? The way URLs are handled\n// is different though (BrowserS3FileSystem is not downloading anything\n// from URLs, while this file system does download files).\n\n/**\n * An in-memory \"file system\" that can be used for GDevelop exports.\n */\nexport default class BrowserFileSystem {\n  // The representation of the \"file system\":\n\n  /**\n   * Store all the text files (filepath => content)\n   * @private\n   */\n  _textFiles: { [string]: string } = {};\n\n  /**\n   * Store all the files that should be downloaded (filepath => url)\n   * @private\n   */\n  _filesToDownload: { [string]: string } = {};\n\n  /**\n   * Create a new in-memory file system.\n   */\n  constructor({ textFiles }: ConstructorArgs) {\n    textFiles.forEach(textFileDescriptor => {\n      this._textFiles[textFileDescriptor.filePath] = textFileDescriptor.text;\n    });\n  }\n\n  /**\n   * Returns all the in memory text files with the specified path prefix.\n   */\n  getAllTextFilesIn = (pathPrefix: string): Array<TextFileDescriptor> => {\n    return Object.keys(this._textFiles)\n      .filter(filePath => filePath.indexOf(pathPrefix) === 0)\n      .map(filePath => ({\n        filePath,\n        text: this._textFiles[filePath],\n      }));\n  };\n\n  /**\n   * Returns all the files that should be downloaded from a URL, with the specified path prefix.\n   */\n  getAllUrlFilesIn = (pathPrefix: string): Array<UrlFileDescriptor> => {\n    return Object.keys(this._filesToDownload)\n      .filter(filePath => filePath.indexOf(pathPrefix) === 0)\n      .map(filePath => ({\n        filePath,\n        url: this._filesToDownload[filePath],\n      }));\n  };\n\n  mkDir = (path: string) => {\n    // \"Directories\" are assumed to exist.\n    return true;\n  };\n  dirExists = (path: string) => {\n    // TODO: To be changed to be EnsureDirExists.\n    // \"Directories\" are assumed to exist.\n    return true;\n  };\n  clearDir = (path: string) => {\n    // Clear the files to be written in the specified directory.\n    const filePaths = Object.keys(this._textFiles);\n    filePaths.forEach(filePath => {\n      if (filePath.indexOf(path) === 0) {\n        delete this._textFiles[filePath];\n      }\n    });\n\n    return true;\n  };\n  getTempDir = () => {\n    return '/browser-file-system-tmp-dir';\n  };\n  fileNameFrom = (fullpath: string) => {\n    return pathPosix.basename(fullpath);\n  };\n  dirNameFrom = (fullpath: string) => {\n    return pathPosix.dirname(fullpath);\n  };\n  makeAbsolute = (filePathOrURL: string, baseDirectoryOrURL: string) => {\n    // URLs are always absolute\n    if (isURL(filePathOrURL)) return filePathOrURL;\n\n    if (!this.isAbsolute(baseDirectoryOrURL))\n      baseDirectoryOrURL = pathPosix.resolve(baseDirectoryOrURL);\n\n    return pathPosix.resolve(\n      baseDirectoryOrURL,\n      pathPosix.normalize(filePathOrURL)\n    );\n  };\n  makeRelative = (filePathOrURL: string, baseDirectoryOrURL: string) => {\n    if (isURL(filePathOrURL)) {\n      // Cutting the start if the URL is relative to the base URL\n      if (filePathOrURL.indexOf(baseDirectoryOrURL) === 0) {\n        return filePathOrURL.substring(baseDirectoryOrURL.length);\n      }\n\n      // Keep the URL \"absolute\" if on different domains.\n      console.warn(\n        `${filePathOrURL} cannot be made relative to ${baseDirectoryOrURL}, please double check this behavior is correct.`\n      );\n      return filePathOrURL;\n    }\n\n    // Paths are treated as usual paths.\n    return pathPosix.relative(\n      baseDirectoryOrURL,\n      pathPosix.normalize(filePathOrURL)\n    );\n  };\n  isAbsolute = (fullpath: string) => {\n    // URLs are always absolute\n    if (isURL(fullpath)) return true;\n\n    // Paths are absolute if starting from the root\n    return fullpath.length > 0 && fullpath.charAt(0) === '/';\n  };\n\n  copyFile = (source: string, dest: string) => {\n    // URLs are not copied, but marked as to be downloaded.\n    if (isURL(source)) {\n      if (isURL(dest)) {\n        console.error(\n          `Destination can't be a URL in copyFile (from ${source} to ${dest}).`\n        );\n        return false;\n      }\n\n      this._filesToDownload[pathPosix.normalize(dest)] = source;\n      return true;\n    }\n\n    // If this is a file that we have already in memory,\n    // copy its path.\n    if (!!this._textFiles[source]) {\n      this._textFiles[pathPosix.normalize(dest)] = this._textFiles[source];\n      return true;\n    }\n\n    console.error(`File not found in copyFile (from ${source} to ${dest}).`);\n    return false;\n  };\n\n  writeToFile = (filePath: string, content: string) => {\n    this._textFiles[pathPosix.normalize(filePath)] = content;\n    return true;\n  };\n\n  readFile = (file: string): string => {\n    if (this._textFiles[file]) return this._textFiles[file];\n\n    console.error(`Unknown file ${file}, returning an empty string`);\n    return '';\n  };\n\n  readDir = (path: string, ext: string) => {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n\n    // Simulate ReadDir by returning all external URLs\n    // with the filename matching the extension.\n    Object.keys(this._filesToDownload).forEach(filePath => {\n      const upperCaseFilePath = filePath.toUpperCase();\n      if (\n        upperCaseFilePath.indexOf(ext) ===\n        upperCaseFilePath.length - ext.length\n      ) {\n        output.push_back(filePath);\n      }\n    });\n\n    return output;\n  };\n\n  fileExists = (filePath: string) => {\n    if (isURL(filePath)) return true;\n\n    const normalizedFilePath = pathPosix.normalize(filePath);\n    return (\n      !!this._textFiles[normalizedFilePath] ||\n      !!this._filesToDownload[normalizedFilePath]\n    );\n  };\n}\n","// @flow\nimport * as React from 'react';\n\ntype Props = {\n  blob: ?Blob,\n  children: (blobDownloadUrl: string) => React.Node,\n};\n\nexport const BlobDownloadUrlHolder = ({ blob, children }: Props) => {\n  const [blobDownloadUrl, setBlobDownloadUrl] = React.useState('');\n  const [currentBlob, setCurrentBlob] = React.useState<?Blob>(null);\n  React.useEffect(\n    () => {\n      // This effect function does not look at the blobDownloadUrl, to avoid infinite loops.\n      // It is only in charge of updating the Url when the blob changes.\n      if (blob && blob !== currentBlob) {\n        setBlobDownloadUrl(URL.createObjectURL(blob));\n        setCurrentBlob(blob);\n      }\n    },\n    [blob, currentBlob]\n  );\n\n  React.useEffect(\n    () => {\n      // This cleanup is called both when the component is unmounted or when an update happens.\n      // This allows releasing the URL when a new one is generated.\n      // See https://reactjs.org/docs/hooks-effect.html#explanation-why-effects-run-on-each-update\n      return () => {\n        if (blobDownloadUrl) {\n          URL.revokeObjectURL(blobDownloadUrl);\n        }\n      };\n    },\n    [blobDownloadUrl]\n  );\n\n  return children(blobDownloadUrl);\n};\n\n/**\n * Open an URL generated from a blob, to download it with the specified filename.\n */\nexport const openBlobDownloadUrl = (url: string, filename: string) => {\n  const { body } = document;\n  if (!body) return;\n\n  // Not using Window.openExternalURL because blob urls are blocked\n  // by Adblock Plus (and maybe other ad blockers).\n  const a = document.createElement('a');\n  body.appendChild(a);\n  a.style.display = 'none';\n  a.href = url;\n  a.download = filename;\n  a.click();\n  body.removeChild(a);\n};\n","// @flow\nimport axios from 'axios';\nimport { GDevelopGamePreviews } from './ApiConfigs';\nimport { getSignedUrl } from './Usage';\n\nexport type UploadedObject = {|\n  Key: string,\n  Body: string,\n  ContentType: 'text/javascript' | 'text/html',\n|};\n\nexport const uploadObject = (params: UploadedObject): Promise<any> => {\n  return getSignedUrl({\n    uploadType: 'preview',\n    key: params.Key,\n    contentType: params.ContentType,\n  }).then(({ signedUrl }) =>\n    axios.put(signedUrl, params.Body, {\n      headers: {\n        'Content-Type': params.ContentType,\n      },\n    })\n  );\n};\n\nexport const getBaseUrl = () => {\n  return GDevelopGamePreviews.baseUrl;\n};\n","// @flow\nimport axios from 'axios';\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadBlobFile = (\n  blob: Blob,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  return axios\n    .put(uploadOptions.signedUrl, blob, {\n      headers: {\n        'Content-Type': uploadOptions.contentType,\n      },\n      // Allow any arbitrary large file to be sent\n      maxContentLength: Infinity,\n      onUploadProgress: progressEvent => {\n        if (!progressEvent || !progressEvent.total) {\n          onProgress(0, 0);\n          return;\n        }\n\n        onProgress(progressEvent.loaded, progressEvent.total);\n      },\n    })\n    .then(() => undefined);\n};\n","// @flow\nimport { loadScript } from '../LoadScript';\n\nconst PUBLIC_URL: string = process.env.PUBLIC_URL || '';\nconst ZIPJS_EXTERNAL_PATH = '/external/zip.js/WebContent';\nconst ZLIBASM_EXTERNAL_PATH = '/external/zlib-asm';\n\nlet zipJsLoaded = false;\nlet zipJsLoadingPromise: ?Promise<ZipJs> = null;\n\n/**\n * Initialize Zip.js, resolving with the instance of it.\n * Promise will be rejected if there is an error while loading Zip.js\n * (call initializeZipJs again to retry).\n */\nexport const initializeZipJs = (): Promise<ZipJs> => {\n  if (zipJsLoaded) {\n    const zip: ZipJs = global.zip;\n    return Promise.resolve(zip);\n  }\n\n  if (zipJsLoadingPromise) {\n    return zipJsLoadingPromise;\n  }\n\n  zipJsLoadingPromise = loadScript(\n    PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/zip.js'\n  ).then(() => {\n    const zip: ?ZipJs = global.zip;\n    if (!zip) {\n      throw new Error(\n        'Can not find \"zip\" in the global namespace after loading zip.js. Has the zip.js script being loaded properly?'\n      );\n    }\n\n    zipJsLoadingPromise = null;\n    zipJsLoaded = true;\n\n    zip.workerScripts = {\n      deflater: [\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/z-worker.js',\n        PUBLIC_URL + ZLIBASM_EXTERNAL_PATH + '/zlib.js',\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/zlib-asm/codecs.js',\n      ],\n      inflater: [\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/z-worker.js',\n        PUBLIC_URL + ZLIBASM_EXTERNAL_PATH + '/zlib.js',\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/zlib-asm/codecs.js',\n      ],\n    };\n    return zip;\n  });\n\n  return zipJsLoadingPromise;\n};\n","// @flow\nimport { checkIfCredentialsRequired } from './CrossOrigin';\nimport PromisePool from '@supercharge/promise-pool';\n\nconst addSearchParameterToUrl = (\n  url: string,\n  urlEncodedParameterName: string,\n  urlEncodedValue: string\n) => {\n  if (url.startsWith('data:') || url.startsWith('blob:')) {\n    // blob/data protocol does not support search parameters, which are useless anyway.\n    return url;\n  }\n\n  const separator = url.indexOf('?') === -1 ? '?' : '&';\n  return url + separator + urlEncodedParameterName + '=' + urlEncodedValue;\n};\n\ntype Input<Item> = {|\n  urlContainers: Array<Item>,\n  onProgress: (count: number, total: number) => void,\n|};\n\nexport type ItemResult<Item> = {|\n  item: Item,\n  blob?: Blob,\n  error?: Error,\n|};\n\nexport const downloadUrlsToBlobs = async <Item: { url: string }>({\n  urlContainers,\n  onProgress,\n}: Input<Item>): Promise<Array<ItemResult<Item>>> => {\n  let count = 0;\n\n  // $FlowFixMe - not sure why Flow does not understand this.\n  const { results } = await PromisePool.withConcurrency(20)\n    .for(urlContainers)\n    .process(\n      async (urlContainer): Promise<ItemResult<Item>> => {\n        const { url } = urlContainer;\n\n        try {\n          // To avoid strange/hard to understand CORS issues, we add a dummy parameter.\n          // By doing so, we force browser to consider this URL as different than the one traditionally\n          // used to render the resource in the editor (usually as an `<img>` or as a background image).\n          // If we don't add this distinct parameter, it can happen that browsers fail to load the image\n          // as it's already in the **browser cache** but with slightly different request parameters -\n          // making the CORS checks fail (even if it's coming from the browser cache).\n          //\n          // It's happening sometimes (according to loading order probably) in Chrome and (more often)\n          // in Safari. It might be linked to Amazon S3 + CloudFront that \"doesn't support the Vary: Origin header\".\n          // To be safe, we entirely avoid the issue with this parameter, making the browsers consider\n          // the resources for use in Pixi.js and for the rest of the editor as entirely separate.\n          //\n          // See:\n          // - https://stackoverflow.com/questions/26140487/cross-origin-amazon-s3-not-working-using-chrome\n          // - https://stackoverflow.com/questions/20253472/cors-problems-with-amazon-s3-on-the-latest-chomium-and-google-canary\n          // - https://stackoverflow.com/a/20299333\n          //\n          // Search for \"cors-cache-workaround\" in the codebase for the same workarounds.\n          const urlWithParameters = addSearchParameterToUrl(\n            url,\n            'gdUsage',\n            'export'\n          );\n\n          const response = await fetch(urlWithParameters, {\n            // Include credentials so that resources on GDevelop cloud are properly fetched\n            // with the cookie obtained for the project.\n            credentials: checkIfCredentialsRequired(urlWithParameters)\n              ? // Any resource stored on the GDevelop Cloud buckets needs the \"credentials\" of the user,\n                // i.e: its gdevelop.io cookie, to be passed.\n                'include'\n              : // For other resources, use \"same-origin\" as done by default by fetch.\n                'same-origin',\n          });\n\n          if (!response.ok) {\n            throw new Error(\n              `Error while downloading \"${urlWithParameters}\" (status: ${\n                response.status\n              })`\n            );\n          }\n\n          const blob = await response.blob();\n          const result: ItemResult<Item> = {\n            item: urlContainer,\n            blob,\n          };\n          return result;\n        } catch (error) {\n          const result: ItemResult<Item> = {\n            item: urlContainer,\n            error,\n          };\n          return result;\n        } finally {\n          onProgress(count++, urlContainers.length);\n        }\n      }\n    );\n\n  return results;\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport { serializeToJSON } from '../../Utils/Serializer';\nimport GoogleDrive from '../../UI/CustomSvgIcons/GoogleDrive';\nimport GoogleDriveSaveAsDialog from './GoogleDriveSaveAsDialog';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport { type AppArguments } from '../../Utils/Window';\nimport { loadScript } from '../../Utils/LoadScript';\nconst isDev = process.env.NODE_ENV === 'development';\n\nconst DEVELOPER_KEY = isDev\n  ? 'AIzaSyDH3UNpxzIpcTyd6aMCWI5oNFSptG_BhOc'\n  : 'AIzaSyDJYQmzLCfjXnNImDa1X_cDTWjl2BOrcM4';\nconst CLIENT_ID = isDev\n  ? '28563107180-bd29h9f3og4h1632m94nv6hat2igrej6.apps.googleusercontent.com'\n  : '44882707384-3t4tubr3fbht87sbtdp7u5mlo45k5uku.apps.googleusercontent.com';\nconst APP_ID = isDev ? '28563107180' : '44882707384'; // This is the first part of CLIENT_ID.\nconst DISCOVERY_DOCS = [\n  'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest',\n];\nconst SCOPE =\n  'https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.install';\n\nlet apisLoaded = false;\nlet apisLoadingPromise = null;\n\n/**\n * Load Google Drive APIs. Return a fulfilled promise when done.\n */\nconst initializeApis = (): Promise<void> => {\n  if (apisLoaded) {\n    return Promise.resolve();\n  }\n\n  if (apisLoadingPromise) {\n    // Only do a single initialization attempt at a given time.\n    return apisLoadingPromise;\n  }\n\n  apisLoadingPromise = loadScript('https://apis.google.com/js/api:client.js')\n    .then(() => {\n      const gapi = global.gapi;\n      if (!gapi) {\n        throw new Error(\n          'No gapi global object found after loading Google Drive API script'\n        );\n      }\n\n      return new Promise((resolve, reject) => {\n        gapi.load('client:auth2:picker', {\n          callback: () => {\n            const auth2LoadPromise = gapi.auth2.init({\n              apiKey: DEVELOPER_KEY,\n              clientId: CLIENT_ID,\n              discoveryDocs: DISCOVERY_DOCS,\n              scope: SCOPE,\n            });\n\n            gapi.client.setApiKey(DEVELOPER_KEY);\n            const driveLoadPromise = gapi.client.load('drive', 'v3');\n\n            resolve(Promise.all([auth2LoadPromise, driveLoadPromise]));\n          },\n          onerror: () => {\n            reject(\n              new Error(\n                'Unable to load auth2 and picker APIs for Google Drive.'\n              )\n            );\n          },\n        });\n      });\n    })\n    .then(() => {\n      apisLoaded = true;\n      apisLoadingPromise = null;\n    })\n    .catch(error => {\n      console.error('Error while loading Google Drive APIs:', error);\n      apisLoadingPromise = null;\n\n      throw error;\n    });\n\n  return apisLoadingPromise;\n};\n\ntype GoogleUser = {\n  getAuthResponse: () => { access_token: string, error?: ?Error },\n};\n\nlet isAuthenticated = false;\n\n/**\n * Sign in the user to Google Drive, returning the user object after a successful sign up\n * (or if the user is already signed in).\n */\nexport const authenticate = (): Promise<GoogleUser> => {\n  return initializeApis().then(() => {\n    const gapi = global.gapi;\n    const googleAuth = gapi.auth2.getAuthInstance();\n    if (isAuthenticated && googleAuth.isSignedIn.get()) {\n      return googleAuth.currentUser.get();\n    }\n\n    isAuthenticated = false;\n    googleAuth.isSignedIn.listen(authenticated => {\n      console.info('Authenticated with Google APIs: ', authenticated);\n      isAuthenticated = authenticated;\n    });\n    return googleAuth\n      .signIn({ scope: SCOPE })\n      .then((googleUser: GoogleUser) => {\n        if (\n          !googleUser.getAuthResponse() ||\n          googleUser.getAuthResponse().error\n        ) {\n          console.error(\n            'OAuth2 error while sign in:',\n            googleUser.getAuthResponse()\n              ? googleUser.getAuthResponse().error\n              : 'No AuthResponse'\n          );\n          throw new Error('Authentication error');\n        }\n\n        isAuthenticated = true;\n        return googleUser;\n      });\n  });\n};\n\n/**\n * Update a JSON file, given its file id.\n */\nexport const patchJsonFile = (\n  fileId: string,\n  googleUser: GoogleUser,\n  content: string\n): Promise<void> => {\n  return fetch(`https://www.googleapis.com/upload/drive/v3/files/${fileId}`, {\n    method: 'PATCH',\n    headers: new Headers({\n      Authorization: `Bearer ${googleUser.getAuthResponse().access_token}`,\n      'Content-Type': 'application/json',\n    }),\n    body: content,\n  }).then(res => {\n    if (res.status !== 200) {\n      if (res.status === 401) {\n        isAuthenticated = false;\n      }\n\n      throw res;\n    }\n  });\n};\n\n/**\n * Create a new empty JSON file, returning its fileid.\n */\nexport const createNewJsonFile = (\n  parentId: string,\n  name: string\n): Promise<string> => {\n  const gapi = global.gapi;\n\n  return gapi.client.drive.files\n    .create({\n      'content-type': 'application/json',\n      uploadType: 'multipart',\n      name: name,\n      parents: [parentId],\n      mimeType: 'application/json',\n      fields: 'id, name, kind, size',\n    })\n    .then(apiResponse => {\n      return apiResponse.result.id;\n    });\n};\n\n/**\n * Information about a file or folder picked by the user.\n */\nexport type GoogleDriveFileOrFolder =\n  | {|\n      type: 'FOLDER',\n      id: string,\n      name: string,\n    |}\n  | {|\n      type: 'FILE',\n      id: string,\n      name: string,\n      parentId: string,\n    |};\n\nexport type GoogleDriveFilePickerOptions = {|\n  selectFolderEnabled: boolean,\n  showUploadView: boolean,\n|};\n\n/**\n * Display a file picker as a modal, resolving with the selected file or folder,\n * if any.\n *\n * The picker dialog is not playing nice with material-ui dialogs or overlays. They should\n * not be displayed when the picker is on screen.\n */\nconst showFilePicker = ({\n  selectFolderEnabled,\n  showUploadView,\n}: GoogleDriveFilePickerOptions): Promise<?GoogleDriveFileOrFolder> => {\n  return authenticate().then(googleUser => {\n    const google = global.google;\n\n    return new Promise(resolve => {\n      let picker = null;\n      const pickerBuilder = new google.picker.PickerBuilder()\n        .addView(\n          new google.picker.DocsView()\n            .setIncludeFolders(true)\n            .setSelectFolderEnabled(selectFolderEnabled)\n        )\n        .setOAuthToken(googleUser.getAuthResponse().access_token)\n        .setDeveloperKey(DEVELOPER_KEY)\n        .setAppId(APP_ID) // App ID is required to correctly identify files created with the app.\n        .setCallback(data => {\n          if (\n            data[google.picker.Response.ACTION] === google.picker.Action.PICKED\n          ) {\n            const doc = data[google.picker.Response.DOCUMENTS][0];\n            const id: string = doc[google.picker.Document.ID];\n            const name: string = doc[google.picker.Document.NAME];\n            const parentId: string = doc[google.picker.Document.PARENT_ID];\n            if (\n              doc[google.picker.Document.TYPE] ===\n                google.picker.Type.LOCATION ||\n              doc[google.picker.Document.MIME_TYPE] ===\n                'application/vnd.google-apps.folder'\n            ) {\n              resolve({ id, name, type: 'FOLDER' });\n            } else {\n              resolve({ id, name, type: 'FILE', parentId });\n            }\n            if (picker) picker.dispose();\n          } else if (\n            data[google.picker.Response.ACTION] === google.picker.Action.CANCEL\n          ) {\n            resolve(null);\n            if (picker) picker.dispose();\n          }\n        });\n      if (showUploadView) {\n        pickerBuilder.addView(\n          new google.picker.DocsUploadView().setIncludeFolders(true)\n        );\n      }\n\n      picker = pickerBuilder.build();\n\n      picker.setVisible(true);\n      const pickerElements = document.getElementsByClassName('picker-dialog');\n      for (var i = 0; i < pickerElements.length; ++i) {\n        pickerElements[i].style.zIndex = '5000'; // Higher than Material UI modals\n      }\n    });\n  });\n};\n\n/**\n * A storage that is using Google Drive to open and store files.\n */\nexport default ({\n  internalName: 'GoogleDrive',\n  name: t`Google Drive`,\n  renderIcon: props => <GoogleDrive fontSize={props.size} />,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (appArguments.state) {\n      try {\n        // See \"state\" argument passed by Google Drive API:\n        // https://developers.google.com/drive/api/v3/enable-sdk#construct\n        const googleDriveState = JSON.parse(appArguments.state);\n        if (googleDriveState.ids && googleDriveState.ids[0]) {\n          return {\n            fileIdentifier: googleDriveState.ids[0],\n          };\n        }\n      } catch (e) {\n        console.warn(\n          \"Error while trying to parse the Google Drive 'ids' in 'state' from the app arguments.\"\n        );\n      }\n    }\n\n    return null;\n  },\n  createOperations: ({ setDialog, closeDialog }) => {\n    initializeApis().catch(() => {\n      // Ignore error as we'll retry later.\n    });\n\n    return {\n      doesInitialOpenRequireUserInteraction: true, // Authentication will open a popup, requiring user interaction\n      onOpen: (\n        fileMetadata: FileMetadata\n      ): Promise<{|\n        content: Object,\n      |}> => {\n        const fileId = fileMetadata.fileIdentifier;\n\n        return authenticate()\n          .then(googleUser =>\n            fetch(\n              `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`,\n              {\n                method: 'GET',\n                headers: new Headers({\n                  Authorization: `Bearer ${\n                    googleUser.getAuthResponse().access_token\n                  }`,\n                }),\n              }\n            )\n          )\n          .then(\n            response => {\n              return response.text().then(\n                fileContent => {\n                  return new Promise((resolve, reject) => {\n                    try {\n                      const dataObject = JSON.parse(fileContent);\n                      return resolve({\n                        content: dataObject,\n                      });\n                    } catch (ex) {\n                      return reject(fileId + ' is a corrupted/malformed file.');\n                    }\n                  });\n                },\n                error => {\n                  console.error(\n                    'Error while reading the file from Google Drive API: ',\n                    error\n                  );\n                  throw error;\n                }\n              );\n            },\n            error => {\n              console.error(\n                'Error while fetching the file from Google Drive API: ',\n                error\n              );\n              throw error;\n            }\n          );\n      },\n      onOpenWithPicker: (): Promise<?FileMetadata> => {\n        return authenticate()\n          .then(googleUser =>\n            showFilePicker({ selectFolderEnabled: false, showUploadView: true })\n          )\n          .then(googleDriveFileOrFolder => {\n            if (!googleDriveFileOrFolder) {\n              return null;\n            }\n\n            return {\n              fileIdentifier: googleDriveFileOrFolder.id,\n            };\n          });\n      },\n      onSaveProject: (project: gdProject, fileMetadata: FileMetadata) => {\n        const fileId = fileMetadata.fileIdentifier;\n        const newFileMetadata = {\n          ...fileMetadata,\n          lastModifiedDate: Date.now(),\n        };\n\n        const content = serializeToJSON(project);\n        return authenticate()\n          .then(googleUser => patchJsonFile(fileId, googleUser, content))\n          .then(() => ({\n            wasSaved: true,\n            fileMetadata: newFileMetadata,\n          }));\n      },\n      onChooseSaveProjectAsLocation: (\n        project: gdProject,\n        fileMetadata: ?FileMetadata\n      ) => {\n        return new Promise(resolve => {\n          setDialog(() => (\n            <GoogleDriveSaveAsDialog\n              onShowFilePicker={showFilePicker}\n              onCancel={() => {\n                closeDialog();\n                resolve({ fileMetadata: null });\n              }}\n              onSave={async ({ selectedFileOrFolder, newFileName }) => {\n                await authenticate();\n                if (selectedFileOrFolder.type === 'FOLDER') {\n                  const newFileId = await createNewJsonFile(\n                    selectedFileOrFolder.id,\n                    newFileName\n                  );\n                  resolve({\n                    fileMetadata: {\n                      fileIdentifier: newFileId,\n                    },\n                  });\n                } else {\n                  resolve({\n                    fileMetadata: {\n                      fileIdentifier: selectedFileOrFolder.id,\n                    },\n                  });\n                }\n              }}\n            />\n          ));\n        });\n      },\n      onSaveProjectAs: async (\n        project: gdProject,\n        fileMetadata: ?FileMetadata,\n        options\n      ) => {\n        if (!fileMetadata)\n          throw new Error('A location was not chosen before saving as.');\n\n        const content = serializeToJSON(project);\n        if (options && options.onStartSaving) options.onStartSaving();\n\n        const googleUser = await authenticate();\n        await options.onMoveResources();\n        await patchJsonFile(fileMetadata.fileIdentifier, googleUser, content);\n\n        closeDialog();\n        return {\n          wasSaved: true,\n        };\n      },\n      getOpenErrorMessage: (error: Error): MessageDescriptor => {\n        if (!apisLoaded) {\n          return t`Google Drive could not be loaded. Check that you are not offline and have a proper internet connection, then try again.`;\n        }\n\n        return t`Check that you don't have any blocked popup (if so, allow them and retry) and that you have the authorization for reading the file you're trying to access.`;\n      },\n    };\n  },\n}: StorageProvider);\n"],"sourceRoot":""}